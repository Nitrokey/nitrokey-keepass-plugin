<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/home/test/Pkcs11Interop/src/Pkcs11Interop/bin/Debug/Pkcs11Interop</name>
    </assembly>
    <members>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_AES_CBC_ENCRYPT_DATA_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_AES_CBC_ENCRYPT_DATA mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_AES_CBC_ENCRYPT_DATA_PARAMS.Iv">
            <summary>
            IV value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_AES_CBC_ENCRYPT_DATA_PARAMS.Data">
            <summary>
            Data value part that must be a multiple of 16 bytes long
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_AES_CBC_ENCRYPT_DATA_PARAMS.Length">
            <summary>
            Length of data in bytes
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_AES_CTR_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_AES_CTR mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_AES_CTR_PARAMS.CounterBits">
            <summary>
            The number of bits in the counter block (cb) that shall be incremented
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_AES_CTR_PARAMS.Cb">
            <summary>
            Specifies the counter block
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ARIA_CBC_ENCRYPT_DATA_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_ARIA_CBC_ENCRYPT_DATA mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ARIA_CBC_ENCRYPT_DATA_PARAMS.Iv">
            <summary>
            16-octet initialization vector
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ARIA_CBC_ENCRYPT_DATA_PARAMS.Data">
            <summary>
            Pointer to data to encrypt
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ARIA_CBC_ENCRYPT_DATA_PARAMS.Length">
            <summary>
            Length of data to encrypt
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_CAMELLIA_CBC_ENCRYPT_DATA mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS.Iv">
            <summary>
            16-octet initialization vector
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS.Data">
            <summary>
            Pointer to data to encrypt
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_CAMELLIA_CBC_ENCRYPT_DATA_PARAMS.Length">
            <summary>
            Length of data to encrypt
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_CAMELLIA_CTR_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_CAMELLIA_CTR mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_CAMELLIA_CTR_PARAMS.CounterBits">
            <summary>
            Specifies the number of bits in the counter block (cb) that shall be incremented
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_CAMELLIA_CTR_PARAMS.Cb">
            <summary>
            Specifies the counter block
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_CMS_SIG_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_CMS_SIG mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_CMS_SIG_PARAMS.CertificateHandle">
            <summary>
            Object handle for a certificate associated with the signing key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_CMS_SIG_PARAMS.SigningMechanism">
            <summary>
            Mechanism to use when signing a constructed CMS SignedAttributes value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_CMS_SIG_PARAMS.DigestMechanism">
            <summary>
            Mechanism to use when digesting the data
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_CMS_SIG_PARAMS.ContentType">
            <summary>
            NULL-terminated string indicating complete MIME Content-type of message to be signed or null if the message is a MIME object
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_CMS_SIG_PARAMS.RequestedAttributes">
            <summary>
            Pointer to DER-encoded list of CMS Attributes the caller requests to be included in the signed attributes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_CMS_SIG_PARAMS.RequestedAttributesLen">
            <summary>
            Length in bytes of the value pointed to by RequestedAttributes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_CMS_SIG_PARAMS.RequiredAttributes">
            <summary>
            Pointer to DER-encoded list of CMS Attributes (with accompanying values) required to be included in the resulting signed attributes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_CMS_SIG_PARAMS.RequiredAttributesLen">
            <summary>
            Length in bytes, of the value pointed to by RequiredAttributes
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_DES_CBC_ENCRYPT_DATA_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_DES_CBC_ENCRYPT_DATA and CKM_DES3_CBC_ENCRYPT_DATA mechanisms
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_DES_CBC_ENCRYPT_DATA_PARAMS.Iv">
            <summary>
            IV value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_DES_CBC_ENCRYPT_DATA_PARAMS.Data">
            <summary>
            Data value part that must be a multiple of 8 bytes long
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_DES_CBC_ENCRYPT_DATA_PARAMS.Length">
            <summary>
            Length of data in bytes
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECDH1_DERIVE_PARAMS">
            <summary>
            Structure that provides the parameters for the CKM_ECDH1_DERIVE and CKM_ECDH1_COFACTOR_DERIVE key derivation mechanisms
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECDH1_DERIVE_PARAMS.Kdf">
            <summary>
            Key derivation function used on the shared secret value (CKD)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECDH1_DERIVE_PARAMS.SharedDataLen">
            <summary>
            The length in bytes of the shared info
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECDH1_DERIVE_PARAMS.SharedData">
            <summary>
            Some data shared between the two parties
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECDH1_DERIVE_PARAMS.PublicDataLen">
            <summary>
            The length in bytes of the other party's EC public key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECDH1_DERIVE_PARAMS.PublicData">
            <summary>
            Pointer to other party's EC public key value
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECDH2_DERIVE_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_ECMQV_DERIVE mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECDH2_DERIVE_PARAMS.Kdf">
            <summary>
            Key derivation function used on the shared secret value (CKD)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECDH2_DERIVE_PARAMS.SharedDataLen">
            <summary>
            The length in bytes of the shared info
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECDH2_DERIVE_PARAMS.SharedData">
            <summary>
            Some data shared between the two parties
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECDH2_DERIVE_PARAMS.PublicDataLen">
            <summary>
            The length in bytes of the other party's first EC public key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECDH2_DERIVE_PARAMS.PublicData">
            <summary>
            Pointer to other party's first EC public key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECDH2_DERIVE_PARAMS.PrivateDataLen">
            <summary>
            The length in bytes of the second EC private key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECDH2_DERIVE_PARAMS.PrivateData">
            <summary>
            Key handle for second EC private key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECDH2_DERIVE_PARAMS.PublicDataLen2">
            <summary>
            The length in bytes of the other party's second EC public key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECDH2_DERIVE_PARAMS.PublicData2">
            <summary>
            Pointer to other party's second EC public key value
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECMQV_DERIVE_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_ECMQV_DERIVE mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECMQV_DERIVE_PARAMS.Kdf">
            <summary>
            Key derivation function used on the shared secret value (CKD)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECMQV_DERIVE_PARAMS.SharedDataLen">
            <summary>
            The length in bytes of the shared info
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECMQV_DERIVE_PARAMS.SharedData">
            <summary>
            Some data shared between the two parties
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECMQV_DERIVE_PARAMS.PublicDataLen">
            <summary>
            The length in bytes of the other party's first EC public key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECMQV_DERIVE_PARAMS.PublicData">
            <summary>
            Pointer to other party's first EC public key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECMQV_DERIVE_PARAMS.PrivateDataLen">
            <summary>
            The length in bytes of the second EC private key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECMQV_DERIVE_PARAMS.PrivateData">
            <summary>
            Key handle for second EC private key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECMQV_DERIVE_PARAMS.PublicDataLen2">
            <summary>
            The length in bytes of the other party's second EC public key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECMQV_DERIVE_PARAMS.PublicData2">
            <summary>
            Pointer to other party's second EC public key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_ECMQV_DERIVE_PARAMS.PublicKey">
            <summary>
            Handle to the first party's ephemeral public key
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_EXTRACT_PARAMS">
            <summary>
            Provides the parameter to the CKM_EXTRACT_KEY_FROM_KEY mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_EXTRACT_PARAMS.Bit">
            <summary>
            Specifies which bit of the base key should be used as the first bit of the derived key
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KEA_DERIVE_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_KEA_DERIVE mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KEA_DERIVE_PARAMS.IsSender">
            <summary>
            Option for generating the key (called a TEK). True if the sender (originator) generates the TEK, false if the recipient is regenerating the TEK.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KEA_DERIVE_PARAMS.RandomLen">
            <summary>
            Size of random Ra and Rb, in bytes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KEA_DERIVE_PARAMS.RandomA">
            <summary>
            Pointer to Ra data
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KEA_DERIVE_PARAMS.RandomB">
            <summary>
            Pointer to Rb data
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KEA_DERIVE_PARAMS.PublicDataLen">
            <summary>
            Other party's KEA public key size
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KEA_DERIVE_PARAMS.PublicData">
            <summary>
            Pointer to other party's KEA public key value
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KEY_DERIVATION_STRING_DATA">
            <summary>
            Provides the parameters for the CKM_CONCATENATE_BASE_AND_DATA, CKM_CONCATENATE_DATA_AND_BASE and CKM_XOR_BASE_AND_DATA mechanisms
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KEY_DERIVATION_STRING_DATA.Data">
            <summary>
            Pointer to the byte string
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KEY_DERIVATION_STRING_DATA.Len">
            <summary>
            Length of the byte string
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KEY_WRAP_SET_OAEP_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_KEY_WRAP_SET_OAEP mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KEY_WRAP_SET_OAEP_PARAMS.BC">
            <summary>
            Block contents byte
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KEY_WRAP_SET_OAEP_PARAMS.X">
            <summary>
            Concatenation of hash of plaintext data (if present) and extra data (if present)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KEY_WRAP_SET_OAEP_PARAMS.XLen">
            <summary>
            Length in bytes of concatenation of hash of plaintext data (if present) and extra data (if present) or 0 if neither is present
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KIP_PARAMS">
            <summary>
            Structure that provides the parameters to CKM_KIP_DERIVE, CKM_KIP_WRAP and CKM_KIP_MAC mechanisms
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KIP_PARAMS.Mechanism">
            <summary>
            Pointer to the underlying cryptographic mechanism (CKM)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KIP_PARAMS.Key">
            <summary>
            Handle to a key that will contribute to the entropy of the derived key (CKM_KIP_DERIVE) or will be used in the MAC operation (CKM_KIP_MAC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KIP_PARAMS.Seed">
            <summary>
            Pointer to an input seed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_KIP_PARAMS.SeedLen">
            <summary>
            Length in bytes of the input seed
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_MAC_GENERAL_PARAMS">
            <summary>
            Structure that provides the parameters to the general-length MACing mechanisms (DES, DES3, CAST, CAST3, CAST128 (CAST5), IDEA, CDMF and AES), the general length HMACing mechanisms (MD2, MD5, SHA-1, SHA-256, SHA-384, SHA-512, RIPEMD-128 and RIPEMD-160) and the two SSL 3.0 MACing mechanisms (MD5 and SHA-1)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_MAC_GENERAL_PARAMS.MacLength">
            <summary>
            Length of the MAC produced, in bytes
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_OTP_PARAM">
            <summary>
            Structure that includes the type, value and length of an OTP parameter
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_OTP_PARAM.Type">
            <summary>
            Parameter type
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_OTP_PARAM.Value">
            <summary>
            Pointer to the value of the parameter
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_OTP_PARAM.ValueLen">
            <summary>
            Length in bytes of the value
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_OTP_PARAMS">
            <summary>
            Structure that is used to provide parameters for OTP mechanisms in a generic fashion
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_OTP_PARAMS.Params">
            <summary>
            Pointer to an array of OTP parameters (CK_OTP_PARAM structures)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_OTP_PARAMS.Count">
            <summary>
            The number of parameters in the array
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_OTP_SIGNATURE_INFO">
            <summary>
            Structure that is returned by all OTP mechanisms in successful calls to C_Sign (C_SignFinal)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_OTP_SIGNATURE_INFO.Params">
            <summary>
            Pointer to an array of OTP parameter values (CK_OTP_PARAM structures)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_OTP_SIGNATURE_INFO.Count">
            <summary>
            The number of parameters in the array
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_PBE_PARAMS">
            <summary>
            Structure which provides all of the necessary information required by the CKM_PBE mechanisms and the CKM_PBA_SHA1_WITH_SHA1_HMAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_PBE_PARAMS.InitVector">
            <summary>
            Pointer to the location that receives the 8-byte initialization vector (IV), if an IV is required
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_PBE_PARAMS.Password">
            <summary>
            Points to the password to be used in the PBE key generation
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_PBE_PARAMS.PasswordLen">
            <summary>
            Length in bytes of the password information
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_PBE_PARAMS.Salt">
            <summary>
            Points to the salt to be used in the PBE key generation
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_PBE_PARAMS.SaltLen">
            <summary>
            Length in bytes of the salt information
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_PBE_PARAMS.Iteration">
            <summary>
            Number of iterations required for the generation
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_PKCS5_PBKD2_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_PKCS5_PBKD2 mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_PKCS5_PBKD2_PARAMS.SaltSource">
            <summary>
            Source of the salt value (CKZ)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_PKCS5_PBKD2_PARAMS.SaltSourceData">
            <summary>
            Data used as the input for the salt source
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_PKCS5_PBKD2_PARAMS.SaltSourceDataLen">
            <summary>
            Length of the salt source input
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_PKCS5_PBKD2_PARAMS.Iterations">
            <summary>
            Number of iterations to perform when generating each block of random data
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_PKCS5_PBKD2_PARAMS.Prf">
            <summary>
            Pseudo-random function to used to generate the key (CKP)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_PKCS5_PBKD2_PARAMS.PrfData">
            <summary>
            Data used as the input for PRF in addition to the salt value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_PKCS5_PBKD2_PARAMS.PrfDataLen">
            <summary>
            Length of the input data for the PRF
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_PKCS5_PBKD2_PARAMS.Password">
            <summary>
            Points to the password to be used in the PBE key generation
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_PKCS5_PBKD2_PARAMS.PasswordLen">
            <summary>
            Length in bytes of the password information
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC2_CBC_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_RC2_CBC and CKM_RC2_CBC_PAD mechanisms
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC2_CBC_PARAMS.EffectiveBits">
            <summary>
            The effective number of bits in the RC2 search space
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC2_CBC_PARAMS.Iv">
            <summary>
            The initialization vector (IV) for cipher block chaining mode
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC2_MAC_GENERAL_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_RC2_MAC_GENERAL mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC2_MAC_GENERAL_PARAMS.EffectiveBits">
            <summary>
            The effective number of bits in the RC2 search space
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC2_MAC_GENERAL_PARAMS.MacLength">
            <summary>
            Length of the MAC produced, in bytes
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC2_PARAMS">
            <summary>
            Provides the parameters to the CKM_RC2_ECB and CKM_RC2_MAC mechanisms
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC2_PARAMS.EffectiveBits">
            <summary>
            Effective number of bits in the RC2 search space
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC5_CBC_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_RC5_CBC and CKM_RC5_CBC_PAD mechanisms
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC5_CBC_PARAMS.Wordsize">
            <summary>
            Wordsize of RC5 cipher in bytes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC5_CBC_PARAMS.Rounds">
            <summary>
            Number of rounds of RC5 encipherment
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC5_CBC_PARAMS.Iv">
            <summary>
            Pointer to initialization vector (IV) for CBC encryption
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC5_CBC_PARAMS.IvLen">
            <summary>
            Length of initialization vector (must be same as blocksize)
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC5_MAC_GENERAL_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_RC5_MAC_GENERAL mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC5_MAC_GENERAL_PARAMS.Wordsize">
            <summary>
            Wordsize of RC5 cipher in bytes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC5_MAC_GENERAL_PARAMS.Rounds">
            <summary>
            Number of rounds of RC5 encipherment
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC5_MAC_GENERAL_PARAMS.MacLength">
            <summary>
            Length of the MAC produced, in bytes
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC5_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_RC5_ECB and CKM_RC5_MAC mechanisms
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC5_PARAMS.Wordsize">
            <summary>
            Wordsize of RC5 cipher in bytes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RC5_PARAMS.Rounds">
            <summary>
            Number of rounds of RC5 encipherment
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RSA_PKCS_OAEP_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_RSA_PKCS_OAEP mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RSA_PKCS_OAEP_PARAMS.HashAlg">
            <summary>
            Mechanism ID of the message digest algorithm used to calculate the digest of the encoding parameter (CKM)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RSA_PKCS_OAEP_PARAMS.Mgf">
            <summary>
            Mask generation function to use on the encoded block (CKG)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RSA_PKCS_OAEP_PARAMS.Source">
            <summary>
            Source of the encoding parameter (CKZ)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RSA_PKCS_OAEP_PARAMS.SourceData">
            <summary>
            Data used as the input for the encoding parameter source
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RSA_PKCS_OAEP_PARAMS.SourceDataLen">
            <summary>
            Length of the encoding parameter source input
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RSA_PKCS_PSS_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_RSA_PKCS_PSS mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RSA_PKCS_PSS_PARAMS.HashAlg">
            <summary>
            Hash algorithm used in the PSS encoding (CKM)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RSA_PKCS_PSS_PARAMS.Mgf">
            <summary>
            Mask generation function to use on the encoded block (CKG)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_RSA_PKCS_PSS_PARAMS.Len">
            <summary>
            Length, in bytes, of the salt value used in the PSS encoding
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_PRIVATE_WRAP_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_SKIPJACK_PRIVATE_WRAP mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_PRIVATE_WRAP_PARAMS.PasswordLen">
            <summary>
            Length of the password
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_PRIVATE_WRAP_PARAMS.Password">
            <summary>
            Pointer to the buffer which contains the user-supplied password
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_PRIVATE_WRAP_PARAMS.PublicDataLen">
            <summary>
            Other party's key exchange public key size
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_PRIVATE_WRAP_PARAMS.PublicData">
            <summary>
            Pointer to other party's key exchange public key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_PRIVATE_WRAP_PARAMS.PAndGLen">
            <summary>
            Length of prime and base values
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_PRIVATE_WRAP_PARAMS.QLen">
            <summary>
            Length of subprime value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_PRIVATE_WRAP_PARAMS.RandomLen">
            <summary>
            Size of random Ra, in bytes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_PRIVATE_WRAP_PARAMS.RandomA">
            <summary>
            Pointer to Ra data
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_PRIVATE_WRAP_PARAMS.PrimeP">
            <summary>
            Pointer to Prime, p, value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_PRIVATE_WRAP_PARAMS.BaseG">
            <summary>
            Pointer to Base, g, value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_PRIVATE_WRAP_PARAMS.SubprimeQ">
            <summary>
            Pointer to Subprime, q, value
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_RELAYX_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_SKIPJACK_RELAYX mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_RELAYX_PARAMS.OldWrappedXLen">
            <summary>
            Length of old wrapped key in bytes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_RELAYX_PARAMS.OldWrappedX">
            <summary>
            Pointer to old wrapper key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_RELAYX_PARAMS.OldPasswordLen">
            <summary>
            Length of the old password
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_RELAYX_PARAMS.OldPassword">
            <summary>
            Pointer to the buffer which contains the old user-supplied password
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_RELAYX_PARAMS.OldPublicDataLen">
            <summary>
            Old key exchange public key size
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_RELAYX_PARAMS.OldPublicData">
            <summary>
            Pointer to old key exchange public key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_RELAYX_PARAMS.OldRandomLen">
            <summary>
            Size of old random Ra in bytes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_RELAYX_PARAMS.OldRandomA">
            <summary>
            Pointer to old Ra data
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_RELAYX_PARAMS.NewPasswordLen">
            <summary>
            Length of the new password
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_RELAYX_PARAMS.NewPassword">
            <summary>
            Pointer to the buffer which contains the new usersupplied password
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_RELAYX_PARAMS.NewPublicDataLen">
            <summary>
            New key exchange public key size
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_RELAYX_PARAMS.NewPublicData">
            <summary>
            Pointer to new key exchange public key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_RELAYX_PARAMS.NewRandomLen">
            <summary>
            Size of new random Ra in bytes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SKIPJACK_RELAYX_PARAMS.NewRandomA">
            <summary>
            Pointer to new Ra data
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_KEY_MAT_OUT">
            <summary>
            Structure that contains the resulting key handles and initialization vectors after performing a C_DeriveKey function with the CKM_SSL3_KEY_AND_MAC_DERIVE mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_KEY_MAT_OUT.ClientMacSecret">
            <summary>
            Key handle for the resulting Client MAC Secret key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_KEY_MAT_OUT.ServerMacSecret">
            <summary>
            Key handle for the resulting Server MAC Secret key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_KEY_MAT_OUT.ClientKey">
            <summary>
            Key handle for the resulting Client Secret key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_KEY_MAT_OUT.ServerKey">
            <summary>
            Key handle for the resulting Server Secret key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_KEY_MAT_OUT.IVClient">
            <summary>
            Pointer to a location which receives the initialization vector (IV) created for the client (if any)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_KEY_MAT_OUT.IVServer">
            <summary>
            Pointer to a location which receives the initialization vector (IV) created for the server (if any)
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_KEY_MAT_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_SSL3_KEY_AND_MAC_DERIVE mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_KEY_MAT_PARAMS.MacSizeInBits">
            <summary>
            The length (in bits) of the MACing keys agreed upon during the protocol handshake phase
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_KEY_MAT_PARAMS.KeySizeInBits">
            <summary>
            The length (in bits) of the secret keys agreed upon during the protocol handshake phase
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_KEY_MAT_PARAMS.IVSizeInBits">
            <summary>
            The length (in bits) of the IV agreed upon during the protocol handshake phase or if no IV is required, the length should be set to 0
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_KEY_MAT_PARAMS.IsExport">
            <summary>
            Flag which indicates whether the keys have to be derived for an export version of the protocol
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_KEY_MAT_PARAMS.RandomInfo">
            <summary>
            Client's and server's random data information
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_KEY_MAT_PARAMS.ReturnedKeyMaterial">
            <summary>
            Points to a CK_SSL3_KEY_MAT_OUT structure which receives the handles for the keys generated and the IVs
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_MASTER_KEY_DERIVE_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_SSL3_MASTER_KEY_DERIVE and CKM_SSL3_MASTER_KEY_DERIVE_DH mechanisms
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_MASTER_KEY_DERIVE_PARAMS.RandomInfo">
            <summary>
            Client's and server's random data information
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_MASTER_KEY_DERIVE_PARAMS.Version">
            <summary>
            Pointer to a CK_VERSION structure which receives the SSL protocol version information
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_RANDOM_DATA">
            <summary>
            Structure which provides information about the random data of a client and a server in an SSL context
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_RANDOM_DATA.ClientRandom">
            <summary>
            Pointer to the client's random data
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_RANDOM_DATA.ClientRandomLen">
            <summary>
            Length in bytes of the client's random data
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_RANDOM_DATA.ServerRandom">
            <summary>
            Pointer to the server's random data
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_SSL3_RANDOM_DATA.ServerRandomLen">
            <summary>
            Length in bytes of the server's random data
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_TLS_PRF_PARAMS">
            <summary>
            Structure, which provides the parameters to the CKM_TLS_PRF mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_TLS_PRF_PARAMS.Seed">
            <summary>
            Pointer to the input seed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_TLS_PRF_PARAMS.SeedLen">
            <summary>
            Length in bytes of the input seed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_TLS_PRF_PARAMS.Label">
            <summary>
            Pointer to the identifying label
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_TLS_PRF_PARAMS.LabelLen">
            <summary>
            Length in bytes of the identifying label
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_TLS_PRF_PARAMS.Output">
            <summary>
            Pointer receiving the output of the operation
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_TLS_PRF_PARAMS.OutputLen">
            <summary>
            Pointer to the length in bytes (uint) that the output to be created shall have, has to hold the desired length as input and will receive the calculated length as output
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_KEY_MAT_OUT">
            <summary>
            Structure that contains the resulting key handles and initialization vectors after performing a C_DeriveKey function with the CKM_WTLS_SEVER_KEY_AND_MAC_DERIVE or with the CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_KEY_MAT_OUT.MacSecret">
            <summary>
            Key handle for the resulting MAC secret key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_KEY_MAT_OUT.Key">
            <summary>
            Key handle for the resulting secret key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_KEY_MAT_OUT.IV">
            <summary>
            Pointer to a location which receives the initialization vector (IV) created (if any)
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_KEY_MAT_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE and the CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE mechanisms
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_KEY_MAT_PARAMS.DigestMechanism">
            <summary>
            The digest mechanism to be used (CKM)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_KEY_MAT_PARAMS.MacSizeInBits">
            <summary>
            The length (in bits) of the MACing key agreed upon during the protocol handshake phase
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_KEY_MAT_PARAMS.KeySizeInBits">
            <summary>
            The length (in bits) of the secret key agreed upon during the handshake phase
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_KEY_MAT_PARAMS.IVSizeInBits">
            <summary>
            The length (in bits) of the IV agreed upon during the handshake phase or if no IV is required, the length should be set to 0
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_KEY_MAT_PARAMS.SequenceNumber">
            <summary>
            The current sequence number used for records sent by the client and server respectively
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_KEY_MAT_PARAMS.IsExport">
            <summary>
            Flag which indicates whether the keys have to be derived for an export version of the protocol
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_KEY_MAT_PARAMS.RandomInfo">
            <summary>
            Client's and server's random data information
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_KEY_MAT_PARAMS.ReturnedKeyMaterial">
            <summary>
            Points to a CK_WTLS_KEY_MAT_OUT structure which receives the handles for the keys generated and the IV
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_MASTER_KEY_DERIVE_PARAMS">
            <summary>
            Structure, which provides the parameters to the CKM_WTLS_MASTER_KEY_DERIVE mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_MASTER_KEY_DERIVE_PARAMS.DigestMechanism">
            <summary>
            Digest mechanism to be used (CKM)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_MASTER_KEY_DERIVE_PARAMS.RandomInfo">
            <summary>
            Client's and server's random data information
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_MASTER_KEY_DERIVE_PARAMS.Version">
            <summary>
            Pointer to single byte which receives the WTLS protocol version information
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_PRF_PARAMS">
            <summary>
            Structure, which provides the parameters to the CKM_WTLS_PRF mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_PRF_PARAMS.DigestMechanism">
            <summary>
            Digest mechanism to be used (CKM)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_PRF_PARAMS.Seed">
            <summary>
            Pointer to the input seed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_PRF_PARAMS.SeedLen">
            <summary>
            Length in bytes of the input seed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_PRF_PARAMS.Label">
            <summary>
            Pointer to the identifying label
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_PRF_PARAMS.LabelLen">
            <summary>
            Length in bytes of the identifying label
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_PRF_PARAMS.Output">
            <summary>
            Pointer receiving the output of the operation
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_PRF_PARAMS.OutputLen">
            <summary>
            Pointer to the length in bytes (uint) that the output to be created shall have, has to hold the desired length as input and will receive the calculated length as output
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_RANDOM_DATA">
            <summary>
            Structure, which provides information about the random data of a client and a server in a WTLS context
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_RANDOM_DATA.ClientRandom">
            <summary>
            Pointer to the client's random data
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_RANDOM_DATA.ClientRandomLen">
            <summary>
            Length in bytes of the client's random data
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_RANDOM_DATA.ServerRandom">
            <summary>
            Pointer to the server's random data
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_WTLS_RANDOM_DATA.ServerRandomLen">
            <summary>
            Length in bytes of the server's random data
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_DH1_DERIVE_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_X9_42_DH_DERIVE key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_DH1_DERIVE_PARAMS.Kdf">
            <summary>
            Key derivation function used on the shared secret value (CKD)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_DH1_DERIVE_PARAMS.OtherInfoLen">
            <summary>
            The length in bytes of the other info
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_DH1_DERIVE_PARAMS.OtherInfo">
            <summary>
            Some data shared between the two parties
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_DH1_DERIVE_PARAMS.PublicDataLen">
            <summary>
            The length in bytes of the other party's X9.42 Diffie-Hellman public key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_DH1_DERIVE_PARAMS.PublicData">
            <summary>
            Pointer to other party's X9.42 Diffie-Hellman public key value
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_DH2_DERIVE_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_X9_42_DH_HYBRID_DERIVE and CKM_X9_42_MQV_DERIVE key derivation mechanisms
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_DH2_DERIVE_PARAMS.Kdf">
            <summary>
            Key derivation function used on the shared secret value (CKD)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_DH2_DERIVE_PARAMS.OtherInfoLen">
            <summary>
            The length in bytes of the other info
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_DH2_DERIVE_PARAMS.OtherInfo">
            <summary>
            Some data shared between the two parties
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_DH2_DERIVE_PARAMS.PublicDataLen">
            <summary>
            The length in bytes of the other party's first X9.42 Diffie-Hellman public key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_DH2_DERIVE_PARAMS.PublicData">
            <summary>
            Pointer to other party's first X9.42 Diffie-Hellman public key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_DH2_DERIVE_PARAMS.PrivateDataLen">
            <summary>
            The length in bytes of the second X9.42 Diffie-Hellman private key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_DH2_DERIVE_PARAMS.PrivateData">
            <summary>
            Key handle for second X9.42 Diffie-Hellman private key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_DH2_DERIVE_PARAMS.PublicDataLen2">
            <summary>
            The length in bytes of the other party's second X9.42 Diffie-Hellman public key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_DH2_DERIVE_PARAMS.PublicData2">
            <summary>
            Pointer to other party's second X9.42 Diffie-Hellman public key value
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_MQV_DERIVE_PARAMS">
            <summary>
            Structure that provides the parameters to the CKM_X9_42_MQV_DERIVE key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_MQV_DERIVE_PARAMS.Kdf">
            <summary>
            Key derivation function used on the shared secret value (CKD)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_MQV_DERIVE_PARAMS.OtherInfoLen">
            <summary>
            The length in bytes of the other info
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_MQV_DERIVE_PARAMS.OtherInfo">
            <summary>
            Some data shared between the two parties
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_MQV_DERIVE_PARAMS.PublicDataLen">
            <summary>
            The length in bytes of the other party's first X9.42 Diffie-Hellman public key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_MQV_DERIVE_PARAMS.PublicData">
            <summary>
            Pointer to other party's first X9.42 Diffie-Hellman public key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_MQV_DERIVE_PARAMS.PrivateDataLen">
            <summary>
            The length in bytes of the second X9.42 Diffie-Hellman private key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_MQV_DERIVE_PARAMS.PrivateData">
            <summary>
            Key handle for second X9.42 Diffie-Hellman private key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_MQV_DERIVE_PARAMS.PublicDataLen2">
            <summary>
            The length in bytes of the other party's second X9.42 Diffie-Hellman public key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_MQV_DERIVE_PARAMS.PublicData2">
            <summary>
            Pointer to other party's second X9.42 Diffie-Hellman public key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.MechanismParams.CK_X9_42_MQV_DERIVE_PARAMS.PublicKey">
            <summary>
            Handle to the first party's ephemeral public key
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE">
            <summary>
            Defines the type, value, and length of an attribute
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE.type">
            <summary>
            The attribute type
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE.value">
            <summary>
            Pointer to the value of the attribute
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE.valueLen">
            <summary>
            Length in bytes of the value
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.CK_C_INITIALIZE_ARGS">
            <summary>
            Optional arguments for the C_Initialize function
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_C_INITIALIZE_ARGS.CreateMutex">
            <summary>
            Pointer to a function to use for creating mutex objects (not supported by Pkcs11Interop)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_C_INITIALIZE_ARGS.DestroyMutex">
            <summary>
            Pointer to a function to use for destroying mutex objects (not supported by Pkcs11Interop)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_C_INITIALIZE_ARGS.LockMutex">
            <summary>
            Pointer to a function to use for locking mutex objects (not supported by Pkcs11Interop)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_C_INITIALIZE_ARGS.UnlockMutex">
            <summary>
            Pointer to a function to use for unlocking mutex objects (not supported by Pkcs11Interop)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_C_INITIALIZE_ARGS.Flags">
            <summary>
            Bit flags specifying options
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_C_INITIALIZE_ARGS.Reserved">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST">
            <summary>
            Structure which contains a Cryptoki version and a function pointer to each function in the Cryptoki API
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.version">
            <summary>
            Cryptoki version
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_Initialize">
            <summary>
            Pointer to C_Initialize
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_Finalize">
            <summary>
            Pointer to C_Finalize
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_GetInfo">
            <summary>
            Pointer to C_GetInfo
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_GetFunctionList">
            <summary>
            Pointer to C_GetFunctionList
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_GetSlotList">
            <summary>
            Pointer to C_GetSlotList
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_GetSlotInfo">
            <summary>
            Pointer to C_GetSlotInfo
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_GetTokenInfo">
            <summary>
            Pointer to C_GetTokenInfo
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_GetMechanismList">
            <summary>
            Pointer to C_GetMechanismList
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_GetMechanismInfo">
            <summary>
            Pointer to C_GetMechanismInfo
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_InitToken">
            <summary>
            Pointer to C_InitToken
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_InitPIN">
            <summary>
            Pointer to C_InitPIN
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_SetPIN">
            <summary>
            Pointer to C_SetPIN
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_OpenSession">
            <summary>
            Pointer to C_OpenSession
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_CloseSession">
            <summary>
            Pointer to C_CloseSession
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_CloseAllSessions">
            <summary>
            Pointer to C_CloseAllSessions
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_GetSessionInfo">
            <summary>
            Pointer to C_GetSessionInfo
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_GetOperationState">
            <summary>
            Pointer to C_GetOperationState
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_SetOperationState">
            <summary>
            Pointer to C_SetOperationState
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_Login">
            <summary>
            Pointer to C_Login
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_Logout">
            <summary>
            Pointer to C_Logout
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_CreateObject">
            <summary>
            Pointer to C_CreateObject
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_CopyObject">
            <summary>
            Pointer to C_CopyObject
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_DestroyObject">
            <summary>
            Pointer to C_DestroyObject
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_GetObjectSize">
            <summary>
            Pointer to C_GetObjectSize
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_GetAttributeValue">
            <summary>
            Pointer to C_GetAttributeValue
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_SetAttributeValue">
            <summary>
            Pointer to C_SetAttributeValue
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_FindObjectsInit">
            <summary>
            Pointer to C_FindObjectsInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_FindObjects">
            <summary>
            Pointer to C_FindObjects
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_FindObjectsFinal">
            <summary>
            Pointer to C_FindObjectsFinal
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_EncryptInit">
            <summary>
            Pointer to C_EncryptInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_Encrypt">
            <summary>
            Pointer to C_Encrypt
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_EncryptUpdate">
            <summary>
            Pointer to C_EncryptUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_EncryptFinal">
            <summary>
            Pointer to C_EncryptFinal
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_DecryptInit">
            <summary>
            Pointer to C_DecryptInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_Decrypt">
            <summary>
            Pointer to C_Decrypt
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_DecryptUpdate">
            <summary>
            Pointer to C_DecryptUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_DecryptFinal">
            <summary>
            Pointer to C_DecryptFinal
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_DigestInit">
            <summary>
            Pointer to C_DigestInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_Digest">
            <summary>
            Pointer to C_Digest
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_DigestUpdate">
            <summary>
            Pointer to C_DigestUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_DigestKey">
            <summary>
            Pointer to C_DigestKey
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_DigestFinal">
            <summary>
            Pointer to C_DigestFinal
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_SignInit">
            <summary>
            Pointer to C_SignInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_Sign">
            <summary>
            Pointer to C_Sign
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_SignUpdate">
            <summary>
            Pointer to C_SignUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_SignFinal">
            <summary>
            Pointer to C_SignFinal
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_SignRecoverInit">
            <summary>
            Pointer to C_SignRecoverInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_SignRecover">
            <summary>
            Pointer to C_SignRecover
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_VerifyInit">
            <summary>
            Pointer to C_VerifyInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_Verify">
            <summary>
            Pointer to C_Verify
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_VerifyUpdate">
            <summary>
            Pointer to C_VerifyUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_VerifyFinal">
            <summary>
            Pointer to C_VerifyFinal
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_VerifyRecoverInit">
            <summary>
            Pointer to C_VerifyRecoverInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_VerifyRecover">
            <summary>
            Pointer to C_VerifyRecover
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_DigestEncryptUpdate">
            <summary>
            Pointer to C_DigestEncryptUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_DecryptDigestUpdate">
            <summary>
            Pointer to C_DecryptDigestUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_SignEncryptUpdate">
            <summary>
            Pointer to C_SignEncryptUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_DecryptVerifyUpdate">
            <summary>
            Pointer to C_DecryptVerifyUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_GenerateKey">
            <summary>
            Pointer to C_GenerateKey
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_GenerateKeyPair">
            <summary>
            Pointer to C_GenerateKeyPair
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_WrapKey">
            <summary>
            Pointer to C_WrapKey
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_UnwrapKey">
            <summary>
            Pointer to C_UnwrapKey
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_DeriveKey">
            <summary>
            Pointer to C_DeriveKey
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_SeedRandom">
            <summary>
            Pointer to C_SeedRandom
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_GenerateRandom">
            <summary>
            Pointer to C_GenerateRandom
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_GetFunctionStatus">
            <summary>
            Pointer to C_GetFunctionStatus
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_CancelFunction">
            <summary>
            Pointer to C_CancelFunction
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST.C_WaitForSlotEvent">
            <summary>
            Pointer to C_WaitForSlotEvent
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.CK_INFO">
            <summary>
            Provides general information about Cryptoki
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_INFO.CryptokiVersion">
            <summary>
            Cryptoki interface version number, for compatibility with future revisions of this interface.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_INFO.ManufacturerId">
            <summary>
            ID of the Cryptoki library manufacturer. Must be padded with the blank character (‘ ‘). Should not be null-terminated.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_INFO.Flags">
            <summary>
            Bit flags reserved for future versions. Must be zero for this version
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_INFO.LibraryDescription">
            <summary>
            Character-string description of the library. Must be padded with the blank character (‘ ‘). Should not be null-terminated.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_INFO.LibraryVersion">
            <summary>
            Cryptoki library version number
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM">
            <summary>
            Specifies a particular mechanism and any parameters it requires
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM.Mechanism">
            <summary>
            The type of mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM.Parameter">
            <summary>
            Pointer to the parameter if required by the mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM.ParameterLen">
            <summary>
            Length of the parameter in bytes
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM_INFO">
            <summary>
            Provides information about a particular mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM_INFO.MinKeySize">
            <summary>
            The minimum size of the key for the mechanism (whether this is measured in bits or in bytes is mechanism-dependent)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM_INFO.MaxKeySize">
            <summary>
            The maximum size of the key for the mechanism (whether this is measured in bits or in bytes is mechanism-dependent)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM_INFO.Flags">
            <summary>
            Bit flags specifying mechanism capabilities
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.CK_SESSION_INFO">
            <summary>
            Information about a session
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_SESSION_INFO.SlotId">
            <summary>
            ID of the slot that interfaces with the token
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_SESSION_INFO.State">
            <summary>
            The state of the session
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_SESSION_INFO.Flags">
            <summary>
            Bit flags that define the type of session
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_SESSION_INFO.DeviceError">
            <summary>
            An error code defined by the cryptographic device. Used for errors not covered by Cryptoki.
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.CK_SLOT_INFO">
            <summary>
            Provides information about a slot
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_SLOT_INFO.SlotDescription">
            <summary>
            Character-string description of the slot. Must be padded with the blank character (‘ ‘). Should not be null-terminated.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_SLOT_INFO.ManufacturerId">
            <summary>
            ID of the slot manufacturer. Must be padded with the blank character (‘ ‘). Should not be null-terminated.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_SLOT_INFO.Flags">
            <summary>
            Bits flags that provide capabilities of the slot.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_SLOT_INFO.HardwareVersion">
            <summary>
            Version number of the slot's hardware
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_SLOT_INFO.FirmwareVersion">
            <summary>
            Version number of the slot's firmware
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO">
            <summary>
            Provides information about a token
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.Label">
            <summary>
            Application-defined label, assigned during token initialization. Must be padded with the blank character (‘ ‘). Should not be null-terminated.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.ManufacturerId">
            <summary>
            ID of the device manufacturer. Must be padded with the blank character (‘ ‘). Should not be nullterminated.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.Model">
            <summary>
            Model of the device. Must be padded with the blank character (‘ ‘). Should not be null-terminated.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.SerialNumber">
            <summary>
            Character-string serial number of the device. Must be padded with the blank character (‘ ‘). Should not be null-terminated.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.Flags">
            <summary>
            Bit flags indicating capabilities and status of the device
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.MaxSessionCount">
            <summary>
            Maximum number of sessions that can be opened with the token at one time by a single application
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.SessionCount">
            <summary>
            Number of sessions that this application currently has open with the token
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.MaxRwSessionCount">
            <summary>
            Maximum number of read/write sessions that can be opened with the token at one time by a single application
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.RwSessionCount">
            <summary>
            Number of read/write sessions that this application currently has open with the token
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.MaxPinLen">
            <summary>
            Maximum length in bytes of the PIN
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.MinPinLen">
            <summary>
            Minimum length in bytes of the PIN
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.TotalPublicMemory">
            <summary>
            The total amount of memory on the token in bytes in which public objects may be stored
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.FreePublicMemory">
            <summary>
            The amount of free (unused) memory on the token in bytes for public objects
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.TotalPrivateMemory">
            <summary>
            The total amount of memory on the token in bytes in which private objects may be stored
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.FreePrivateMemory">
            <summary>
            The amount of free (unused) memory on the token in bytes for private objects
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.HardwareVersion">
            <summary>
            Version number of hardware
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.FirmwareVersion">
            <summary>
            Version number of firmware
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO.UtcTime">
            <summary>
            Current time as a character-string of length 16, represented in the format YYYYMMDDhhmmssxx (4 characters for the year; 2 characters each for the month, the day, the hour, the minute, and the second; and 2 additional reserved ‘0' characters). The value of this field only makes sense for tokens equipped with a clock, as indicated in the token information flags.
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.CK_VERSION">
            <summary>
            Describes the version
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_VERSION.Major">
            <summary>
            Major version number (the integer portion of the version)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_VERSION.Minor">
            <summary>
            Minor version number (the hundredths portion of the version)
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.CkaUtils">
            <summary>
            Utility class that helps to manage CK_ATTRIBUTE structure
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(Net.Pkcs11Interop.Common.CKA)">
            <summary>
            Creates attribute of given type with no value
            </summary>
            <param name="type">Attribute type</param>
            <returns>Attribute of given type structure with no value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(System.UInt32)">
            <summary>
            Creates attribute of given type with no value
            </summary>
            <param name="type">Attribute type</param>
            <returns>Attribute of given type structure with no value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(Net.Pkcs11Interop.Common.CKA,System.UInt32)">
            <summary>
            Creates attribute of given type with uint value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
            <returns>Attribute of given type with uint value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(System.UInt32,System.UInt32)">
            <summary>
            Creates attribute of given type with uint value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
            <returns>Attribute of given type with uint value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.ConvertValue(Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE@,System.UInt32@)">
            <summary>
            Reads value of attribute and returns it as uint
            </summary>
            <param name="attribute">Attribute whose value should be read</param>
            <param name="value">Location that receives attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(Net.Pkcs11Interop.Common.CKA,System.Boolean)">
            <summary>
            Creates attribute of given type with bool value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
            <returns>Attribute of given type with bool value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(System.UInt32,System.Boolean)">
            <summary>
            Creates attribute of given type with bool value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
            <returns>Attribute of given type with bool value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.ConvertValue(Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE@,System.Boolean@)">
            <summary>
            Reads value of attribute and returns it as bool
            </summary>
            <param name="attribute">Attribute whose value should be read</param>
            <param name="value">Location that receives attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(Net.Pkcs11Interop.Common.CKA,System.String)">
            <summary>
            Creates attribute of given type with string value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
            <returns>Attribute of given type with string value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(System.UInt32,System.String)">
            <summary>
            Creates attribute of given type with string value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
            <returns>Attribute of given type with string value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.ConvertValue(Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE@,System.String@)">
            <summary>
            Reads value of attribute and returns it as string
            </summary>
            <param name="attribute">Attribute whose value should be read</param>
            <param name="value">Location that receives attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(Net.Pkcs11Interop.Common.CKA,System.Byte[])">
            <summary>
            Creates attribute of given type with byte array value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
            <returns>Attribute of given type with byte array value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(System.UInt32,System.Byte[])">
            <summary>
            Creates attribute of given type with byte array value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
            <returns>Attribute of given type with byte array value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.ConvertValue(Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE@,System.Byte[]@)">
            <summary>
            Reads value of attribute and returns it as byte array
            </summary>
            <param name="attribute">Attribute whose value should be read</param>
            <param name="value">Location that receives attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(Net.Pkcs11Interop.Common.CKA,System.DateTime)">
            <summary>
            Creates attribute of given type with DateTime (CK_DATE) value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
            <returns>Attribute of given type with DateTime value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(System.UInt32,System.DateTime)">
            <summary>
            Creates attribute of given type with DateTime (CK_DATE) value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
            <returns>Attribute of given type with DateTime value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.ConvertValue(Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE@,System.DateTime@)">
            <summary>
            Reads value of attribute and returns it as DateTime (CK_DATE)
            </summary>
            <param name="attribute">Attribute whose value should be read</param>
            <param name="value">Location that receives attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(Net.Pkcs11Interop.Common.CKA,Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE[])">
            <summary>
            Creates attribute of given type with attribute array value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
            <returns>Attribute of given type with attribute array value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE[])">
            <summary>
            Creates attribute of given type with attribute array value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
            <returns>Attribute of given type with attribute array value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.ConvertValue(Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE@,Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE[]@)">
            <summary>
            Reads value of attribute and returns it as attribute array
            </summary>
            <param name="attribute">Attribute whose value should be read</param>
            <param name="value">Location that receives attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(Net.Pkcs11Interop.Common.CKA,System.UInt32[])">
            <summary>
            Creates attribute of given type with uint array value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
            <returns>Attribute of given type with uint array value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(System.UInt32,System.UInt32[])">
            <summary>
            Creates attribute of given type with uint array value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
            <returns>Attribute of given type with uint array value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.ConvertValue(Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE@,System.UInt32[]@)">
            <summary>
            Reads value of attribute and returns it as uint array
            </summary>
            <param name="attribute">Attribute whose value should be read</param>
            <param name="value">Location that receives attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(Net.Pkcs11Interop.Common.CKA,Net.Pkcs11Interop.Common.CKM[])">
            <summary>
            Creates attribute of given type with mechanism array value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
            <returns>Attribute of given type with mechanism array value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.CreateAttribute(System.UInt32,Net.Pkcs11Interop.Common.CKM[])">
            <summary>
            Creates attribute of given type with mechanism array value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
            <returns>Attribute of given type with mechanism array value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.ConvertValue(Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE@,Net.Pkcs11Interop.Common.CKM[]@)">
            <summary>
            Reads value of attribute and returns it as mechanism array
            </summary>
            <param name="attribute">Attribute whose value should be read</param>
            <param name="value">Location that receives attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils._CreateAttribute(System.UInt32,System.Byte[])">
            <summary>
            Creates attribute of given type with value copied from managed byte array to the newly allocated unmanaged memory
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
            <returns>Attribute of given type with specified value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkaUtils.ConvertValue(Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE@)">
            <summary>
            Copies attribute value from unmanaged memory to managed byte array
            </summary>
            <param name="attribute">Attribute whose value should be read</param>
            <returns>Managed copy of attribute value</returns>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.CkmUtils">
            <summary>
            Utility class that helps to manage CK_MECHANISM structure
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkmUtils.CreateMechanism(Net.Pkcs11Interop.Common.CKM)">
            <summary>
            Creates mechanism of given type with no parameter
            </summary>
            <param name="mechanism">Mechanism type</param>
            <returns>Mechanism of given type with no parameter</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkmUtils.CreateMechanism(System.UInt32)">
            <summary>
            Creates mechanism of given type with no parameter
            </summary>
            <param name="mechanism">Mechanism type</param>
            <returns>Mechanism of given type with no parameter</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkmUtils.CreateMechanism(Net.Pkcs11Interop.Common.CKM,System.Byte[])">
            <summary>
            Creates mechanism of given type with byte array parameter
            </summary>
            <param name="mechanism">Mechanism type</param>
            <param name="parameter">Mechanism parameter</param>
            <returns>Mechanism of given type with byte array parameter</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkmUtils.CreateMechanism(System.UInt32,System.Byte[])">
            <summary>
            Creates mechanism of given type with byte array parameter
            </summary>
            <param name="mechanism">Mechanism type</param>
            <param name="parameter">Mechanism parameter</param>
            <returns>Mechanism of given type with byte array parameter</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkmUtils.CreateMechanism(Net.Pkcs11Interop.Common.CKM,System.Object)">
            <summary>
            Creates mechanism of given type with structure as parameter
            </summary>
            <param name="mechanism">Mechanism type</param>
            <param name="parameterStructure">Structure with mechanism parameters</param>
            <returns>Mechanism of given type with structure as parameter</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkmUtils.CreateMechanism(System.UInt32,System.Object)">
            <summary>
            Creates mechanism of given type with structure as parameter
            </summary>
            <param name="mechanism">Mechanism type</param>
            <param name="parameterStructure">Structure with mechanism parameters</param>
            <returns>Mechanism of given type with structure as parameter</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CkmUtils._CreateMechanism(System.UInt32,System.Byte[])">
            <summary>
            Creates mechanism of given type with parameter copied from managed byte array to the newly allocated unmanaged memory
            </summary>
            <param name="mechanism">Mechanism type</param>
            <param name="parameter">Mechanism parameter</param>
            <returns>Mechanism of given type with specified parameter</returns>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.NativeMethods">
            <summary>
            Imported native methods
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.NativeMethods.RTLD_LAZY">
            <summary>
            Lazy function call binding
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.NativeMethods.RTLD_NOW">
            <summary>
            Immediate function call binding
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.NativeMethods.LoadLibrary(System.String)">
            <summary>
            Loads the specified module into the address space of the calling process.
            </summary>
            <param name="lpFileName">The name of the module.</param>
            <returns>If the function succeeds, the return value is a handle to the module. If the function fails, the return value is NULL.</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.NativeMethods.FreeLibrary(System.IntPtr)">
            <summary>
            Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count.
            </summary>
            <param name="hModule">A handle to the loaded library module.</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.NativeMethods.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).
            </summary>
            <param name="hModule">A handle to the DLL module that contains the function or variable.</param>
            <param name="lpProcName">The function or variable name, or the function's ordinal value.</param>
            <returns>If the function succeeds, the return value is the address of the exported function or variable. If the function fails, the return value is NULL.</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.NativeMethods.dlerror">
            <summary>
            Human readable string describing the most recent error that occurred from dlopen(), dlsym() or dlclose() since the last call to dlerror().
            </summary>
            <returns>Human readable string describing the most recent error or NULL if no errors have occurred since initialization or since it was last called.</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.NativeMethods.dlopen(System.String,System.Int32)">
            <summary>
            Loads the dynamic library
            </summary>
            <param name="filename">Library filename.</param>
            <param name="flag">RTLD_LAZY for lazy function call binding or RTLD_NOW immediate function call binding.</param>
            <returns>Handle for the dynamic library if successful, IntPtr.Zero otherwise.</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.NativeMethods.dlclose(System.IntPtr)">
            <summary>
            Decrements the reference count on the dynamic library handle. If the reference count drops to zero and no other loaded libraries use symbols in it, then the dynamic library is unloaded.
            </summary>
            <param name="handle">Handle for the dynamic library.</param>
            <returns>Returns 0 on success, and nonzero on error.</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.NativeMethods.dlsym(System.IntPtr,System.String)">
            <summary>
            Returns the address where the symbol is loaded into memory.
            </summary>
            <param name="handle">Handle for the dynamic library.</param>
            <param name="symbol">Name of symbol that should be addressed.</param>
            <returns>Returns 0 on success, and nonzero on error.</returns>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.Pkcs11">
            <summary>
            Low level PKCS#11 wrapper
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.#ctor(System.String)">
            <summary>
            Loads PCKS#11 library
            </summary>
            <param name="libraryPath">Library name or path</param>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.#ctor(System.String,System.Boolean)">
            <summary>
            Loads PCKS#11 library
            </summary>
            <param name="libraryPath">Library name or path</param>
            <param name="useGetFunctionList">Flag indicating whether cryptoki function pointers should be acquired via C_GetFunctionList (true) or via platform native function (false)</param>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.Pkcs11._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.Pkcs11._libraryHandle">
            <summary>
            Handle to the PKCS#11 library
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.Pkcs11._functionList">
            <summary>
            Cryptoki function list
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.Release">
            <summary>
            Unloads PKCS#11 library. Called automaticaly when object is being disposed.
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_Initialize(Net.Pkcs11Interop.LowLevelAPI.CK_C_INITIALIZE_ARGS)">
            <summary>
            Initializes the Cryptoki library
            </summary>
            <param name="initArgs">CK_C_INITIALIZE_ARGS structure containing information on how the library should deal with multi-threaded access or null if an application will not be accessing Cryptoki through multiple threads simultaneously</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CANT_LOCK, CKR_CRYPTOKI_ALREADY_INITIALIZED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_NEED_TO_CREATE_THREADS, CKR_OK</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_Finalize(System.IntPtr)">
            <summary>
            Called to indicate that an application is finished with the Cryptoki library. It should be the last Cryptoki call made by an application.
            </summary>
            <param name="reserved">Reserved for future versions. For this version, it should be set to null.</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_GetInfo(Net.Pkcs11Interop.LowLevelAPI.CK_INFO@)">
            <summary>
            Returns general information about Cryptoki
            </summary>
            <param name="info">Structure that receives the information</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_GetFunctionList(Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST@)">
            <summary>
            Obtains a pointer to the Cryptoki library's list of function pointers
            </summary>
            <param name="functionList">Structure that receives function pointers for all the Cryptoki API routines in the library</param>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.GetFunctionList(Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST@)">
            <summary>
            Obtains function pointers for all the Cryptoki API routines in the library
            </summary>
            <param name="functionList">Structure that receives function pointers for all the Cryptoki API routines in the library</param>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_GetSlotList(System.Boolean,System.UInt32[],System.UInt32@)">
            <summary>
            Obtains a list of slots in the system
            </summary>
            <param name="tokenPresent">Indicates whether the list obtained includes only those slots with a token present (true) or all slots (false)</param>
            <param name="slotList">
            If set to null then the number of slots is returned in "count" parameter, without actually returning a list of slots.
            If not set to null then "count" parameter must contain the lenght of slotList array and slot list is returned in "slotList" parameter.
            </param>
            <param name="count">Location that receives the number of slots</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_GetSlotInfo(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_SLOT_INFO@)">
            <summary>
            Obtains information about a particular slot in the system
            </summary>
            <param name="slotId">The ID of the slot</param>
            <param name="info">Structure that receives the slot information</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_SLOT_ID_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_GetTokenInfo(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO@)">
            <summary>
            Obtains information about a particular token in the system
            </summary>
            <param name="slotId">The ID of the token's slot</param>
            <param name="info">Structure that receives the token information</param>
            <returns>CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_SLOT_ID_INVALID, CKR_TOKEN_NOT_PRESENT, CKR_TOKEN_NOT_RECOGNIZED, CKR_ARGUMENTS_BAD</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_GetMechanismList(System.UInt32,Net.Pkcs11Interop.Common.CKM[],System.UInt32@)">
            <summary>
            Obtains a list of mechanism types supported by a token
            </summary>
            <param name="slotId">The ID of the token's slot</param>
            <param name="mechanismList">
            If set to null then the number of mechanisms is returned in "count" parameter, without actually returning a list of mechanisms.
            If not set to null then "count" parameter must contain the lenght of mechanismList array and mechanism list is returned in "mechanismList" parameter.
            </param>
            <param name="count">Location that receives the number of mechanisms</param>
            <returns>CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_SLOT_ID_INVALID, CKR_TOKEN_NOT_PRESENT, CKR_TOKEN_NOT_RECOGNIZED, CKR_ARGUMENTS_BAD</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_GetMechanismInfo(System.UInt32,Net.Pkcs11Interop.Common.CKM,Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM_INFO@)">
            <summary>
            Obtains information about a particular mechanism possibly supported by a token
            </summary>
            <param name="slotId">The ID of the token's slot</param>
            <param name="type">The type of mechanism</param>
            <param name="info">Structure that receives the mechanism information</param>
            <returns>CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_MECHANISM_INVALID, CKR_OK, CKR_SLOT_ID_INVALID, CKR_TOKEN_NOT_PRESENT, CKR_TOKEN_NOT_RECOGNIZED, CKR_ARGUMENTS_BAD</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_InitToken(System.UInt32,System.Byte[],System.UInt32,System.Byte[])">
            <summary>
            Initializes a token
            </summary>
            <param name="slotId">The ID of the token's slot</param>
            <param name="pin">SO's initial PIN or null to use protected authentication path (pinpad)</param>
            <param name="pinLen">The length of the PIN in bytes</param>
            <param name="label">32-byte long label of the token which must be padded with blank characters</param>
            <returns>CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_PIN_INCORRECT, CKR_PIN_LOCKED, CKR_SESSION_EXISTS, CKR_SLOT_ID_INVALID, CKR_TOKEN_NOT_PRESENT, CKR_TOKEN_NOT_RECOGNIZED, CKR_TOKEN_WRITE_PROTECTED, CKR_ARGUMENTS_BAD</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_InitPIN(System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Initializes the normal user's PIN
            </summary>
            <param name="session">The session's handle</param>
            <param name="pin">Normal user's PIN or null to use protected authentication path (pinpad)</param>
            <param name="pinLen">The length of the PIN in bytes</param>
            <returns>CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_PIN_INVALID, CKR_PIN_LEN_RANGE, CKR_SESSION_CLOSED, CKR_SESSION_READ_ONLY, CKR_SESSION_HANDLE_INVALID, CKR_TOKEN_WRITE_PROTECTED, CKR_USER_NOT_LOGGED_IN, CKR_ARGUMENTS_BAD</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_SetPIN(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Modifies the PIN of the user that is currently logged in, or the CKU_USER PIN if the session is not logged in
            </summary>
            <param name="session">The session's handle</param>
            <param name="oldPin">Old PIN or null to use protected authentication path (pinpad)</param>
            <param name="oldPinLen">The length of the old PIN in bytes</param>
            <param name="newPin">New PIN or null to use protected authentication path (pinpad)</param>
            <param name="newPinLen">The length of the new PIN in bytes</param>
            <returns>CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_PIN_INCORRECT, CKR_PIN_INVALID, CKR_PIN_LEN_RANGE, CKR_PIN_LOCKED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_SESSION_READ_ONLY, CKR_TOKEN_WRITE_PROTECTED, CKR_ARGUMENTS_BAD</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_OpenSession(System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,System.UInt32@)">
            <summary>
            Opens a session between an application and a token in a particular slot
            </summary>
            <param name="slotId">The ID of the token's slot</param>
            <param name="flags">Flags indicating the type of session</param>
            <param name="application">An application defined pointer to be passed to the notification callback</param>
            <param name="notify">The address of the notification callback function</param>
            <param name="session">Location that receives the handle for the new session</param>
            <returns>CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_SESSION_COUNT, CKR_SESSION_PARALLEL_NOT_SUPPORTED, CKR_SESSION_READ_WRITE_SO_EXISTS, CKR_SLOT_ID_INVALID, CKR_TOKEN_NOT_PRESENT, CKR_TOKEN_NOT_RECOGNIZED, CKR_TOKEN_WRITE_PROTECTED, CKR_ARGUMENTS_BAD</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_CloseSession(System.UInt32)">
            <summary>
            Closes a session between an application and a token
            </summary>
            <param name="session">The session's handle</param>
            <returns>CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_CloseAllSessions(System.UInt32)">
            <summary>
            Closes all sessions an application has with a token
            </summary>
            <param name="slotId">The ID of the token's slot</param>
            <returns>CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_SLOT_ID_INVALID, CKR_TOKEN_NOT_PRESENT</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_GetSessionInfo(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_SESSION_INFO@)">
            <summary>
            Obtains information about a session
            </summary>
            <param name="session">The session's handle</param>
            <param name="info">Structure that receives the session information</param>
            <returns>CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_ARGUMENTS_BAD</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_GetOperationState(System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Obtains a copy of the cryptographic operations state of a session encoded as byte array
            </summary>
            <param name="session">The session's handle</param>
            <param name="operationState">
            If set to null then the length of state is returned in "operationStateLen" parameter, without actually returning a state.
            If not set to null then "operationStateLen" parameter must contain the lenght of operationState array and state is returned in "operationState" parameter.
            </param>
            <param name="operationStateLen">Location that receives the length in bytes of the state</param>
            <returns>CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_STATE_UNSAVEABLE, CKR_ARGUMENTS_BAD</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_SetOperationState(System.UInt32,System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Restores the cryptographic operations state of a session from bytes obtained with C_GetOperationState
            </summary>
            <param name="session">The session's handle</param>
            <param name="operationState">Saved session state</param>
            <param name="operationStateLen">Length of saved session state</param>
            <param name="encryptionKey">Handle to the key which will be used for an ongoing encryption or decryption operation in the restored session or CK_INVALID_HANDLE if not needed</param>
            <param name="authenticationKey">Handle to the key which will be used for an ongoing operation in the restored session or CK_INVALID_HANDLE if not needed</param>
            <returns>CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_KEY_CHANGED, CKR_KEY_NEEDED, CKR_KEY_NOT_NEEDED, CKR_OK, CKR_SAVED_STATE_INVALID, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_ARGUMENTS_BAD</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_Login(System.UInt32,Net.Pkcs11Interop.Common.CKU,System.Byte[],System.UInt32)">
            <summary>
            Logs a user into a token
            </summary>
            <param name="session">The session's handle</param>
            <param name="userType">The user type</param>
            <param name="pin">User's PIN or null to use protected authentication path (pinpad)</param>
            <param name="pinLen">Length of user's PIN</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_PIN_INCORRECT, CKR_PIN_LOCKED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_SESSION_READ_ONLY_EXISTS, CKR_USER_ALREADY_LOGGED_IN, CKR_USER_ANOTHER_ALREADY_LOGGED_IN, CKR_USER_PIN_NOT_INITIALIZED, CKR_USER_TOO_MANY_TYPES, CKR_USER_TYPE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_Logout(System.UInt32)">
            <summary>
            Logs a user out from a token
            </summary>
            <param name="session">The session's handle</param>
            <returns>CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_CreateObject(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE[],System.UInt32,System.UInt32@)">
            <summary>
            Creates a new object
            </summary>
            <param name="session">The session's handle</param>
            <param name="template">Object's template</param>
            <param name="count">The number of attributes in the template</param>
            <param name="objectId">Location that receives the new object's handle</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_ATTRIBUTE_READ_ONLY, CKR_ATTRIBUTE_TYPE_INVALID, CKR_ATTRIBUTE_VALUE_INVALID, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_DOMAIN_PARAMS_INVALID, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_PIN_EXPIRED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_SESSION_READ_ONLY, CKR_TEMPLATE_INCOMPLETE, CKR_TEMPLATE_INCONSISTENT, CKR_TOKEN_WRITE_PROTECTED, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_CopyObject(System.UInt32,System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE[],System.UInt32,System.UInt32@)">
            <summary>
            Copies an object, creating a new object for the copy
            </summary>
            <param name="session">The session's handle</param>
            <param name="objectId">The object's handle</param>
            <param name="template">Template for the new object</param>
            <param name="count">The number of attributes in the template</param>
            <param name="newObjectId">Location that receives the handle for the copy of the object</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_ATTRIBUTE_READ_ONLY, CKR_ATTRIBUTE_TYPE_INVALID, CKR_ATTRIBUTE_VALUE_INVALID, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OBJECT_HANDLE_INVALID, CKR_OK, CKR_PIN_EXPIRED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_SESSION_READ_ONLY, CKR_TEMPLATE_INCONSISTENT, CKR_TOKEN_WRITE_PROTECTED, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_DestroyObject(System.UInt32,System.UInt32)">
            <summary>
            Destroys an object
            </summary>
            <param name="session">The session's handle</param>
            <param name="objectId">The object's handle</param>
            <returns>CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OBJECT_HANDLE_INVALID, CKR_OK, CKR_PIN_EXPIRED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_SESSION_READ_ONLY, CKR_TOKEN_WRITE_PROTECTED</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_GetObjectSize(System.UInt32,System.UInt32,System.UInt32@)">
            <summary>
            Gets the size of an object in bytes
            </summary>
            <param name="session">The session's handle</param>
            <param name="objectId">The object's handle</param>
            <param name="size">Location that receives the size in bytes of the object</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_INFORMATION_SENSITIVE, CKR_OBJECT_HANDLE_INVALID, CKR_OK, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_GetAttributeValue(System.UInt32,System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE[],System.UInt32)">
            <summary>
            Obtains the value of one or more attributes of an object
            </summary>
            <param name="session">The session's handle</param>
            <param name="objectId">The object's handle</param>
            <param name="template">Template that specifies which attribute values are to be obtained, and receives the attribute values</param>
            <param name="count">The number of attributes in the template</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_ATTRIBUTE_SENSITIVE, CKR_ATTRIBUTE_TYPE_INVALID, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OBJECT_HANDLE_INVALID, CKR_OK, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_SetAttributeValue(System.UInt32,System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE[],System.UInt32)">
            <summary>
            Modifies the value of one or more attributes of an object
            </summary>
            <param name="session">The session's handle</param>
            <param name="objectId">The object's handle</param>
            <param name="template">Template that specifies which attribute values are to be modified and their new values</param>
            <param name="count">The number of attributes in the template</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_ATTRIBUTE_READ_ONLY, CKR_ATTRIBUTE_TYPE_INVALID, CKR_ATTRIBUTE_VALUE_INVALID, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OBJECT_HANDLE_INVALID, CKR_OK, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_SESSION_READ_ONLY, CKR_TEMPLATE_INCONSISTENT, CKR_TOKEN_WRITE_PROTECTED, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_FindObjectsInit(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE[],System.UInt32)">
            <summary>
            Initializes a search for token and session objects that match a template
            </summary>
            <param name="session">The session's handle</param>
            <param name="template">Search template that specifies the attribute values to match</param>
            <param name="count">The number of attributes in the search template</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_ATTRIBUTE_TYPE_INVALID, CKR_ATTRIBUTE_VALUE_INVALID, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_ACTIVE, CKR_PIN_EXPIRED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_FindObjects(System.UInt32,System.UInt32[],System.UInt32,System.UInt32@)">
            <summary>
            Continues a search for token and session objects that match a template, obtaining additional object handles
            </summary>
            <param name="session">The session's handle</param>
            <param name="objectId">Location that receives the list (array) of additional object handles</param>
            <param name="maxObjectCount">The maximum number of object handles to be returned</param>
            <param name="objectCount">Location that receives the actual number of object handles returned</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_FindObjectsFinal(System.UInt32)">
            <summary>
            Terminates a search for token and session objects
            </summary>
            <param name="session">The session's handle</param>
            <returns>CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_EncryptInit(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM@,System.UInt32)">
            <summary>
            Initializes an encryption operation
            </summary>
            <param name="session">The session's handle</param>
            <param name="mechanism">The encryption mechanism</param>
            <param name="key">The handle of the encryption key</param>
            <returns>CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_KEY_FUNCTION_NOT_PERMITTED, CKR_KEY_HANDLE_INVALID, CKR_KEY_SIZE_RANGE, CKR_KEY_TYPE_INCONSISTENT, CKR_MECHANISM_INVALID, CKR_MECHANISM_PARAM_INVALID, CKR_OK, CKR_OPERATION_ACTIVE, CKR_PIN_EXPIRED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_Encrypt(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Encrypts single-part data
            </summary>
            <param name="session">The session's handle</param>
            <param name="data">Data to be encrypted</param>
            <param name="dataLen">Length of data in bytes</param>
            <param name="encryptedData">
            If set to null then the length of encrypted data is returned in "encryptedDataLen" parameter, without actually returning encrypted data.
            If not set to null then "encryptedDataLen" parameter must contain the lenght of encryptedData array and encrypted data is returned in "encryptedData" parameter.
            </param>
            <param name="encryptedDataLen">Location that holds the length in bytes of the encrypted data</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DATA_INVALID, CKR_DATA_LEN_RANGE, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_EncryptUpdate(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Continues a multi-part encryption operation, processing another data part
            </summary>
            <param name="session">The session's handle</param>
            <param name="part">The data part to be encrypted</param>
            <param name="partLen">Length of data part in bytes</param>
            <param name="encryptedPart">
            If set to null then the length of encrypted data part is returned in "encryptedPartLen" parameter, without actually returning encrypted data part.
            If not set to null then "encryptedPartLen" parameter must contain the lenght of encryptedPart array and encrypted data part is returned in "encryptedPart" parameter.
            </param>
            <param name="encryptedPartLen">Location that holds the length in bytes of the encrypted data part</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DATA_LEN_RANGE, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_EncryptFinal(System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Finishes a multi-part encryption operation
            </summary>
            <param name="session">The session's handle</param>
            <param name="lastEncryptedPart">
            If set to null then the length of last encrypted data part is returned in "lastEncryptedPartLen" parameter, without actually returning last encrypted data part.
            If not set to null then "lastEncryptedPartLen" parameter must contain the lenght of lastEncryptedPart array and last encrypted data part is returned in "lastEncryptedPart" parameter.
            </param>
            <param name="lastEncryptedPartLen">Location that holds the length of the last encrypted data part</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DATA_LEN_RANGE, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_DecryptInit(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM@,System.UInt32)">
            <summary>
            Initializes a decryption operation
            </summary>
            <param name="session">The session's handle</param>
            <param name="mechanism">The decryption mechanism</param>
            <param name="key">The handle of the decryption key</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_KEY_FUNCTION_NOT_PERMITTED, CKR_KEY_HANDLE_INVALID, CKR_KEY_SIZE_RANGE, CKR_KEY_TYPE_INCONSISTENT, CKR_MECHANISM_INVALID, CKR_MECHANISM_PARAM_INVALID, CKR_OK, CKR_OPERATION_ACTIVE, CKR_PIN_EXPIRED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_Decrypt(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Decrypts encrypted data in a single part
            </summary>
            <param name="session">The session's handle</param>
            <param name="encryptedData">Encrypted data</param>
            <param name="encryptedDataLen">The length of the encrypted data</param>
            <param name="data">
            If set to null then the length of decrypted data is returned in "dataLen" parameter, without actually returning decrypted data.
            If not set to null then "dataLen" parameter must contain the lenght of data array and decrypted data is returned in "data" parameter.
            </param>
            <param name="dataLen">Location that holds the length of the decrypted data</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_ENCRYPTED_DATA_INVALID, CKR_ENCRYPTED_DATA_LEN_RANGE, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_DecryptUpdate(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Continues a multi-part decryption operation, processing another encrypted data part
            </summary>
            <param name="session">The session's handle</param>
            <param name="encryptedPart">Encrypted data part</param>
            <param name="encryptedPartLen">Length of the encrypted data part</param>
            <param name="part">
            If set to null then the length of decrypted data part is returned in "partLen" parameter, without actually returning decrypted data part.
            If not set to null then "partLen" parameter must contain the lenght of part array and decrypted data part is returned in "part" parameter.
            </param>
            <param name="partLen">Location that holds the length of the decrypted data part</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_ENCRYPTED_DATA_INVALID, CKR_ENCRYPTED_DATA_LEN_RANGE, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_DecryptFinal(System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Finishes a multi-part decryption operation
            </summary>
            <param name="session">The session's handle</param>
            <param name="lastPart">
            If set to null then the length of last decrypted data part is returned in "lastPartLen" parameter, without actually returning last decrypted data part.
            If not set to null then "lastPartLen" parameter must contain the lenght of lastPart array and last decrypted data part is returned in "lastPart" parameter.
            </param>
            <param name="lastPartLen">Location that holds the length of the last decrypted data part</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_ENCRYPTED_DATA_INVALID, CKR_ENCRYPTED_DATA_LEN_RANGE, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_DigestInit(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM@)">
            <summary>
            Initializes a message-digesting operation
            </summary>
            <param name="session">The session's handle</param>
            <param name="mechanism">The digesting mechanism</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_MECHANISM_INVALID, CKR_MECHANISM_PARAM_INVALID, CKR_OK, CKR_OPERATION_ACTIVE, CKR_PIN_EXPIRED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_Digest(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Digests data in a single part
            </summary>
            <param name="session">The session's handle</param>
            <param name="data">Data to be digested</param>
            <param name="dataLen">The length of the data to be digested</param>
            <param name="digest">
            If set to null then the length of digest is returned in "digestLen" parameter, without actually returning digest.
            If not set to null then "digestLen" parameter must contain the lenght of digest array and digest is returned in "digest" parameter.
            </param>
            <param name="digestLen">Location that holds the length of the message digest</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_DigestUpdate(System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Continues a multi-part message-digesting operation, processing another data part
            </summary>
            <param name="session">The session's handle</param>
            <param name="part">Data part</param>
            <param name="partLen">The length of the data part</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_DigestKey(System.UInt32,System.UInt32)">
            <summary>
            Continues a multi-part message-digesting operation by digesting the value of a secret key
            </summary>
            <param name="session">The session's handle</param>
            <param name="key">The handle of the secret key to be digested</param>
            <returns>CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_KEY_HANDLE_INVALID, CKR_KEY_INDIGESTIBLE, CKR_KEY_SIZE_RANGE, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_DigestFinal(System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Finishes a multi-part message-digesting operation, returning the message digest
            </summary>
            <param name="session">The session's handle</param>
            <param name="digest">
            If set to null then the length of digest is returned in "digestLen" parameter, without actually returning digest.
            If not set to null then "digestLen" parameter must contain the lenght of digest array and digest is returned in "digest" parameter.
            </param>
            <param name="digestLen">Location that holds the length of the message digest</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_SignInit(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM@,System.UInt32)">
            <summary>
            Initializes a signature operation, where the signature is an appendix to the data
            </summary>
            <param name="session">The session's handle</param>
            <param name="mechanism">Signature mechanism</param>
            <param name="key">Handle of the signature key</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_KEY_FUNCTION_NOT_PERMITTED,CKR_KEY_HANDLE_INVALID, CKR_KEY_SIZE_RANGE, CKR_KEY_TYPE_INCONSISTENT, CKR_MECHANISM_INVALID, CKR_MECHANISM_PARAM_INVALID, CKR_OK, CKR_OPERATION_ACTIVE, CKR_PIN_EXPIRED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_Sign(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Signs data in a single part, where the signature is an appendix to the data
            </summary>
            <param name="session">The session's handle</param>
            <param name="data">Data to be signed</param>
            <param name="dataLen">The length of the data</param>
            <param name="signature">
            If set to null then the length of signature is returned in "signatureLen" parameter, without actually returning signature.
            If not set to null then "signatureLen" parameter must contain the lenght of signature array and signature is returned in "signature" parameter.
            </param>
            <param name="signatureLen">Location that holds the length of the signature</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DATA_INVALID, CKR_DATA_LEN_RANGE, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN, CKR_FUNCTION_REJECTED</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_SignUpdate(System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Continues a multi-part signature operation, processing another data part
            </summary>
            <param name="session">The session's handle</param>
            <param name="part">Data part</param>
            <param name="partLen">The length of the data part</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DATA_LEN_RANGE, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_SignFinal(System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Finishes a multi-part signature operation, returning the signature
            </summary>
            <param name="session">The session's handle</param>
            <param name="signature">
            If set to null then the length of signature is returned in "signatureLen" parameter, without actually returning signature.
            If not set to null then "signatureLen" parameter must contain the lenght of signature array and signature is returned in "signature" parameter.
            </param>
            <param name="signatureLen">Location that holds the length of the signature</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DATA_LEN_RANGE, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN, CKR_FUNCTION_REJECTED</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_SignRecoverInit(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM@,System.UInt32)">
            <summary>
            Initializes a signature operation, where the data can be recovered from the signature
            </summary>
            <param name="session">The session's handle</param>
            <param name="mechanism">Signature mechanism</param>
            <param name="key">Handle of the signature key</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_KEY_FUNCTION_NOT_PERMITTED, CKR_KEY_HANDLE_INVALID, CKR_KEY_SIZE_RANGE, CKR_KEY_TYPE_INCONSISTENT, CKR_MECHANISM_INVALID, CKR_MECHANISM_PARAM_INVALID, CKR_OK, CKR_OPERATION_ACTIVE, CKR_PIN_EXPIRED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_SignRecover(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Signs data in a single operation, where the data can be recovered from the signature
            </summary>
            <param name="session">The session's handle</param>
            <param name="data">Data to be signed</param>
            <param name="dataLen">The length of data to be signed</param>
            <param name="signature">
            If set to null then the length of signature is returned in "signatureLen" parameter, without actually returning signature.
            If not set to null then "signatureLen" parameter must contain the lenght of signature array and signature is returned in "signature" parameter.
            </param>
            <param name="signatureLen">Location that holds the length of the signature</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DATA_INVALID, CKR_DATA_LEN_RANGE, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_VerifyInit(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM@,System.UInt32)">
            <summary>
            Initializes a verification operation, where the signature is an appendix to the data
            </summary>
            <param name="session">The session's handle</param>
            <param name="mechanism">The verification mechanism</param>
            <param name="key">The handle of the verification key</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_KEY_FUNCTION_NOT_PERMITTED, CKR_KEY_HANDLE_INVALID, CKR_KEY_SIZE_RANGE, CKR_KEY_TYPE_INCONSISTENT, CKR_MECHANISM_INVALID, CKR_MECHANISM_PARAM_INVALID, CKR_OK, CKR_OPERATION_ACTIVE, CKR_PIN_EXPIRED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_Verify(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Verifies a signature in a single-part operation, where the signature is an appendix to the data
            </summary>
            <param name="session">The session's handle</param>
            <param name="data">Data that were signed</param>
            <param name="dataLen">The length of the data</param>
            <param name="signature">Signature of data</param>
            <param name="signatureLen">The length of signature</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DATA_INVALID, CKR_DATA_LEN_RANGE, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_SIGNATURE_INVALID, CKR_SIGNATURE_LEN_RANGE</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_VerifyUpdate(System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Continues a multi-part verification operation, processing another data part
            </summary>
            <param name="session">The session's handle</param>
            <param name="part">Data part</param>
            <param name="partLen">The length of the data part</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DATA_LEN_RANGE, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_VerifyFinal(System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Finishes a multi-part verification operation, checking the signature
            </summary>
            <param name="session">The session's handle</param>
            <param name="signature">Signature</param>
            <param name="signatureLen">The length of signature</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DATA_LEN_RANGE, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_SIGNATURE_INVALID, CKR_SIGNATURE_LEN_RANGE</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_VerifyRecoverInit(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM@,System.UInt32)">
            <summary>
            Initializes a signature verification operation, where the data is recovered from the signature
            </summary>
            <param name="session">The session's handle</param>
            <param name="mechanism">Verification mechanism</param>
            <param name="key">The handle of the verification key</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_KEY_FUNCTION_NOT_PERMITTED, CKR_KEY_HANDLE_INVALID, CKR_KEY_SIZE_RANGE, CKR_KEY_TYPE_INCONSISTENT, CKR_MECHANISM_INVALID, CKR_MECHANISM_PARAM_INVALID, CKR_OK, CKR_OPERATION_ACTIVE, CKR_PIN_EXPIRED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_VerifyRecover(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Verifies a signature in a single-part operation, where the data is recovered from the signature
            </summary>
            <param name="session">The session's handle</param>
            <param name="signature">Signature</param>
            <param name="signatureLen">The length of signature</param>
            <param name="data">
            If set to null then the length of recovered data is returned in "dataLen" parameter, without actually returning recovered data.
            If not set to null then "dataLen" parameter must contain the lenght of data array and recovered data is returned in "data" parameter.
            </param>
            <param name="dataLen">Location that holds the length of the decrypted data</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DATA_INVALID, CKR_DATA_LEN_RANGE, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_SIGNATURE_LEN_RANGE, CKR_SIGNATURE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_DigestEncryptUpdate(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Continues multi-part digest and encryption operations, processing another data part
            </summary>
            <param name="session">The session's handle</param>
            <param name="part">The data part to be digested and encrypted</param>
            <param name="partLen">Length of data part in bytes</param>
            <param name="encryptedPart">
            If set to null then the length of encrypted data part is returned in "encryptedPartLen" parameter, without actually returning encrypted data part.
            If not set to null then "encryptedPartLen" parameter must contain the lenght of encryptedPart array and encrypted data part is returned in "encryptedPart" parameter.
            </param>
            <param name="encryptedPartLen">Location that holds the length in bytes of the encrypted data part</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DATA_LEN_RANGE, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_DecryptDigestUpdate(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Continues a multi-part combined decryption and digest operation, processing another data part
            </summary>
            <param name="session">The session's handle</param>
            <param name="encryptedPart">Encrypted data part</param>
            <param name="encryptedPartLen">Length of the encrypted data part</param>
            <param name="part">
            If set to null then the length of decrypted data part is returned in "partLen" parameter, without actually returning decrypted data part.
            If not set to null then "partLen" parameter must contain the lenght of part array and decrypted data part is returned in "part" parameter.
            </param>
            <param name="partLen">Location that holds the length of the decrypted data part</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_ENCRYPTED_DATA_INVALID, CKR_ENCRYPTED_DATA_LEN_RANGE, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_SignEncryptUpdate(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Continues a multi-part combined signature and encryption operation, processing another data part
            </summary>
            <param name="session">The session's handle</param>
            <param name="part">The data part to be signed and encrypted</param>
            <param name="partLen">Length of data part in bytes</param>
            <param name="encryptedPart">
            If set to null then the length of encrypted data part is returned in "encryptedPartLen" parameter, without actually returning encrypted data part.
            If not set to null then "encryptedPartLen" parameter must contain the lenght of encryptedPart array and encrypted data part is returned in "encryptedPart" parameter.
            </param>
            <param name="encryptedPartLen">Location that holds the length in bytes of the encrypted data part</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DATA_LEN_RANGE, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_DecryptVerifyUpdate(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Continues a multi-part combined decryption and verification operation, processing another data part
            </summary>
            <param name="session">The session's handle</param>
            <param name="encryptedPart">Encrypted data part</param>
            <param name="encryptedPartLen">Length of the encrypted data part</param>
            <param name="part">
            If set to null then the length of decrypted data part is returned in "partLen" parameter, without actually returning decrypted data part.
            If not set to null then "partLen" parameter must contain the lenght of part array and decrypted data part is returned in "part" parameter.
            </param>
            <param name="partLen">Location that holds the length of the decrypted data part</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DATA_LEN_RANGE, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_ENCRYPTED_DATA_INVALID, CKR_ENCRYPTED_DATA_LEN_RANGE, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_NOT_INITIALIZED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_GenerateKey(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM@,Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE[],System.UInt32,System.UInt32@)">
            <summary>
            Generates a secret key or set of domain parameters, creating a new object
            </summary>
            <param name="session">The session's handle</param>
            <param name="mechanism">Key generation mechanism</param>
            <param name="template">The template for the new key or set of domain parameters</param>
            <param name="count">The number of attributes in the template</param>
            <param name="key">Location that receives the handle of the new key or set of domain parameters</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_ATTRIBUTE_READ_ONLY, CKR_ATTRIBUTE_TYPE_INVALID, CKR_ATTRIBUTE_VALUE_INVALID, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_MECHANISM_INVALID, CKR_MECHANISM_PARAM_INVALID, CKR_OK, CKR_OPERATION_ACTIVE, CKR_PIN_EXPIRED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_SESSION_READ_ONLY, CKR_TEMPLATE_INCOMPLETE, CKR_TEMPLATE_INCONSISTENT, CKR_TOKEN_WRITE_PROTECTED, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_GenerateKeyPair(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM@,Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE[],System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE[],System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>
            Generates a public/private key pair, creating new key objects
            </summary>
            <param name="session">The session's handle</param>
            <param name="mechanism">Key generation mechanism</param>
            <param name="publicKeyTemplate">The template for the public key</param>
            <param name="publicKeyAttributeCount">The number of attributes in the public-key template</param>
            <param name="privateKeyTemplate">The template for the private key</param>
            <param name="privateKeyAttributeCount">The number of attributes in the private-key template</param>
            <param name="publicKey">Location that receives the handle of the new public key</param>
            <param name="privateKey">Location that receives the handle of the new private key</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_ATTRIBUTE_READ_ONLY, CKR_ATTRIBUTE_TYPE_INVALID, CKR_ATTRIBUTE_VALUE_INVALID, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_DOMAIN_PARAMS_INVALID, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_MECHANISM_INVALID, CKR_MECHANISM_PARAM_INVALID, CKR_OK, CKR_OPERATION_ACTIVE, CKR_PIN_EXPIRED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_SESSION_READ_ONLY, CKR_TEMPLATE_INCOMPLETE, CKR_TEMPLATE_INCONSISTENT, CKR_TOKEN_WRITE_PROTECTED, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_WrapKey(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM@,System.UInt32,System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            Wraps (i.e., encrypts) a private or secret key
            </summary>
            <param name="session">The session's handle</param>
            <param name="mechanism">Wrapping mechanism</param>
            <param name="wrappingKey">The handle of the wrapping key</param>
            <param name="key">The handle of the key to be wrapped</param>
            <param name="wrappedKey">
            If set to null then the length of wrapped key is returned in "wrappedKeyLen" parameter, without actually returning wrapped key.
            If not set to null then "wrappedKeyLen" parameter must contain the lenght of wrappedKey array and wrapped key is returned in "wrappedKey" parameter.
            </param>
            <param name="wrappedKeyLen">Location that receives the length of the wrapped key</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_KEY_HANDLE_INVALID, CKR_KEY_NOT_WRAPPABLE, CKR_KEY_SIZE_RANGE, CKR_KEY_UNEXTRACTABLE, CKR_MECHANISM_INVALID, CKR_MECHANISM_PARAM_INVALID, CKR_OK, CKR_OPERATION_ACTIVE, CKR_PIN_EXPIRED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN, CKR_WRAPPING_KEY_HANDLE_INVALID, CKR_WRAPPING_KEY_SIZE_RANGE, CKR_WRAPPING_KEY_TYPE_INCONSISTENT</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_UnwrapKey(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM@,System.UInt32,System.Byte[],System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE[],System.UInt32,System.UInt32@)">
            <summary>
            Unwraps (i.e. decrypts) a wrapped key, creating a new private key or secret key object
            </summary>
            <param name="session">The session's handle</param>
            <param name="mechanism">Unwrapping mechanism</param>
            <param name="unwrappingKey">The handle of the unwrapping key</param>
            <param name="wrappedKey">Wrapped key</param>
            <param name="wrappedKeyLen">The length of the wrapped key</param>
            <param name="template">The template for the new key</param>
            <param name="attributeCount">The number of attributes in the template</param>
            <param name="key">Location that receives the handle of the unwrapped key</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_ATTRIBUTE_READ_ONLY, CKR_ATTRIBUTE_TYPE_INVALID, CKR_ATTRIBUTE_VALUE_INVALID, CKR_BUFFER_TOO_SMALL, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_DOMAIN_PARAMS_INVALID, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_MECHANISM_INVALID, CKR_MECHANISM_PARAM_INVALID, CKR_OK, CKR_OPERATION_ACTIVE, CKR_PIN_EXPIRED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_SESSION_READ_ONLY, CKR_TEMPLATE_INCOMPLETE, CKR_TEMPLATE_INCONSISTENT, CKR_TOKEN_WRITE_PROTECTED, CKR_UNWRAPPING_KEY_HANDLE_INVALID, CKR_UNWRAPPING_KEY_SIZE_RANGE, CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT, CKR_USER_NOT_LOGGED_IN, CKR_WRAPPED_KEY_INVALID, CKR_WRAPPED_KEY_LEN_RANGE</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_DeriveKey(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM@,System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE[],System.UInt32,System.UInt32@)">
            <summary>
            Derives a key from a base key, creating a new key object
            </summary>
            <param name="session">The session's handle</param>
            <param name="mechanism">Key derivation mechanism</param>
            <param name="baseKey">The handle of the base key</param>
            <param name="template">The template for the new key</param>
            <param name="attributeCount">The number of attributes in the template</param>
            <param name="key">Location that receives the handle of the derived key</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_ATTRIBUTE_READ_ONLY, CKR_ATTRIBUTE_TYPE_INVALID, CKR_ATTRIBUTE_VALUE_INVALID, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_DOMAIN_PARAMS_INVALID, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_KEY_HANDLE_INVALID, CKR_KEY_SIZE_RANGE, CKR_KEY_TYPE_INCONSISTENT, CKR_MECHANISM_INVALID, CKR_MECHANISM_PARAM_INVALID, CKR_OK, CKR_OPERATION_ACTIVE, CKR_PIN_EXPIRED, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_SESSION_READ_ONLY, CKR_TEMPLATE_INCOMPLETE, CKR_TEMPLATE_INCONSISTENT, CKR_TOKEN_WRITE_PROTECTED, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_SeedRandom(System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Mixes additional seed material into the token's random number generator
            </summary>
            <param name="session">The session's handle</param>
            <param name="seed">The seed material</param>
            <param name="seedLen">The length of the seed material</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_ACTIVE, CKR_RANDOM_SEED_NOT_SUPPORTED, CKR_RANDOM_NO_RNG, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_GenerateRandom(System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Generates random or pseudo-random data
            </summary>
            <param name="session">The session's handle</param>
            <param name="randomData">Location that receives the random data</param>
            <param name="randomLen">The length in bytes of the random or pseudo-random data to be generated</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_DEVICE_ERROR, CKR_DEVICE_MEMORY, CKR_DEVICE_REMOVED, CKR_FUNCTION_CANCELED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_OK, CKR_OPERATION_ACTIVE, CKR_RANDOM_NO_RNG, CKR_SESSION_CLOSED, CKR_SESSION_HANDLE_INVALID, CKR_USER_NOT_LOGGED_IN</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_GetFunctionStatus(System.UInt32)">
            <summary>
            Legacy function which should simply return the value CKR_FUNCTION_NOT_PARALLEL
            </summary>
            <param name="session">The session's handle</param>
            <returns>CKR_FUNCTION_NOT_PARALLEL</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_CancelFunction(System.UInt32)">
            <summary>
            Legacy function which should simply return the value CKR_FUNCTION_NOT_PARALLEL
            </summary>
            <param name="session">The session's handle</param>
            <returns>CKR_FUNCTION_NOT_PARALLEL</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.C_WaitForSlotEvent(System.UInt32,System.UInt32@,System.IntPtr)">
            <summary>
            Waits for a slot event, such as token insertion or token removal, to occur
            </summary>
            <param name="flags">Determines whether or not the C_WaitForSlotEvent call blocks (i.e., waits for a slot event to occur)</param>
            <param name="slot">Location which will receive the ID of the slot that the event occurred in</param>
            <param name="reserved">Reserved for future versions (should be null)</param>
            <returns>CKR_ARGUMENTS_BAD, CKR_CRYPTOKI_NOT_INITIALIZED, CKR_FUNCTION_FAILED, CKR_GENERAL_ERROR, CKR_HOST_MEMORY, CKR_NO_EVENT, CKR_OK</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.Pkcs11.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.UnmanagedMemory">
            <summary>
            Utility class that helps to manage unmanaged memory
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.UnmanagedMemory.Allocate(System.Int32)">
            <summary>
            Allocates unmanaged zero-filled memory
            </summary>
            <param name="size">Number of bytes required</param>
            <returns>Pointer to newly allocated unmanaged zero-filled memory</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.UnmanagedMemory.Free(System.IntPtr@)">
            <summary>
            Frees previously allocated unmanaged memory
            </summary>
            <param name="memory">Pointer to the previously allocated unmanaged memory</param>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.UnmanagedMemory.SizeOf(System.Type)">
            <summary>
            Returns the unmanaged size of the structure in bytes
            </summary>
            <param name="structureType">Type of structure whose size should be determined</param>
            <returns>Unmanaged size of the structure in bytes</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.UnmanagedMemory.Write(System.IntPtr,System.Byte[])">
            <summary>
            Copies content of byte array to unmanaged memory
            </summary>
            <param name="memory">Previously allocated unmanaged memory to copy to</param>
            <param name="content">Byte array to copy from</param>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.UnmanagedMemory.Write(System.IntPtr,System.Object)">
            <summary>
            Copies content of structure to unmanaged memory
            </summary>
            <param name="memory">Previously allocated unmanaged memory to copy to</param>
            <param name="structure">Structure to copy from</param>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.UnmanagedMemory.Read(System.IntPtr,System.Int32)">
            <summary>
            Creates copy of unmanaged memory contet
            </summary>
            <param name="memory">Memory that should be copied</param>
            <param name="size">Number of bytes that should be copied</param>
            <returns>Copy of unmanaged memory contet</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.UnmanagedMemory.Read(System.IntPtr,System.Type)">
            <summary>
            Copies content of unmanaged memory to the newly allocated managed structure
            </summary>
            <param name="memory">Memory that should be copied</param>
            <param name="structureType">Type of structure that should be created</param>
            <returns>Structure of requested type</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.UnmanagedMemory.Read(System.IntPtr,System.Object)">
            <summary>
            Copies content of unmanaged memory to the existing managed structure
            </summary>
            <param name="memory">Memory that should be copied</param>
            <param name="structure">Object to which data should be copied</param>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.CK">
            <summary>
            General constants
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CK.CK_INVALID_HANDLE">
            <summary>
            The following value is always invalid if used as a session handle or object handle
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CK.CK_OTP_FORMAT_DECIMAL">
            <summary>
            Decimal (default) (UTF8-encoded) format of OTP value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CK.CK_OTP_FORMAT_HEXADECIMAL">
            <summary>
            Hexadecimal (UTF8-encoded) format of OTP value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CK.CK_OTP_FORMAT_ALPHANUMERIC">
            <summary>
            Alphanumeric (UTF8-encoded) format of OTP value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CK.CK_OTP_FORMAT_BINARY">
            <summary>
            Binary format of OTP value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CK.CK_OTP_PARAM_IGNORED">
            <summary>
            OTP parameter, if supplied, will be ignored
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CK.CK_OTP_PARAM_OPTIONAL">
            <summary>
            OTP parameter may be supplied but need not be
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CK.CK_OTP_PARAM_MANDATORY">
            <summary>
            OTP parameter must be supplied
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CK.CK_OTP_VALUE">
            <summary>
            An actual OTP value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CK.CK_OTP_PIN">
            <summary>
            A UTF8 string containing a PIN for use when computing or verifying PIN-based OTP values
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CK.CK_OTP_CHALLENGE">
            <summary>
            Challenge to use when computing or verifying challenge-based OTP values
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CK.CK_OTP_TIME">
            <summary>
            UTC time value in the form YYYYMMDDhhmmss to use when computing or verifying time-based OTP values
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CK.CK_OTP_COUNTER">
            <summary>
            Counter value to use when computing or verifying counter-based OTP values
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CK.CK_OTP_FLAGS">
            <summary>
            Bit flags indicating the characteristics of the sought OTP as defined below
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CK.CK_OTP_OUTPUT_LENGTH">
            <summary>
            Desired output length (overrides any default value)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CK.CK_OTP_OUTPUT_FORMAT">
            <summary>
            Returned OTP format
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.CKA">
            <summary>
            Attributes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_CLASS">
            <summary>
            Object class (type) [CKO/uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_TOKEN">
            <summary>
            True if object is a token object; false if object is a session object [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_PRIVATE">
            <summary>
            True if object is a private object; false if object is a public object. [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_LABEL">
            <summary>
            Description of the object [string]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_APPLICATION">
            <summary>
            Description of the application that manages the object [string]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_VALUE">
            <summary>
            Value of the object [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_OBJECT_ID">
            <summary>
            DER-encoding of the object identifier indicating the data object type [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_CERTIFICATE_TYPE">
            <summary>
            Type of certificate [CKC/uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_ISSUER">
            <summary>
            DER-encoding of the certificate issuer name [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_SERIAL_NUMBER">
            <summary>
            DER-encoding of the certificate serial number [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_AC_ISSUER">
            <summary>
            DER-encoding of the attribute certificate's issuer field. [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_OWNER">
            <summary>
            DER-encoding of the attribute certificate's subject field. [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_ATTR_TYPES">
            <summary>
            BER-encoding of a sequence of object identifier values corresponding to the attribute types contained in the certificate. [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_TRUSTED">
            <summary>
            The certificate can be trusted for the application that it was created. [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_CERTIFICATE_CATEGORY">
            <summary>
            Categorization of the certificate: 0 = unspecified (default value), 1 = token user, 2 = authority, 3 = other entity [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_JAVA_MIDP_SECURITY_DOMAIN">
            <summary>
            Java MIDP security domain: 0 = unspecified (default value), 1 = manufacturer, 2 = operator, 3 = third party [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_URL">
            <summary>
            If not empty this attribute gives the URL where the complete certificate can be obtained [string]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_HASH_OF_SUBJECT_PUBLIC_KEY">
            <summary>
            SHA-1 hash of the subject public key [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_HASH_OF_ISSUER_PUBLIC_KEY">
            <summary>
            SHA-1 hash of the issuer public key [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_CHECK_VALUE">
            <summary>
            Checksum [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_KEY_TYPE">
            <summary>
            Type of key [CKK/uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_SUBJECT">
            <summary>
            DER-encoding of the key subject name [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_ID">
            <summary>
            Key identifier for public/private key pair [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_SENSITIVE">
            <summary>
            True if key is sensitive [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_ENCRYPT">
            <summary>
            True if key supports encryption [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_DECRYPT">
            <summary>
            True if key supports decryption [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_WRAP">
            <summary>
            True if key supports wrapping (i.e., can be used to wrap other keys) [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_UNWRAP">
            <summary>
            True if key supports unwrapping (i.e., can be used to unwrap other keys) [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_SIGN">
            <summary>
            True if key supports signatures (i.e., authentication codes) where the signature is an appendix to the data [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_SIGN_RECOVER">
            <summary>
            True if key supports signatures where the data can be recovered from the signature [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_VERIFY">
            <summary>
            True if key supports verification (i.e., of authentication codes) where the signature is an appendix to the data [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_VERIFY_RECOVER">
            <summary>
            True if key supports verification where the data is recovered from the signature [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_DERIVE">
            <summary>
            True if key supports key derivation (i.e., if other keys can be derived from this one) [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_START_DATE">
            <summary>
            Start date for the certificate/key [DateTime]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_END_DATE">
            <summary>
            End date for the certificate/key [DateTime]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_MODULUS">
            <summary>
            Modulus n [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_MODULUS_BITS">
            <summary>
            Length in bits of modulus n [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_PUBLIC_EXPONENT">
            <summary>
            Public exponent e [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_PRIVATE_EXPONENT">
            <summary>
            Private exponent d [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_PRIME_1">
            <summary>
            Prime p [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_PRIME_2">
            <summary>
            Prime q [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_EXPONENT_1">
            <summary>
            Private exponent d modulo p-1 [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_EXPONENT_2">
            <summary>
            Private exponent d modulo q-1 [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_COEFFICIENT">
            <summary>
            CRT coefficient q^-1 mod p [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_PRIME">
            <summary>
            Prime p (512 to 1024 bits, in steps of 64 bits) [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_SUBPRIME">
            <summary>
            Subprime q (160 bits) [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_BASE">
            <summary>
            Base g [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_PRIME_BITS">
            <summary>
            Length of the prime value [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_SUBPRIME_BITS">
            <summary>
            Length of the subprime value [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_VALUE_BITS">
            <summary>
            Length in bits of private value x [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_VALUE_LEN">
            <summary>
            Length in bytes of key value [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_EXTRACTABLE">
            <summary>
            True if key is extractable and can be wrapped [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_LOCAL">
            <summary>
            True only if key was either generated locally (i.e., on the token) or created as a copy of a key which had its CKA_LOCAL attribute set to true [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_NEVER_EXTRACTABLE">
            <summary>
            True if key has never had the CKA_EXTRACTABLE attribute set to true [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_ALWAYS_SENSITIVE">
            <summary>
            True if key has always had the CKA_SENSITIVE attribute set to true [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_KEY_GEN_MECHANISM">
            <summary>
            Identifier of the mechanism used to generate the key material [CKM/uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_MODIFIABLE">
            <summary>
            True if object can be modified [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_ECDSA_PARAMS">
            <summary>
            DER-encoding of an ANSI X9.62 Parameters value [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_EC_PARAMS">
            <summary>
            DER-encoding of an ANSI X9.62 Parameters value [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_EC_POINT">
            <summary>
            DER-encoding of ANSI X9.62 ECPoint value Q [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_SECONDARY_AUTH">
            <summary>
            True if the key requires a secondary authentication to take place before its use it allowed [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_AUTH_PIN_FLAGS">
            <summary>
            Mask indicating the current state of the secondary authentication PIN [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_ALWAYS_AUTHENTICATE">
            <summary>
            If true, the user has to supply the PIN for each use (sign or decrypt) with the key [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_WRAP_WITH_TRUSTED">
            <summary>
            True if the key can only be wrapped with a wrapping key that has CKA_TRUSTED set to true [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_WRAP_TEMPLATE">
            <summary>
            The attribute template to match against any keys wrapped using this wrapping key. Keys that do not match cannot be wrapped. [List of ObjectAttribute / CK_ATTRIBUTE array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_UNWRAP_TEMPLATE">
            <summary>
            The attribute template to apply to any keys unwrapped using this wrapping key. Any user supplied template is applied after this template as if the object has already been created. [List of ObjectAttribute / CK_ATTRIBUTE array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_OTP_FORMAT">
            <summary>
            Format of OTP values produced with this key: CK_OTP_FORMAT_DECIMAL = Decimal, CK_OTP_FORMAT_HEXADECIMAL = Hexadecimal, CK_OTP_FORMAT_ALPHANUMERIC = Alphanumeric, CK_OTP_FORMAT_BINARY = Only binary values [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_OTP_LENGTH">
            <summary>
            Default length of OTP values (in the CKA_OTP_FORMAT) produced with this key [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_OTP_TIME_INTERVAL">
            <summary>
            Interval between OTP values produced with this key, in seconds. [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_OTP_USER_FRIENDLY_MODE">
            <summary>
            Set to true when the token is capable of returning OTPs suitable for human consumption [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_OTP_CHALLENGE_REQUIREMENT">
            <summary>
            Parameter requirements when generating or verifying OTP values with this key: CK_OTP_PARAM_MANDATORY = A challenge must be supplied. CK_OTP_PARAM_OPTIONAL = A challenge may be supplied but need not be. CK_OTP_PARAM_IGNORED = A challenge, if supplied, will be ignored. [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_OTP_TIME_REQUIREMENT">
            <summary>
            Parameter requirements when generating or verifying OTP values with this key: CK_OTP_PARAM_MANDATORY = A time value must be supplied. CK_OTP_PARAM_OPTIONAL = A time value may be supplied but need not be. CK_OTP_PARAM_IGNORED = A time value, if supplied, will be ignored. [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_OTP_COUNTER_REQUIREMENT">
            <summary>
            Parameter requirements when generating or verifying OTP values with this key: CK_OTP_PARAM_MANDATORY = A counter value must be supplied. CK_OTP_PARAM_OPTIONAL = A counter value may be supplied but need not be. CK_OTP_PARAM_IGNORED = A counter value, if supplied, will be ignored. [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_OTP_PIN_REQUIREMENT">
            <summary>
            Parameter requirements when generating or verifying OTP values with this key: CK_OTP_PARAM_MANDATORY = A PIN value must be supplied. CK_OTP_PARAM_OPTIONAL = A PIN value may be supplied but need not be. CK_OTP_PARAM_IGNORED = A PIN value, if supplied, will be ignored. [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_OTP_COUNTER">
            <summary>
            Value of the associated internal counter [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_OTP_TIME">
            <summary>
            Value of the associated internal UTC time in the form YYYYMMDDhhmmss [string]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_OTP_USER_IDENTIFIER">
            <summary>
            Text string that identifies a user associated with the OTP key (may be used to enhance the user experience). [string]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_OTP_SERVICE_IDENTIFIER">
            <summary>
            Text string that identifies a service that may validate OTPs generated by this key [string]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_OTP_SERVICE_LOGO">
            <summary>
            Logotype image that identifies a service that may validate OTPs generated by this key. [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_OTP_SERVICE_LOGO_TYPE">
            <summary>
            MIME type of the CKA_OTP_SERVICE_LOGO attribute value [string]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_HW_FEATURE_TYPE">
            <summary>
            Hardware feature (type) [CKH/uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_RESET_ON_INIT">
            <summary>
            The value of the counter will reset to a previously returned value if the token is initialized [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_HAS_RESET">
            <summary>
            The value of the counter has been reset at least once at some point in time [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_PIXEL_X">
            <summary>
            Screen resolution (in pixels) in X-axis [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_PIXEL_Y">
            <summary>
            Screen resolution (in pixels) in Y-axis [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_RESOLUTION">
            <summary>
            DPI, pixels per inch [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_CHAR_ROWS">
            <summary>
            Number of character rows for character-oriented displays [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_CHAR_COLUMNS">
            <summary>
            Number of character columns for character-oriented displays [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_COLOR">
            <summary>
            Color support [bool]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_BITS_PER_PIXEL">
            <summary>
            The number of bits of color or grayscale information per pixel. [uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_CHAR_SETS">
            <summary>
            String indicating supported character sets, as defined by IANA MIBenum sets (www.iana.org). Supported character sets are separated with ";" e.g. a token supporting iso-8859-1 and us-ascii would set the attribute value to "4;3". [string]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_ENCODING_METHODS">
            <summary>
            String indicating supported content transfer encoding methods, as defined by IANA (www.iana.org). Supported methods are separated with ";" e.g. a token supporting 7bit, 8bit and base64 could set the attribute value to "7bit;8bit;base64". [string]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_MIME_TYPES">
            <summary>
            String indicating supported (presentable) MIME-types, as defined by IANA (www.iana.org). Supported types are separated with ";" e.g. a token supporting MIME types "a/b", "a/c" and "a/d" would set the attribute value to "a/b;a/c;a/d". [string]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_MECHANISM_TYPE">
            <summary>
            The type of mechanism object [CKM/uint]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_REQUIRED_CMS_ATTRIBUTES">
            <summary>
            Attributes the token always will include in the set of CMS signed attributes [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_DEFAULT_CMS_ATTRIBUTES">
            <summary>
            Attributes the token will include in the set of CMS signed attributes in the absence of any attributes specified by the application [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_SUPPORTED_CMS_ATTRIBUTES">
            <summary>
            Attributes the token may include in the set of CMS signed attributes upon request by the application [byte array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_ALLOWED_MECHANISMS">
            <summary>
            A list of mechanisms allowed to be used with this key [List of CKM / List of uint / CKM array / uint array]
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKA.CKA_VENDOR_DEFINED">
            <summary>
            Permanently reserved for token vendors
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.CKC">
            <summary>
            Certificate types
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKC.CKC_X_509">
            <summary>
            X.509 public key certificate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKC.CKC_X_509_ATTR_CERT">
            <summary>
            X.509 attribute certificate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKC.CKC_WTLS">
            <summary>
            WTLS public key certificate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKC.CKC_VENDOR_DEFINED">
            <summary>
            Permanently reserved for token vendors
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.CKD">
            <summary>
            Key derivation functions
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKD.CKD_NULL">
            <summary>
            Produces a raw shared secret value without applying any key derivation function
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKD.CKD_SHA1_KDF">
            <summary>
            Derives keying data from the shared secret value as defined in ANSI X9.63
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKD.CKD_SHA1_KDF_ASN1">
            <summary>
            Derives keying data from the shared secret value as defined in the ANSI X9.42 standard
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKD.CKD_SHA1_KDF_CONCATENATE">
            <summary>
            Derives keying data from the shared secret value as defined in the ANSI X9.42 standard
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.CKF">
            <summary>
            Bit flags
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_TOKEN_PRESENT">
            <summary>
            True if a token is present in the slot
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_REMOVABLE_DEVICE">
            <summary>
            True if the reader supports removable devices
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_HW_SLOT">
            <summary>
            True if the slot is a hardware slot, as opposed to a software slot implementing a "soft token"
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_RNG">
            <summary>
            True if the token has its own random number generator
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_WRITE_PROTECTED">
            <summary>
            True if the token is write-protected
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_LOGIN_REQUIRED">
            <summary>
            True if there are some cryptographic functions that a user must be logged in to perform
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_USER_PIN_INITIALIZED">
            <summary>
            True if the normal user's PIN has been initialized
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_RESTORE_KEY_NOT_NEEDED">
            <summary>
            True if a successful save of a session's cryptographic operations state always contains all keys needed to restore the state of the session
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_CLOCK_ON_TOKEN">
            <summary>
            True if token has its own hardware clock
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_PROTECTED_AUTHENTICATION_PATH">
            <summary>
            True if token has a "protected authentication path", whereby a user can log into the token without passing a PIN through the Cryptoki library
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_DUAL_CRYPTO_OPERATIONS">
            <summary>
            True if a single session with the token can perform dual cryptographic operations
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_TOKEN_INITIALIZED">
            <summary>
            True if the token has been initialized using C_InitializeToken or an equivalent mechanism outside the scope of this standard. Calling C_InitializeToken when this flag is set will cause the token to be reinitialized.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_SECONDARY_AUTHENTICATION">
            <summary>
            True if the token supports secondary authentication for private key objects.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_USER_PIN_COUNT_LOW">
            <summary>
            True if an incorrect user login PIN has been entered at least once since the last successful authentication.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_USER_PIN_FINAL_TRY">
            <summary>
            True if supplying an incorrect user PIN will it to become locked.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_USER_PIN_LOCKED">
            <summary>
            True if the user PIN has been locked. User login to the token is not possible.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_USER_PIN_TO_BE_CHANGED">
            <summary>
            True if the user PIN value is the default value set by token initialization or manufacturing, or the PIN has been expired by the card.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_SO_PIN_COUNT_LOW">
            <summary>
            True if an incorrect SO login PIN has been entered at least once since the last successful authentication.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_SO_PIN_FINAL_TRY">
            <summary>
            True if supplying an incorrect SO PIN will it to become locked.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_SO_PIN_LOCKED">
            <summary>
            True if the SO PIN has been locked. User login to the token is not possible.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_SO_PIN_TO_BE_CHANGED">
            <summary>
            True if the SO PIN value is the default value set by token initialization or manufacturing, or the PIN has been expired by the card.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_RW_SESSION">
            <summary>
            True if the session is read/write; false if the session is read-only
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_SERIAL_SESSION">
            <summary>
            This flag is provided for backward compatibility, and should always be set to true
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_ARRAY_ATTRIBUTE">
            <summary>
            Identifies attribute whose value is an array of attributes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_HW">
            <summary>
            True if the mechanism is performed by the device; false if the mechanism is performed in software
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_ENCRYPT">
            <summary>
            True if the mechanism can be used with C_EncryptInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_DECRYPT">
            <summary>
            True if the mechanism can be used with C_DecryptInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_DIGEST">
            <summary>
            True if the mechanism can be used with C_DigestInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_SIGN">
            <summary>
            True if the mechanism can be used with C_SignInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_SIGN_RECOVER">
            <summary>
            True if the mechanism can be used with C_SignRecoverInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_VERIFY">
            <summary>
            True if the mechanism can be used with C_VerifyInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_VERIFY_RECOVER">
            <summary>
            True if the mechanism can be used with C_VerifyRecoverInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_GENERATE">
            <summary>
            True if the mechanism can be used with C_GenerateKey
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_GENERATE_KEY_PAIR">
            <summary>
            True if the mechanism can be used with C_GenerateKeyPair
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_WRAP">
            <summary>
            True if the mechanism can be used with C_WrapKey
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_UNWRAP">
            <summary>
            True if the mechanism can be used with C_UnwrapKey
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_DERIVE">
            <summary>
            True if the mechanism can be used with C_DeriveKey
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_EC_F_P">
            <summary>
            True if the mechanism can be used with EC domain parameters over Fp
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_EC_F_2M">
            <summary>
            True if the mechanism can be used with EC domain parameters over F2m
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_EC_ECPARAMETERS">
            <summary>
            True if the mechanism can be used with EC domain parameters of the choice ecParameters
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_EC_NAMEDCURVE">
            <summary>
            True if the mechanism can be used with EC domain parameters of the choice namedCurve
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_EC_UNCOMPRESS">
            <summary>
            True if the mechanism can be used with elliptic curve point uncompressed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_EC_COMPRESS">
            <summary>
            True if the mechanism can be used with elliptic curve point compressed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_EXTENSION">
            <summary>
            True if there is an extension to the flags; false if no extensions
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_LIBRARY_CANT_CREATE_OS_THREADS">
            <summary>
            True if application threads which are executing calls to the library may not use native operating system calls to spawn new threads; false if they may
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_OS_LOCKING_OK">
            <summary>
            True if the library can use the native operation system threading model for locking; false otherwise
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_DONT_BLOCK">
            <summary>
            Flag indicating that C_WaitForSlotEvent should not block until an event occurs - it should return immediately instead
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_NEXT_OTP">
            <summary>
            True if the OTP computation shall be for the next OTP, rather than the current one
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_EXCLUDE_TIME">
            <summary>
            True if the OTP computation must not include a time value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_EXCLUDE_COUNTER">
            <summary>
            True if the OTP computation must not include a counter value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_EXCLUDE_CHALLENGE">
            <summary>
            True if the OTP computation must not include a challenge
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_EXCLUDE_PIN">
            <summary>
            True if the OTP computation must not include a PIN value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKF.CKF_USER_FRIENDLY_OTP">
            <summary>
            True if the OTP returned shall be in a form suitable for human consumption
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.CKG">
            <summary>
            Mask generation functions
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKG.CKG_MGF1_SHA1">
            <summary>
            PKCS #1 Mask Generation Function with SHA-1 digest algorithm
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKG.CKG_MGF1_SHA256">
            <summary>
            PKCS #1 Mask Generation Function with SHA-256 digest algorithm
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKG.CKG_MGF1_SHA384">
            <summary>
            PKCS #1 Mask Generation Function with SHA-384 digest algorithm
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKG.CKG_MGF1_SHA512">
            <summary>
            PKCS #1 Mask Generation Function with SHA-512 digest algorithm
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKG.CKG_MGF1_SHA224">
            <summary>
            PKCS #1 Mask Generation Function with SHA-224 digest algorithm
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.CKH">
            <summary>
            Hardware feature types
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKH.CKH_MONOTONIC_COUNTER">
            <summary>
            Monotonic counter objects represent hardware counters that exist on the device.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKH.CKH_CLOCK">
            <summary>
            Clock objects represent real-time clocks that exist on the device.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKH.CKH_USER_INTERFACE">
            <summary>
            User interface objects represent the presentation capabilities of the device.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKH.CKH_VENDOR_DEFINED">
            <summary>
            Permanently reserved for token vendors.
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.CKK">
            <summary>
            Key types
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_RSA">
            <summary>
            RSA key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_DSA">
            <summary>
            DSA key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_DH">
            <summary>
            DH (Diffie-Hellman) key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_ECDSA">
            <summary>
            EC (Elliptic Curve) key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_EC">
            <summary>
            EC (Elliptic Curve) key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_X9_42_DH">
            <summary>
            X9.42 Diffie-Hellman public keys
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_KEA">
            <summary>
            KEA keys
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_GENERIC_SECRET">
            <summary>
            Generic secret key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_RC2">
            <summary>
            RC2 key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_RC4">
            <summary>
            RC4 key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_DES">
            <summary>
            Single-length DES key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_DES2">
            <summary>
            Double-length DES key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_DES3">
            <summary>
            Triple-length DES key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_CAST">
            <summary>
            CAST key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_CAST3">
            <summary>
            CAST3 key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_CAST5">
            <summary>
            CAST128 key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_CAST128">
            <summary>
            CAST128 key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_RC5">
            <summary>
            RC5 key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_IDEA">
            <summary>
            IDEA key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_SKIPJACK">
            <summary>
            Single-length MEK or a TEK
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_BATON">
            <summary>
            Single-length BATON key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_JUNIPER">
            <summary>
            Single-length JUNIPER key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_CDMF">
            <summary>
            Single-length CDMF key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_AES">
            <summary>
            AES key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_BLOWFISH">
            <summary>
            Blowfish key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_TWOFISH">
            <summary>
            Twofish key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_SECURID">
            <summary>
            RSA SecurID secret key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_HOTP">
            <summary>
            Generic secret key and associated counter value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_ACTI">
            <summary>
            ActivIdentity ACTI secret key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_CAMELLIA">
            <summary>
            Camellia key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_ARIA">
            <summary>
            ARIA key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKK.CKK_VENDOR_DEFINED">
            <summary>
            Permanently reserved for token vendors
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.CKM">
            <summary>
            Mechanism type
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RSA_PKCS_KEY_PAIR_GEN">
            <summary>
            Key pair generation mechanism based on the RSA public-key cryptosystem, as defined in PKCS #1
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RSA_PKCS">
            <summary>
            Multi-purpose mechanism based on the RSA public-key cryptosystem and the block formats initially defined in PKCS #1 v1.5.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RSA_9796">
            <summary>
            Mechanism for single-part signatures and verification with and without message recovery based on the RSA public-key cryptosystem and the block formats defined in ISO/IEC 9796 and its annex A
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RSA_X_509">
            <summary>
            Multi-purpose mechanism based on the RSA public-key cryptosystem ("raw" RSA, as assumed in X.509)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_MD2_RSA_PKCS">
            <summary>
            The PKCS #1 v1.5 RSA signature with MD2 mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_MD5_RSA_PKCS">
            <summary>
            The PKCS #1 v1.5 RSA signature with MD5 mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA1_RSA_PKCS">
            <summary>
            The PKCS #1 v1.5 RSA signature with SHA-1 mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RIPEMD128_RSA_PKCS">
            <summary>
            The PKCS #1 v1.5 RSA signature with RIPEMD-128
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RIPEMD160_RSA_PKCS">
            <summary>
            The PKCS #1 v1.5 RSA signature with RIPEMD-160
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RSA_PKCS_OAEP">
            <summary>
            The PKCS #1 RSA OAEP mechanism based on the RSA public-key cryptosystem and the OAEP block format defined in PKCS #1
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RSA_X9_31_KEY_PAIR_GEN">
            <summary>
            The X9.31 RSA key pair generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RSA_X9_31">
            <summary>
            The ANSI X9.31 RSA mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA1_RSA_X9_31">
            <summary>
            The ANSI X9.31 RSA signature with SHA-1 mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RSA_PKCS_PSS">
            <summary>
            The PKCS #1 RSA PSS mechanism based on the RSA public-key cryptosystem and the PSS block format defined in PKCS#1
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA1_RSA_PKCS_PSS">
            <summary>
            The PKCS #1 RSA PSS signature with SHA-1 mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DSA_KEY_PAIR_GEN">
            <summary>
            The DSA key pair generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DSA">
            <summary>
            The DSA without hashing mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DSA_SHA1">
            <summary>
            The DSA with SHA-1 mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DH_PKCS_KEY_PAIR_GEN">
            <summary>
            The PKCS #3 Diffie-Hellman key pair generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DH_PKCS_DERIVE">
            <summary>
            The PKCS #3 Diffie-Hellman key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_X9_42_DH_KEY_PAIR_GEN">
            <summary>
            The X9.42 Diffie-Hellman key pair generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_X9_42_DH_DERIVE">
            <summary>
            The X9.42 Diffie-Hellman key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_X9_42_DH_HYBRID_DERIVE">
            <summary>
            The X9.42 Diffie-Hellman hybrid key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_X9_42_MQV_DERIVE">
            <summary>
            The X9.42 Diffie-Hellman Menezes-Qu-Vanstone (MQV) key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA256_RSA_PKCS">
            <summary>
            PKCS #1 v1.5 RSA signature with SHA-256 mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA384_RSA_PKCS">
            <summary>
            PKCS #1 v1.5 RSA signature with SHA-384 mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA512_RSA_PKCS">
            <summary>
            PKCS #1 v1.5 RSA signature with SHA-512 mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA256_RSA_PKCS_PSS">
            <summary>
            The PKCS #1 RSA PSS signature with SHA-256 mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA384_RSA_PKCS_PSS">
            <summary>
            The PKCS #1 RSA PSS signature with SHA-384 mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA512_RSA_PKCS_PSS">
            <summary>
            The PKCS #1 RSA PSS signature with SHA-512 mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA224_RSA_PKCS">
            <summary>
            The PKCS #1 v1.5 RSA signature with SHA-224 mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA224_RSA_PKCS_PSS">
            <summary>
            The PKCS #1 RSA PSS signature with SHA-224 mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RC2_KEY_GEN">
            <summary>
            The RC2 key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RC2_ECB">
            <summary>
            RC2-ECB encryption mechanism with electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RC2_CBC">
            <summary>
            RC2-CBC encryption mechanism with cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RC2_MAC">
            <summary>
            Special case of general-length RC2-MAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RC2_MAC_GENERAL">
            <summary>
            General-length RC2-MAC mechanism based on data authentication as defined in FIPS PUB 113
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RC2_CBC_PAD">
            <summary>
            RC2-CBC encryption mechanism with cipher-block chaining mode (CBC) and PKCS#7 padding
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RC4_KEY_GEN">
            <summary>
            The RC4 key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RC4">
            <summary>
            RC4 encryption mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES_KEY_GEN">
            <summary>
            Single-length DES key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES_ECB">
            <summary>
            DES-ECB encryption mechanism with electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES_CBC">
            <summary>
            DES-CBC encryption mechanism with cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES_MAC">
            <summary>
            Special case of general-length DES-MAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES_MAC_GENERAL">
            <summary>
            General-length DES-MAC mechanism based on data authentication as defined in FIPS PUB 113
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES_CBC_PAD">
            <summary>
            DES-CBC encryption mechanism with cipher-block chaining mode (CBC) and PKCS#7 padding
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES2_KEY_GEN">
            <summary>
            Double-length DES key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES3_KEY_GEN">
            <summary>
            Triple-length DES key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES3_ECB">
            <summary>
            DES3-ECB encryption mechanism with electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES3_CBC">
            <summary>
            DES3-CBC encryption mechanism with cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES3_MAC">
            <summary>
            Special case of general-length DES3-MAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES3_MAC_GENERAL">
            <summary>
            General-length DES3-MAC mechanism based on data authentication as defined in FIPS PUB 113
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES3_CBC_PAD">
            <summary>
            DES3-CBC encryption mechanism with cipher-block chaining mode (CBC) and PKCS#7 padding
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CDMF_KEY_GEN">
            <summary>
            Single-length CDMF key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CDMF_ECB">
            <summary>
            CDMF-ECB encryption mechanism with electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CDMF_CBC">
            <summary>
            CDMF-CBC encryption mechanism with cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CDMF_MAC">
            <summary>
            Special case of general-length CDMF-MAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CDMF_MAC_GENERAL">
            <summary>
            General-length CDMF-MAC mechanism based on data authentication as defined in FIPS PUB 113
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CDMF_CBC_PAD">
            <summary>
            CDMF-CBC encryption mechanism with cipher-block chaining mode (CBC) and PKCS#7 padding
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES_OFB64">
            <summary>
            DES-OFB64 encryption mechanism with output feedback mode (OFB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES_OFB8">
            <summary>
            DES-OFB8 encryption mechanism with output feedback mode (OFB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES_CFB64">
            <summary>
            DES-CFB64 encryption mechanism with cipher feedback mode (CFB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES_CFB8">
            <summary>
            DES-CFB8 encryption mechanism with cipher feedback mode (CFB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_MD2">
            <summary>
            The MD2 digesting mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_MD2_HMAC">
            <summary>
            Special case of the general-length MD2-HMAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_MD2_HMAC_GENERAL">
            <summary>
            The general-length MD2-HMAC mechanism that uses the HMAC construction, based on the MD2 hash function
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_MD5">
            <summary>
            The MD5 digesting mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_MD5_HMAC">
            <summary>
            Special case of the general-length MD5-HMAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_MD5_HMAC_GENERAL">
            <summary>
            The general-length MD5-HMAC mechanism that uses the HMAC construction, based on the MD5 hash function
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA_1">
            <summary>
            The SHA-1 digesting mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA_1_HMAC">
            <summary>
            Special case of the general-length SHA1-HMAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA_1_HMAC_GENERAL">
            <summary>
            The general-length SHA1-HMAC mechanism that uses the HMAC construction, based on the SHA1 hash function
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RIPEMD128">
            <summary>
            The RIPE-MD 128 digesting mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RIPEMD128_HMAC">
            <summary>
            Special case of the general-length RIPE-MD 128-HMAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RIPEMD128_HMAC_GENERAL">
            <summary>
            The general-length RIPE-MD 128-HMAC mechanism that uses the HMAC construction, based on the RIPE-MD 128 hash function
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RIPEMD160">
            <summary>
            The RIPE-MD 160 digesting mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RIPEMD160_HMAC">
            <summary>
            Special case of the general-length RIPE-MD 160-HMAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RIPEMD160_HMAC_GENERAL">
            <summary>
            The general-length RIPE-MD 160-HMAC mechanism that uses the HMAC construction, based on the RIPE-MD 160 hash function
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA256">
            <summary>
            The SHA-256 digesting mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA256_HMAC">
            <summary>
            Special case of the general-length SHA-256-HMAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA256_HMAC_GENERAL">
            <summary>
            The general-length SHA-256-HMAC mechanism that uses the HMAC construction, based on the SHA-256 hash function
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA224">
            <summary>
            The SHA-224 digesting mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA224_HMAC">
            <summary>
            Special case of the general-length SHA-224-HMAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA224_HMAC_GENERAL">
            <summary>
            The general-length SHA-224-HMAC mechanism that uses the HMAC construction, based on the SHA-224 hash function
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA384">
            <summary>
            The SHA-384 digesting mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA384_HMAC">
            <summary>
            Special case of the general-length SHA-384-HMAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA384_HMAC_GENERAL">
            <summary>
            The general-length SHA-384-HMAC mechanism that uses the HMAC construction, based on the SHA-384 hash function
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA512">
            <summary>
            The SHA-512 digesting mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA512_HMAC">
            <summary>
            Special case of the general-length SHA-512-HMAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA512_HMAC_GENERAL">
            <summary>
            The general-length SHA-512-HMAC mechanism that uses the HMAC construction, based on the SHA-512 hash function
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SECURID_KEY_GEN">
            <summary>
            Key generation mechanism for the RSA SecurID algorithm
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SECURID">
            <summary>
            Mechanism for the retrieval and verification of RSA SecurID OTP values
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_HOTP_KEY_GEN">
            <summary>
            Key generation mechanism for the HOTP algorithm
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_HOTP">
            <summary>
            Mechanism for the retrieval and verification of HOTP OTP values
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_ACTI">
            <summary>
            Mechanism for the retrieval and verification of ACTI OTP values
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_ACTI_KEY_GEN">
            <summary>
            Key generation mechanism for the ACTI algorithm
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST_KEY_GEN">
            <summary>
            CAST key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST_ECB">
            <summary>
            CAST-ECB encryption mechanism with electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST_CBC">
            <summary>
            CAST-CBC encryption mechanism with cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST_MAC">
            <summary>
            Special case of general-length CAST-MAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST_MAC_GENERAL">
            <summary>
            General-length CAST-MAC mechanism based on data authentication as defined in FIPS PUB 113
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST_CBC_PAD">
            <summary>
            CAST-CBC encryption mechanism with cipher-block chaining mode (CBC) and PKCS#7 padding
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST3_KEY_GEN">
            <summary>
            CAST3 key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST3_ECB">
            <summary>
            CAST3-ECB encryption mechanism with electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST3_CBC">
            <summary>
            CAST3-CBC encryption mechanism with cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST3_MAC">
            <summary>
            Special case of general-length CAST3-MAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST3_MAC_GENERAL">
            <summary>
            General-length CAST3-MAC mechanism based on data authentication as defined in FIPS PUB 113
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST3_CBC_PAD">
            <summary>
            CAST3-CBC encryption mechanism with cipher-block chaining mode (CBC) and PKCS#7 padding
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST5_KEY_GEN">
            <summary>
            CAST128 key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST128_KEY_GEN">
            <summary>
            CAST128 key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST5_ECB">
            <summary>
            CAST128-ECB encryption mechanism with electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST128_ECB">
            <summary>
            CAST128-ECB encryption mechanism with electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST5_CBC">
            <summary>
            CAST128-CBC encryption mechanism with cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST128_CBC">
            <summary>
            CAST128-CBC encryption mechanism with cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST5_MAC">
            <summary>
            Special case of general-length CAST128-MAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST128_MAC">
            <summary>
            Special case of general-length CAST128-MAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST5_MAC_GENERAL">
            <summary>
            General-length CAST128-MAC mechanism based on data authentication as defined in FIPS PUB 113
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST128_MAC_GENERAL">
            <summary>
            General-length CAST128-MAC mechanism based on data authentication as defined in FIPS PUB 113
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST5_CBC_PAD">
            <summary>
            CAST128-CBC encryption mechanism with cipher-block chaining mode (CBC) and PKCS#7 padding
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAST128_CBC_PAD">
            <summary>
            CAST128-CBC encryption mechanism with cipher-block chaining mode (CBC) and PKCS#7 padding
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RC5_KEY_GEN">
            <summary>
            RC5 key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RC5_ECB">
            <summary>
            RC5-ECB encryption mechanism with electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RC5_CBC">
            <summary>
            RC5-CBC encryption mechanism with cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RC5_MAC">
            <summary>
            Special case of general-length RC5-MAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RC5_MAC_GENERAL">
            <summary>
            General-length RC5-MAC mechanism based on data authentication as defined in FIPS PUB 113
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_RC5_CBC_PAD">
            <summary>
            RC5-CBC encryption mechanism with cipher-block chaining mode (CBC) and PKCS#7 padding
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_IDEA_KEY_GEN">
            <summary>
            IDEA key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_IDEA_ECB">
            <summary>
            IDEA-ECB encryption mechanism with electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_IDEA_CBC">
            <summary>
            IDEA-CBC encryption mechanism with cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_IDEA_MAC">
            <summary>
            Special case of general-length IDEA-MAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_IDEA_MAC_GENERAL">
            <summary>
            General-length IDEA-MAC mechanism based on data authentication as defined in FIPS PUB 113
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_IDEA_CBC_PAD">
            <summary>
            IDEA-CBC encryption mechanism with cipher-block chaining mode (CBC) and PKCS#7 padding
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_GENERIC_SECRET_KEY_GEN">
            <summary>
            The generic secret key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CONCATENATE_BASE_AND_KEY">
            <summary>
            Key derivation mechanism that derives a secret key from the concatenation of two existing secret keys
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CONCATENATE_BASE_AND_DATA">
            <summary>
            Key derivation mechanism that derives a secret key by concatenating data onto the end of a specified secret key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CONCATENATE_DATA_AND_BASE">
            <summary>
            Key derivation mechanism that derives a secret key by prepending data to the start of a specified secret key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_XOR_BASE_AND_DATA">
            <summary>
            Key derivation mechanism that
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_EXTRACT_KEY_FROM_KEY">
            <summary>
            Mechanism which provides the capability of creating one secret key from the bits of another secret key
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SSL3_PRE_MASTER_KEY_GEN">
            <summary>
            Mechanism for pre_master key generation in SSL 3.0
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SSL3_MASTER_KEY_DERIVE">
            <summary>
            Mechanism for master key derivation in SSL 3.0
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SSL3_KEY_AND_MAC_DERIVE">
            <summary>
            Mechanism for key, MAC and IV derivation in SSL 3.0
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SSL3_MASTER_KEY_DERIVE_DH">
            <summary>
            Mechanism for master key derivation for Diffie-Hellman in SSL 3.0
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_TLS_PRE_MASTER_KEY_GEN">
            <summary>
            Mechanism for pre-master key generation in TLS 1.0,
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_TLS_MASTER_KEY_DERIVE">
            <summary>
            Mechanism for master key derivation in TLS 1.0
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_TLS_KEY_AND_MAC_DERIVE">
            <summary>
            Mechanism for key, MAC and IV derivation in TLS 1.0
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_TLS_MASTER_KEY_DERIVE_DH">
            <summary>
            Mechanism for master key derivation for Diffie-Hellman in TLS 1.0
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_TLS_PRF">
            <summary>
            PRF (pseudo random function) in TLS
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SSL3_MD5_MAC">
            <summary>
            Mechanism for MD5 MACing in SSL3.0
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SSL3_SHA1_MAC">
            <summary>
            Mechanism for SHA-1 MACing in SSL3.0
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_MD5_KEY_DERIVATION">
            <summary>
            MD5 key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_MD2_KEY_DERIVATION">
            <summary>
            MD2 key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA1_KEY_DERIVATION">
            <summary>
            SHA-1 key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA256_KEY_DERIVATION">
            <summary>
            SHA-256 key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA384_KEY_DERIVATION">
            <summary>
            SHA-384 key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA512_KEY_DERIVATION">
            <summary>
            SHA-512 key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SHA224_KEY_DERIVATION">
            <summary>
            SHA-224 key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_PBE_MD2_DES_CBC">
            <summary>
            MD2-PBE for DES-CBC mechanism used for generating a DES secret key and an IV from a password and a salt value by using the MD2 digest algorithm and an iteration count. This functionality is defined in PKCS#5 as PBKDF1.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_PBE_MD5_DES_CBC">
            <summary>
            MD5-PBE for DES-CBC mechanism used for generating a DES secret key and an IV from a password and a salt value by using the MD5 digest algorithm and an iteration count. This functionality is defined in PKCS#5 as PBKDF1.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_PBE_MD5_CAST_CBC">
            <summary>
            MD5-PBE for CAST-CBC mechanism used for generating a CAST secret key and an IV from a password and a salt value by using the MD5 digest algorithm and an iteration count.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_PBE_MD5_CAST3_CBC">
            <summary>
            MD5-PBE for CAST3-CBC mechanism used for generating a CAST3 secret key and an IV from a password and a salt value by using the MD5 digest algorithm and an iteration count.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_PBE_MD5_CAST5_CBC">
            <summary>
            MD5-PBE for CAST128-CBC (CAST5-CBC) mechanism used for generating a CAST128 (CAST5) secret key and an IV from a password and a salt value by using the MD5 digest algorithm and an iteration count.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_PBE_MD5_CAST128_CBC">
            <summary>
            MD5-PBE for CAST128-CBC mechanism used for generating a CAST128 secret key and an IV from a password and a salt value by using the MD5 digest algorithm and an iteration count.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_PBE_SHA1_CAST5_CBC">
            <summary>
            SHA-1-PBE for CAST128-CBC (CAST5-CBC) mechanism used for generating a CAST128 (CAST5) secret key and an IV from a password and a salt value by using the SHA-1 digest algorithm and an iteration count.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_PBE_SHA1_CAST128_CBC">
            <summary>
            SHA-1-PBE for CAST128-CBC mechanism used for generating a CAST128 secret key and an IV from a password and a salt value by using the SHA-1 digest algorithm and an iteration count.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_PBE_SHA1_RC4_128">
            <summary>
            SHA-1-PBE for 128-bit RC4 mechanism used for generating a 128-bit RC4 secret key from a password and a salt value by using the SHA-1 digest algorithm and an iteration count.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_PBE_SHA1_RC4_40">
            <summary>
            SHA-1-PBE for 40-bit RC4 mechanism used for generating a 40-bit RC4 secret key from a password and a salt value by using the SHA-1 digest algorithm and an iteration count.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_PBE_SHA1_DES3_EDE_CBC">
            <summary>
            SHA-1-PBE for 3-key triple-DES-CBC mechanism used for generating a 3-key triple-DES secret key and IV from a password and a salt value by using the SHA-1 digest algorithm and an iteration count.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_PBE_SHA1_DES2_EDE_CBC">
            <summary>
            SHA-1-PBE for 2-key triple-DES-CBC mechanism used for generating a 2-key triple-DES secret key and IV from a password and a salt value by using the SHA-1 digest algorithm and an iteration count.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_PBE_SHA1_RC2_128_CBC">
            <summary>
            SHA-1-PBE for 128-bit RC2-CBC mechanism used for generating a 128-bit RC2 secret key and IV from a password and a salt value by using the SHA-1 digest algorithm and an iteration count.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_PBE_SHA1_RC2_40_CBC">
            <summary>
            SHA-1-PBE for 40-bit RC2-CBC mechanism used for generating a 40-bit RC2 secret key and IV from a password and a salt value by using the SHA-1 digest algorithm and an iteration count.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_PKCS5_PBKD2">
            <summary>
            PKCS #5 PBKDF2 key generation mechanism used for generating a secret key from a password and a salt value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_PBA_SHA1_WITH_SHA1_HMAC">
            <summary>
            SHA-1-PBA for SHA-1-HMAC mechanism used for generating a 160-bit generic secret key from a password and a salt value by using the SHA-1 digest algorithm and an iteration count
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_WTLS_PRE_MASTER_KEY_GEN">
            <summary>
            Mechanism for pre-master secret key generation for the RSA key exchange suite in WTLS
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_WTLS_MASTER_KEY_DERIVE">
            <summary>
            Mechanism for master secret derivation in WTLS
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_WTLS_MASTER_KEY_DERIVE_DH_ECC">
            <summary>
            Mechanism for master secret derivation for Diffie-Hellman and Elliptic Curve Cryptography in WTLS
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_WTLS_PRF">
            <summary>
            PRF (pseudo random function) in WTLS
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE">
            <summary>
            Mechanism for server key, MAC and IV derivation in WTLS
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE">
            <summary>
            Mechanism for client key, MAC and IV derivation in WTLS
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_KEY_WRAP_LYNKS">
            <summary>
            The LYNKS key wrapping mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_KEY_WRAP_SET_OAEP">
            <summary>
            The OAEP key wrapping for SET mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CMS_SIG">
            <summary>
            The CMS mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_KIP_DERIVE">
            <summary>
            The CT-KIP key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_KIP_WRAP">
            <summary>
            The CT-KIP key wrap and unwrap mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_KIP_MAC">
            <summary>
            The CT-KIP signature (MAC) mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAMELLIA_KEY_GEN">
            <summary>
            The Camellia key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAMELLIA_ECB">
            <summary>
            Camellia-ECB encryption mechanism with electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAMELLIA_CBC">
            <summary>
            Camellia-CBC encryption mechanism with cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAMELLIA_MAC">
            <summary>
            Special case of general-length Camellia-MAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAMELLIA_MAC_GENERAL">
            <summary>
            General-length Camellia-MAC mechanism based on data authentication as defined in FIPS PUB 113
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAMELLIA_CBC_PAD">
            <summary>
            Camellia-CBC encryption mechanism with cipher-block chaining mode (CBC) and PKCS#7 padding
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAMELLIA_ECB_ENCRYPT_DATA">
            <summary>
            Key derivation mechanism based on Camellia-ECB encryption mechanism with electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAMELLIA_CBC_ENCRYPT_DATA">
            <summary>
            Key derivation mechanism based on Camellia-CBC encryption mechanism with cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_CAMELLIA_CTR">
            <summary>
            Camellia-CTR mechanism for encryption and decryption with CAMELLIA in counter mode
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_ARIA_KEY_GEN">
            <summary>
            The ARIA key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_ARIA_ECB">
            <summary>
            ARIA-ECB encryption mechanism with electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_ARIA_CBC">
            <summary>
            ARIA-CBC encryption mechanism with cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_ARIA_MAC">
            <summary>
            Special case of general-length ARIA-MAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_ARIA_MAC_GENERAL">
            <summary>
            General-length ARIA-MAC mechanism based on data authentication as defined in FIPS PUB 113
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_ARIA_CBC_PAD">
            <summary>
            ARIA-CBC encryption mechanism with cipher-block chaining mode (CBC) and PKCS#7 padding
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_ARIA_ECB_ENCRYPT_DATA">
            <summary>
            Key derivation mechanism based on ARIA-ECB encryption mechanism with electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_ARIA_CBC_ENCRYPT_DATA">
            <summary>
            Key derivation mechanism based on ARIA-CBC encryption mechanism with cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SKIPJACK_KEY_GEN">
            <summary>
            The SKIPJACK key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SKIPJACK_ECB64">
            <summary>
            SKIPJACK-ECB64 mechanism for encryption and decryption with SKIPJACK in 64-bit electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SKIPJACK_CBC64">
            <summary>
            SKIPJACK-CBC64 mechanism for encryption and decryption with SKIPJACK in 64-bit cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SKIPJACK_OFB64">
            <summary>
            SKIPJACK-OFB64 mechanism for encryption and decryption with SKIPJACK in 64-bit output feedback mode (OFB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SKIPJACK_CFB64">
            <summary>
            SKIPJACK-CFB64 mechanism for encryption and decryption with SKIPJACK in 64-bit cipher feedback mode (CFB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SKIPJACK_CFB32">
            <summary>
            SKIPJACK-CFB32 mechanism for encryption and decryption with SKIPJACK in 32-bit cipher feedback mode (CFB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SKIPJACK_CFB16">
            <summary>
            SKIPJACK-CFB16 mechanism for encryption and decryption with SKIPJACK in 16-bit cipher feedback mode (CFB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SKIPJACK_CFB8">
            <summary>
            SKIPJACK-CFB8 mechanism for encryption and decryption with SKIPJACK in 8-bit cipher feedback mode (CFB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SKIPJACK_WRAP">
            <summary>
            SKIPJACK mechanism for wrapping and unwrapping of secret keys (MEK)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SKIPJACK_PRIVATE_WRAP">
            <summary>
            Mechanism for wrapping and unwrapping KEA and DSA private keys
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_SKIPJACK_RELAYX">
            <summary>
            Mechanism for "change of wrapping" on a private key which was wrapped with the SKIPJACK-PRIVATE-WRAP mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_KEA_KEY_PAIR_GEN">
            <summary>
            The KEA key pair generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_KEA_KEY_DERIVE">
            <summary>
            The KEA key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_FORTEZZA_TIMESTAMP">
            <summary>
            The FORTEZZA timestamp mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_BATON_KEY_GEN">
            <summary>
            The BATON key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_BATON_ECB128">
            <summary>
            BATON-ECB128 mechanism for encryption and decryption with BATON in 128-bit electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_BATON_ECB96">
            <summary>
            BATON-ECB96 mechanism for encryption and decryption with BATON in 96-bit electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_BATON_CBC128">
            <summary>
            BATON-CBC128 mechanism for encryption and decryption with BATON in 128-bit cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_BATON_COUNTER">
            <summary>
            BATON-COUNTER mechanism encryption and decryption with BATON in counter mode
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_BATON_SHUFFLE">
            <summary>
            BATON-SHUFFLE mechanism for encryption and decryption with BATON in shuffle mode
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_BATON_WRAP">
            <summary>
            BATON mechanism for wrapping and unwrapping of secret keys (MEK)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_ECDSA_KEY_PAIR_GEN">
            <summary>
            The EC (also related to ECDSA) key pair generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_EC_KEY_PAIR_GEN">
            <summary>
            The EC (also related to ECDSA) key pair generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_ECDSA">
            <summary>
            The ECDSA without hashing mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_ECDSA_SHA1">
            <summary>
            The ECDSA with SHA-1 mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_ECDH1_DERIVE">
            <summary>
            The elliptic curve Diffie-Hellman (ECDH) key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_ECDH1_COFACTOR_DERIVE">
            <summary>
            The elliptic curve Diffie-Hellman (ECDH) with cofactor key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_ECMQV_DERIVE">
            <summary>
            The elliptic curve Menezes-Qu-Vanstone (ECMQV) key derivation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_JUNIPER_KEY_GEN">
            <summary>
            The JUNIPER key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_JUNIPER_ECB128">
            <summary>
            JUNIPER-ECB128 mechanism for encryption and decryption with JUNIPER in 128-bit electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_JUNIPER_CBC128">
            <summary>
            JUNIPER-CBC128 mechanism for encryption and decryption with JUNIPER in 128-bit cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_JUNIPER_COUNTER">
            <summary>
            JUNIPER COUNTER mechanism for encryption and decryption with JUNIPER in counter mode
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_JUNIPER_SHUFFLE">
            <summary>
            JUNIPER-SHUFFLE mechanism for encryption and decryption with JUNIPER in shuffle mode
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_JUNIPER_WRAP">
            <summary>
            The JUNIPER wrap and unwrap mechanism used to wrap and unwrap an MEK
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_FASTHASH">
            <summary>
            The FASTHASH digesting mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_AES_KEY_GEN">
            <summary>
            The AES key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_AES_ECB">
            <summary>
            AES-ECB encryption mechanism with electronic codebook mode (ECB)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_AES_CBC">
            <summary>
            AES-CBC encryption mechanism with cipher-block chaining mode (CBC)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_AES_MAC">
            <summary>
            Special case of general-length AES-MAC mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_AES_MAC_GENERAL">
            <summary>
            General-length AES-MAC mechanism based on data authentication as defined in FIPS PUB 113
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_AES_CBC_PAD">
            <summary>
            AES-CBC encryption mechanism with cipher-block chaining mode (CBC) and PKCS#7 padding
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_AES_CTR">
            <summary>
            AES-CTR encryption mechanism with AES in counter mode.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_BLOWFISH_KEY_GEN">
            <summary>
            The Blowfish key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_BLOWFISH_CBC">
            <summary>
            Blowfish-CBC mechanism for encryption and decryption; key wrapping; and key unwrapping
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_TWOFISH_KEY_GEN">
            <summary>
            The Twofish key generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_TWOFISH_CBC">
            <summary>
            Twofish-CBC mechanism for encryption and decryption; key wrapping; and key unwrapping
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES_ECB_ENCRYPT_DATA">
            <summary>
            Key derivation mechanism that uses the result of an DES-ECB encryption operation as the key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES_CBC_ENCRYPT_DATA">
            <summary>
            Key derivation mechanism that uses the result of an DES-CBC encryption operation as the key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES3_ECB_ENCRYPT_DATA">
            <summary>
            Key derivation mechanism that uses the result of an DES3-ECB encryption operation as the key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DES3_CBC_ENCRYPT_DATA">
            <summary>
            Key derivation mechanism that uses the result of an DES3-CBC encryption operation as the key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_AES_ECB_ENCRYPT_DATA">
            <summary>
            Key derivation mechanism that uses the result of an AES-ECB encryption operation as the key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_AES_CBC_ENCRYPT_DATA">
            <summary>
            Key derivation mechanism that uses the result of an AES-CBC encryption operation as the key value
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DSA_PARAMETER_GEN">
            <summary>
            The DSA domain parameter generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_DH_PKCS_PARAMETER_GEN">
            <summary>
            The PKCS #3 Diffie-Hellman domain parameter generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_X9_42_DH_PARAMETER_GEN">
            <summary>
            The X9.42 Diffie-Hellman domain parameter generation mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKM.CKM_VENDOR_DEFINED">
            <summary>
            Permanently reserved for token vendors
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.CKN">
            <summary>
            Notifications
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKN.CKN_SURRENDER">
            <summary>
            Cryptoki is surrendering the execution of a function executing in a session so that the application may perform other operations
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKN.CKN_OTP_CHANGED">
            <summary>
            Cryptoki is informing the application that the OTP for a key on a connected token just changed
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.CKO">
            <summary>
            Object class
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKO.CKO_DATA">
            <summary>
            Data object that holds information defined by an application.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKO.CKO_CERTIFICATE">
            <summary>
            Certificate object that holds public-key or attribute certificates.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKO.CKO_PUBLIC_KEY">
            <summary>
            Public key object that holds public keys.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKO.CKO_PRIVATE_KEY">
            <summary>
            Private key object that holds private keys.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKO.CKO_SECRET_KEY">
            <summary>
            Secret key object that holds secret keys.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKO.CKO_HW_FEATURE">
            <summary>
            Hardware feature object that represent features of the device.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKO.CKO_DOMAIN_PARAMETERS">
            <summary>
            Domain parameter object that holds public domain parameters.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKO.CKO_MECHANISM">
            <summary>
            Mechanism object that provides information about mechanisms supported by a device beyond that given by the CK_MECHANISM_INFO structure.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKO.CKO_OTP_KEY">
            <summary>
            OTP key object that holds secret keys used by OTP tokens.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKO.CKO_VENDOR_DEFINED">
            <summary>
            Reserved for token vendors.
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.CKP">
            <summary>
            Pseudo-random functions
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKP.CKP_PKCS5_PBKD2_HMAC_SHA1">
            <summary>
            PKCS #5 PBKDF2 with HMAC-SHA-1 pseudorandom function
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.CKR">
            <summary>
            Return values
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_OK">
            <summary>
            The function executed successfully
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_CANCEL">
            <summary>
            Cryptoki function aborts and returns CKR_FUNCTION_CANCELED, when CKR_CANCEL is returned by CKN_SURRENDER callback
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_HOST_MEMORY">
            <summary>
            The computer that the Cryptoki library is running on has insufficient memory to perform the requested function
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_SLOT_ID_INVALID">
            <summary>
            The specified slot ID is not valid
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_GENERAL_ERROR">
            <summary>
            Some horrible, unrecoverable error has occurred
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_FUNCTION_FAILED">
            <summary>
            The requested function could not be performed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_ARGUMENTS_BAD">
            <summary>
            Generic error code which indicates that the arguments supplied to the Cryptoki function were in some way not appropriate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_NO_EVENT">
            <summary>
            Returned when C_GetSlotEvent is called in non-blocking mode and there are no new slot events to return
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_NEED_TO_CREATE_THREADS">
            <summary>
            Returned by C_Initialize when application did not allow library to use the native operation system threading model for locking and the library cannot function properly without being able to spawn new threads
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_CANT_LOCK">
            <summary>
            Returned by C_Initialize when the type of locking requested by the application for thread-safety is not available in this library
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_ATTRIBUTE_READ_ONLY">
            <summary>
            An attempt was made to set a value for an attribute which may not be set by the application, or which may not be modified by the application
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_ATTRIBUTE_SENSITIVE">
            <summary>
            An attempt was made to obtain the value of an attribute of an object which cannot be satisfied because the object is either sensitive or unextractable
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_ATTRIBUTE_TYPE_INVALID">
            <summary>
            An invalid attribute type was specified in a template
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_ATTRIBUTE_VALUE_INVALID">
            <summary>
            An invalid value was specified for a particular attribute in a template
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_DATA_INVALID">
            <summary>
            The plaintext input data to a cryptographic operation is invalid
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_DATA_LEN_RANGE">
            <summary>
            The plaintext input data to a cryptographic operation has a bad length
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_DEVICE_ERROR">
            <summary>
            Some problem has occurred with the token and/or slot
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_DEVICE_MEMORY">
            <summary>
            The token does not have sufficient memory to perform the requested function
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_DEVICE_REMOVED">
            <summary>
            The token was removed from its slot during the execution of the function
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_ENCRYPTED_DATA_INVALID">
            <summary>
            The encrypted input to a decryption operation has been determined to be invalid ciphertext
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_ENCRYPTED_DATA_LEN_RANGE">
            <summary>
            The ciphertext input to a decryption operation has been determined to be invalid ciphertext solely on the basis of its length
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_FUNCTION_CANCELED">
            <summary>
            The function was canceled in mid-execution
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_FUNCTION_NOT_PARALLEL">
            <summary>
            There is currently no function executing in parallel in the specified session
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_FUNCTION_NOT_SUPPORTED">
            <summary>
            The requested function is not supported by this Cryptoki library
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_KEY_HANDLE_INVALID">
            <summary>
            The specified key handle is not valid
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_KEY_SIZE_RANGE">
            <summary>
            Size of supplied key is outside the range of supported key sizes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_KEY_TYPE_INCONSISTENT">
            <summary>
            The specified key is not the correct type of key to use with the specified mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_KEY_NOT_NEEDED">
            <summary>
            An extraneous key was supplied to C_SetOperationState
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_KEY_CHANGED">
            <summary>
            One of the keys supplied to C_SetOperationState is not the same key that was being used in the original saved session
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_KEY_NEEDED">
            <summary>
            Session state cannot be restored because C_SetOperationState needs to be supplied with one or more keys that were being used in the original saved session
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_KEY_INDIGESTIBLE">
            <summary>
            Value of the specified key cannot be digested
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_KEY_FUNCTION_NOT_PERMITTED">
            <summary>
            An attempt has been made to use a key for a cryptographic purpose that the key's attributes are not set to allow it to do
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_KEY_NOT_WRAPPABLE">
            <summary>
            Library is unable to wrap the key in the requested way
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_KEY_UNEXTRACTABLE">
            <summary>
            The specified private or secret key can't be wrapped
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_MECHANISM_INVALID">
            <summary>
            An invalid mechanism was specified to the cryptographic operation
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_MECHANISM_PARAM_INVALID">
            <summary>
            Invalid parameters were supplied to the mechanism specified to the cryptographic operation
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_OBJECT_HANDLE_INVALID">
            <summary>
            The specified object handle is not valid
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_OPERATION_ACTIVE">
            <summary>
            There is already an active operation which prevents Cryptoki from activating the specified operation
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_OPERATION_NOT_INITIALIZED">
            <summary>
            There is no active operation of an appropriate type in the specified session
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_PIN_INCORRECT">
            <summary>
            The specified PIN is incorrect
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_PIN_INVALID">
            <summary>
            The specified PIN has invalid characters in it
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_PIN_LEN_RANGE">
            <summary>
            The specified PIN is too long or too short
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_PIN_EXPIRED">
            <summary>
            The specified PIN has expired
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_PIN_LOCKED">
            <summary>
            The specified PIN is locked and cannot be used
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_SESSION_CLOSED">
            <summary>
            The session was closed during the execution of the function
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_SESSION_COUNT">
            <summary>
            Attempt to open a session failed because the token has too many sessions already open
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_SESSION_HANDLE_INVALID">
            <summary>
            The specified session handle was invalid at the time that the function was invoked
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_SESSION_PARALLEL_NOT_SUPPORTED">
            <summary>
            The specified token does not support parallel sessions
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_SESSION_READ_ONLY">
            <summary>
            The specified session was unable to accomplish the desired action because it is a read-only session
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_SESSION_EXISTS">
            <summary>
            Returned by C_InitToken when session with the token is open that prevents the token initialization
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_SESSION_READ_ONLY_EXISTS">
            <summary>
            A read-only session already exists, and so the SO cannot be logged in
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_SESSION_READ_WRITE_SO_EXISTS">
            <summary>
            A read/write SO session already exists, and so a read-only session cannot be opened
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_SIGNATURE_INVALID">
            <summary>
            The provided signature/MAC is invalid
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_SIGNATURE_LEN_RANGE">
            <summary>
            The provided signature/MAC can be seen to be invalid solely on the basis of its length
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_TEMPLATE_INCOMPLETE">
            <summary>
            The template specified for creating an object is incomplete, and lacks some necessary attributes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_TEMPLATE_INCONSISTENT">
            <summary>
            The template specified for creating an object has conflicting attributes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_TOKEN_NOT_PRESENT">
            <summary>
            The token was not present in its slot at the time that the function was invoked
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_TOKEN_NOT_RECOGNIZED">
            <summary>
            The Cryptoki library and/or slot does not recognize the token in the slot
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_TOKEN_WRITE_PROTECTED">
            <summary>
            The requested action could not be performed because the token is write-protected
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_UNWRAPPING_KEY_HANDLE_INVALID">
            <summary>
            Key handle specified to be used to unwrap another key is not valid
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_UNWRAPPING_KEY_SIZE_RANGE">
            <summary>
            Unwrapping opration cannot be carried out because the supplied key's size is outside the range of supported key sizes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT">
            <summary>
            Type of the key specified to unwrap another key is not consistent with the mechanism specified for unwrapping
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_USER_ALREADY_LOGGED_IN">
            <summary>
            User cannot be logged into the session because it is already logged into the session
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_USER_NOT_LOGGED_IN">
            <summary>
            The desired action cannot be performed because the appropriate user is not logged in
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_USER_PIN_NOT_INITIALIZED">
            <summary>
            Normal user's PIN has not yet been initialized
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_USER_TYPE_INVALID">
            <summary>
            Invalid user type specified
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_USER_ANOTHER_ALREADY_LOGGED_IN">
            <summary>
            User cannot be logged into the session because another user is already logged into the session
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_USER_TOO_MANY_TYPES">
            <summary>
            An attempt was made to have more distinct users simultaneously logged into the token than the token and/or library permits
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_WRAPPED_KEY_INVALID">
            <summary>
            Provided wrapped key is not valid
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_WRAPPED_KEY_LEN_RANGE">
            <summary>
            Provided wrapped key can be seen to be invalid solely on the basis of its length
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_WRAPPING_KEY_HANDLE_INVALID">
            <summary>
            Key handle specified to be used to wrap another key is not valid
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_WRAPPING_KEY_SIZE_RANGE">
            <summary>
            Wrapping operation cannot be carried out because the supplied wrapping key's size is outside the range of supported key sizes
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_WRAPPING_KEY_TYPE_INCONSISTENT">
            <summary>
            Type of the key specified to wrap another key is not consistent with the mechanism specified for wrapping
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_RANDOM_SEED_NOT_SUPPORTED">
            <summary>
            Token's random number generator does not accept seeding from an application
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_RANDOM_NO_RNG">
            <summary>
            Token doesn't have a random number generator
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_DOMAIN_PARAMS_INVALID">
            <summary>
            Invalid or unsupported domain parameters were supplied to the function
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_BUFFER_TOO_SMALL">
            <summary>
            The output of the function is too large to fit in the supplied buffer
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_SAVED_STATE_INVALID">
            <summary>
            Supplied saved cryptographic operations state is invalid, and so it cannot be restored to the specified session
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_INFORMATION_SENSITIVE">
            <summary>
            The information requested could not be obtained because the token considers it sensitive, and is not able or willing to reveal it
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_STATE_UNSAVEABLE">
            <summary>
            The cryptographic operations state of the specified session cannot be saved
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_CRYPTOKI_NOT_INITIALIZED">
            <summary>
            Function cannot be executed because the Cryptoki library has not yet been initialized
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_CRYPTOKI_ALREADY_INITIALIZED">
            <summary>
            Cryptoki library has already been initialized
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_MUTEX_BAD">
            <summary>
            Returned by mutex-handling functions who are passed a bad mutex object as an argument
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_MUTEX_NOT_LOCKED">
            <summary>
            Mutex supplied to the mutex-unlocking function was not locked
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_NEW_PIN_MODE">
            <summary>
            The supplied OTP was not accepted and the library requests a new OTP computed using a new PIN
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_NEXT_OTP">
            <summary>
            The supplied OTP was correct but indicated a larger than normal drift in the token's internal state. Application should provide the next one-time password to the library for verification.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_FUNCTION_REJECTED">
            <summary>
            The signature request is rejected by the user
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKR.CKR_VENDOR_DEFINED">
            <summary>
            Permanently reserved for token vendors
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.CKS">
            <summary>
            Session States
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKS.CKS_RO_PUBLIC_SESSION">
            <summary>
            The application has opened a read-only session. The application has read-only access to public token objects and read/write access to public session objects.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKS.CKS_RO_USER_FUNCTIONS">
            <summary>
            The normal user has been authenticated to the token. The application has read-only access to all token objects (public or private) and read/write access to all session objects (public or private).
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKS.CKS_RW_PUBLIC_SESSION">
            <summary>
            The application has opened a read/write session. The application has read/write access to all public objects.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKS.CKS_RW_USER_FUNCTIONS">
            <summary>
            The normal user has been authenticated to the token. The application has read/write access to all objects.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKS.CKS_RW_SO_FUNCTIONS">
            <summary>
            The Security Officer has been authenticated to the token. The application has read/write access only to public objects on the token, not to private objects. The SO can set the normal user's PIN.
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.CKU">
            <summary>
            Types of Cryptoki users
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKU.CKU_SO">
            <summary>
            Security Officer
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKU.CKU_USER">
            <summary>
            Security Officer
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKU.CKU_CONTEXT_SPECIFIC">
            <summary>
            Context specific
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.CKZ">
            <summary>
            Salt/Encoding parameter sources
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKZ.CKZ_DATA_SPECIFIED">
            <summary>
            PKCS #1 RSA OAEP: Encoding parameter specified
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.Common.CKZ.CKZ_SALT_SPECIFIED">
            <summary>
            PKCS #5 PBKDF2 Key Generation: Salt specified
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.Pkcs11InteropException">
            <summary>
            General purpose exception for Pkcs11Interop project
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.Pkcs11InteropException.#ctor">
            <summary>
            Initializes a new instance of the Pkcs11InteropException class
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.Pkcs11InteropException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Pkcs11InteropException class with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.Pkcs11InteropException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Pkcs11InteropException class with a specified error message and a reference to the inner exception that is the cause of this exception
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.UnmanagedLibrary">
            <summary>
            Utility class that helps to manage unmanaged dynamic libraries
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.UnmanagedLibrary.Load(System.String)">
            <summary>
            Loads the dynamic library
            </summary>
            <param name="fileName">Library filename</param>
            <returns>Dynamic library handle</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.UnmanagedLibrary.Unload(System.IntPtr)">
            <summary>
            Unloads the dynamic library
            </summary>
            <param name="libraryHandle">Dynamic library handle</param>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.UnmanagedLibrary.GetFunctionPointer(System.IntPtr,System.String)">
            <summary>
            Returns function pointer
            </summary>
            <param name="libraryHandle">Dynamic library handle</param>
            <param name="function">Function name</param>
            <returns>The function pointer</returns>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.Pkcs11Exception">
            <summary>
            Exception with the name of PKCS#11 method that failed and its return value
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Pkcs11Exception.#ctor(System.String,Net.Pkcs11Interop.Common.CKR)">
            <summary>
            Initializes new instance of Pkcs11Exception class
            </summary>
            <param name="method">Name of method that caused exception</param>
            <param name="rv">Return value of method that caused exception</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.Pkcs11Exception._method">
            <summary>
            Name of method that caused exception
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.Pkcs11Exception._rv">
            <summary>
            Return value of method that caused exception
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.Pkcs11Exception.Method">
            <summary>
            Name of method that caused exception
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.Pkcs11Exception.RV">
            <summary>
            Return value of method that caused exception
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.LibraryInfo">
            <summary>
            General information about PKCS#11 library (CK_INFO)
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.LibraryInfo.#ctor(Net.Pkcs11Interop.LowLevelAPI.CK_INFO)">
            <summary>
            Converts low level CK_INFO structure to high level LibraryInfo class
            </summary>
            <param name="ck_info">Low level CK_INFO structure</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.LibraryInfo._cryptokiVersion">
            <summary>
            Cryptoki interface version number
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.LibraryInfo._manufacturerId">
            <summary>
            ID of the Cryptoki library manufacturer
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.LibraryInfo._flags">
            <summary>
            Bit flags reserved for future versions
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.LibraryInfo._libraryDescription">
            <summary>
            Description of the library
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.LibraryInfo._libraryVersion">
            <summary>
            Cryptoki library version number
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.LibraryInfo.CryptokiVersion">
            <summary>
            Cryptoki interface version number
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.LibraryInfo.ManufacturerId">
            <summary>
            ID of the Cryptoki library manufacturer
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.LibraryInfo.Flags">
            <summary>
            Bit flags reserved for future versions
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.LibraryInfo.LibraryDescription">
            <summary>
            Description of the library
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.LibraryInfo.LibraryVersion">
            <summary>
            Cryptoki library version number
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.Mechanism">
            <summary>
            Mechanism and its parameters (CK_MECHANISM alternative)
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Mechanism.#ctor(System.UInt32)">
            <summary>
            Creates mechanism of given type with no parameter
            </summary>
            <param name="type">Mechanism type</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Mechanism.#ctor(Net.Pkcs11Interop.Common.CKM)">
            <summary>
            Creates mechanism of given type with no parameter
            </summary>
            <param name="type">Mechanism type</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Mechanism.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Creates mechanism of given type with byte array parameter
            </summary>
            <param name="type">Mechanism type</param>
            <param name="parameter">Mechanism parameter</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Mechanism.#ctor(Net.Pkcs11Interop.Common.CKM,System.Byte[])">
            <summary>
            Creates mechanism of given type with byte array parameter
            </summary>
            <param name="type">Mechanism type</param>
            <param name="parameter">Mechanism parameter</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Mechanism.#ctor(System.UInt32,Net.Pkcs11Interop.HighLevelAPI.IMechanismParams)">
            <summary>
            Creates mechanism of given type with object parameter
            </summary>
            <param name="type">Mechanism type</param>
            <param name="parameter">Mechanism parameter</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Mechanism.#ctor(Net.Pkcs11Interop.Common.CKM,Net.Pkcs11Interop.HighLevelAPI.IMechanismParams)">
            <summary>
            Creates mechanism of given type with object parameter
            </summary>
            <param name="type">Mechanism type</param>
            <param name="parameter">Mechanism parameter</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.Mechanism._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.Mechanism._ckMechanism">
            <summary>
            Low level mechanism structure
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.Mechanism._mechanismParams">
            <summary>
            High level object with mechanism parameters
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.Mechanism.CkMechanism">
            <summary>
            Low level mechanism structure
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.Mechanism.Type">
            <summary>
            The type of mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Mechanism.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Mechanism.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Mechanism.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags">
            <summary>
            Flags specifying mechanism capabilities
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.#ctor(System.UInt32)">
            <summary>
            Initializes new instance of MechanismFlags class
            </summary>
            <param name="flags">Bits flags specifying mechanism capabilities</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags._flags">
            <summary>
            Bits flags specifying mechanism capabilities
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.Flags">
            <summary>
            Bits flags specifying mechanism capabilities
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.Hw">
            <summary>
            True if the mechanism is performed by the device; false if the mechanism is performed in software
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.Encrypt">
            <summary>
            True if the mechanism can be used with C_EncryptInit
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.Decrypt">
            <summary>
            True if the mechanism can be used with C_DecryptInit
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.Digest">
            <summary>
            True if the mechanism can be used with C_DigestInit
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.Sign">
            <summary>
            True if the mechanism can be used with C_SignInit
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.SignRecover">
            <summary>
            True if the mechanism can be used with C_SignRecoverInit
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.Verify">
            <summary>
            True if the mechanism can be used with C_VerifyInit
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.VerifyRecover">
            <summary>
            True if the mechanism can be used with C_VerifyRecoverInit
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.Generate">
            <summary>
            True if the mechanism can be used with C_GenerateKey
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.GenerateKeyPair">
            <summary>
            True if the mechanism can be used with C_GenerateKeyPair
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.Wrap">
            <summary>
            True if the mechanism can be used with C_WrapKey
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.Unwrap">
            <summary>
            True if the mechanism can be used with C_UnwrapKey
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.Derive">
            <summary>
            True if the mechanism can be used with C_DeriveKey
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.Extension">
            <summary>
            True if there is an extension to the flags; false if no extensions.
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.EcFp">
            <summary>
            True if the mechanism can be used with EC domain parameters over Fp
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.EcF2m">
            <summary>
            True if the mechanism can be used with EC domain parameters over F2m
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.EcEcParameters">
            <summary>
            True if the mechanism can be used with EC domain parameters of the choice ecParameters
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.EcNamedCurve">
            <summary>
            True if the mechanism can be used with EC domain parameters of the choice namedCurve
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.EcUncompress">
            <summary>
            True if the mechanism can be used with elliptic curve point uncompressed
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismFlags.EcCompress">
            <summary>
            True if the mechanism can be used with elliptic curve point compressed
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismInfo">
            <summary>
            Provides information about a particular mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismInfo.#ctor(Net.Pkcs11Interop.Common.CKM,Net.Pkcs11Interop.LowLevelAPI.CK_MECHANISM_INFO)">
            <summary>
            Converts low level CK_MECHANISM_INFO structure to high level MechanismInfo class
            </summary>
            <param name="mechanism">Mechanism</param>
            <param name="ck_mechanism_info">Low level CK_MECHANISM_INFO structure</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismInfo._mechanism">
            <summary>
            Mechanism
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismInfo._minKeySize">
            <summary>
            The minimum size of the key for the mechanism (whether this is measured in bits or in bytes is mechanism-dependent)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismInfo._maxKeySize">
            <summary>
            The maximum size of the key for the mechanism (whether this is measured in bits or in bytes is mechanism-dependent)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismInfo._mechanismFlags">
            <summary>
            Flags specifying mechanism capabilities
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismInfo.Mechanism">
            <summary>
            Mechanism
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismInfo.MinKeySize">
            <summary>
            The minimum size of the key for the mechanism (whether this is measured in bits or in bytes is mechanism-dependent)
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismInfo.MaxKeySize">
            <summary>
            The maximum size of the key for the mechanism (whether this is measured in bits or in bytes is mechanism-dependent)
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismInfo.MechanismFlags">
            <summary>
            Flags specifying mechanism capabilities
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute">
            <summary>
            Attribute of cryptoki object (CK_ATTRIBUTE alternative)
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(Net.Pkcs11Interop.LowLevelAPI.CK_ATTRIBUTE)">
            <summary>
            Creates attribute defined by low level CK_ATTRIBUTE structure
            </summary>
            <param name="attribute">CK_ATTRIBUTE structure</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(System.UInt32)">
            <summary>
            Creates attribute of given type with no value
            </summary>
            <param name="type">Attribute type</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(Net.Pkcs11Interop.Common.CKA)">
            <summary>
            Creates attribute of given type with no value
            </summary>
            <param name="type">Attribute type</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates attribute of given type with uint value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(Net.Pkcs11Interop.Common.CKA,System.UInt32)">
            <summary>
            Creates attribute of given type with uint value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(System.UInt32,System.Boolean)">
            <summary>
            Creates attribute of given type with bool value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(Net.Pkcs11Interop.Common.CKA,System.Boolean)">
            <summary>
            Creates attribute of given type with bool value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(System.UInt32,System.String)">
            <summary>
            Creates attribute of given type with string value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(Net.Pkcs11Interop.Common.CKA,System.String)">
            <summary>
            Creates attribute of given type with string value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Creates attribute of given type with byte array value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(Net.Pkcs11Interop.Common.CKA,System.Byte[])">
            <summary>
            Creates attribute of given type with byte array value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(System.UInt32,System.DateTime)">
            <summary>
            Creates attribute of given type with DateTime (CK_DATE) value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(Net.Pkcs11Interop.Common.CKA,System.DateTime)">
            <summary>
            Creates attribute of given type with DateTime (CK_DATE) value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(System.UInt32,System.Collections.Generic.List{Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute})">
            <summary>
            Creates attribute of given type with attribute array value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(Net.Pkcs11Interop.Common.CKA,System.Collections.Generic.List{Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute})">
            <summary>
            Creates attribute of given type with attribute array value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Creates attribute of given type with uint array value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(Net.Pkcs11Interop.Common.CKA,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Creates attribute of given type with uint array value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(System.UInt32,System.Collections.Generic.List{Net.Pkcs11Interop.Common.CKM})">
            <summary>
            Creates attribute of given type with mechanism array value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.#ctor(Net.Pkcs11Interop.Common.CKA,System.Collections.Generic.List{Net.Pkcs11Interop.Common.CKM})">
            <summary>
            Creates attribute of given type with mechanism array value
            </summary>
            <param name="type">Attribute type</param>
            <param name="value">Attribute value</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute._ckAttribute">
            <summary>
            Low level attribute structure
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.CkAttribute">
            <summary>
            Low level attribute structure
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.Type">
            <summary>
            Attribute type
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.CannotBeRead">
            <summary>
            Flag indicating whether attribute value cannot be read either because object is sensitive or unextractable or because specified attribute for the object is invalid.
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.GetValueAsUint">
            <summary>
            Reads value of attribute and returns it as uint
            </summary>
            <returns>Value of attribute</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.GetValueAsBool">
            <summary>
            Reads value of attribute and returns it as bool
            </summary>
            <returns>Value of attribute</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.GetValueAsString">
            <summary>
            Reads value of attribute and returns it as string
            </summary>
            <returns>Value of attribute</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.GetValueAsByteArray">
            <summary>
            Reads value of attribute and returns it as byte array
            </summary>
            <returns>Value of attribute</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.GetValueAsDateTime">
            <summary>
            Reads value of attribute and returns it as DateTime
            </summary>
            <returns>Value of attribute</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.GetValueAsObjectAttributeList">
            <summary>
            Reads value of attribute and returns it as attribute array (CURRENTLY NOT IMPLEMENTED)
            </summary>
            <returns>Value of attribute</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.GetValueAsUintList">
            <summary>
            Reads value of attribute and returns it as list of uints
            </summary>
            <returns>Value of attribute</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.GetValueAsCkmList">
            <summary>
            Reads value of attribute and returns it as list of mechanisms
            </summary>
            <returns>Value of attribute</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.ObjectHandle">
            <summary>
            Token-specific identifier for an object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectHandle.#ctor">
            <summary>
            Initializes new instance of ObjectHandle class with ObjectId set to CK_INVALID_HANDLE
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.ObjectHandle.#ctor(System.UInt32)">
            <summary>
            Initializes new instance of ObjectHandle class
            </summary>
            <param name="objectId">PKCS#11 handle of object</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.ObjectHandle._objectId">
            <summary>
            PKCS#11 handle of object
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.ObjectHandle.ObjectId">
            <summary>
            PKCS#11 handle of object
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.Pkcs11">
            <summary>
            High level PKCS#11 wrapper
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Pkcs11.#ctor(System.String,System.Boolean)">
            <summary>
            Loads and initializes PCKS#11 library
            </summary>
            <param name="libraryPath">Library name or path</param>
            <param name="useOsLocking">Flag indicating whether PKCS#11 library can use the native operation system threading model for locking. Should be set to true in all multithreaded applications.</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Pkcs11.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loads and initializes PCKS#11 library
            </summary>
            <param name="libraryPath">Library name or path</param>
            <param name="useOsLocking">Flag indicating whether PKCS#11 library can use the native operation system threading model for locking. Should be set to true in all multithreaded applications.</param>
            <param name="useGetFunctionList">Flag indicating whether cryptoki function pointers should be acquired via C_GetFunctionList (true) or via platform native function (false)</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.Pkcs11._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.Pkcs11._p11">
            <summary>
            Low level PKCS#11 wrapper
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Pkcs11.GetInfo">
            <summary>
            Gets general information about loaded PKCS#11 library
            </summary>
            <returns>General information about loaded PKCS#11 library</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Pkcs11.GetSlotList(System.Boolean)">
            <summary>
            Obtains a list of slots in the system
            </summary>
            <param name="tokenPresent">Flag indicating whether the list obtained includes only those slots with a token present (true), or all slots (false)</param>
            <returns>List of available slots</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Pkcs11.WaitForSlotEvent(System.Boolean,System.Boolean@,System.UInt32@)">
            <summary>
            Waits for a slot event, such as token insertion or token removal, to occur
            </summary>
            <param name="dontBlock">Flag indicating that method should not block until an event occurs - it should return immediately instead. See PKCS#11 standard for full explanation.</param>
            <param name="eventOccured">Flag indicating whether event occured</param>
            <param name="slotId">PKCS#11 handle of slot that the event occurred in</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Pkcs11.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Pkcs11.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Pkcs11.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.Session">
            <summary>
            Class representing a logical connection between an application and a token
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.#ctor(Net.Pkcs11Interop.LowLevelAPI.Pkcs11,System.UInt32)">
            <summary>
            Initializes new instance of Session class
            </summary>
            <param name="pkcs11">Low level PKCS#11 wrapper</param>
            <param name="sessionId">PKCS#11 handle of session</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.Session._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.Session._p11">
            <summary>
            Low level PKCS#11 wrapper
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.Session._sessionId">
            <summary>
            PKCS#11 handle of session
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.Session.SessionId">
            <summary>
            PKCS#11 handle of session
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.CloseSession">
            <summary>
            Closes a session between an application and a token
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.InitPin(System.String)">
            <summary>
            Initializes the normal user's PIN
            </summary>
            <param name="userPin">Pin value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.InitPin(System.Byte[])">
            <summary>
            Initializes the normal user's PIN
            </summary>
            <param name="userPin">Pin value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.SetPin(System.String,System.String)">
            <summary>
            Modifies the PIN of the user that is currently logged in, or the CKU_USER PIN if the session is not logged in.
            </summary>
            <param name="oldPin">Old PIN value</param>
            <param name="newPin">New PIN value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.SetPin(System.Byte[],System.Byte[])">
            <summary>
            Modifies the PIN of the user that is currently logged in, or the CKU_USER PIN if the session is not logged in.
            </summary>
            <param name="oldPin">Old PIN value</param>
            <param name="newPin">New PIN value</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.GetSessionInfo">
            <summary>
            Obtains information about a session
            </summary>
            <returns>Information about a session</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.GetOperationState">
            <summary>
            Obtains a copy of the cryptographic operations state of a session encoded as an array of bytes
            </summary>
            <returns>Operations state of a session</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.SetOperationState(System.Byte[],Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle)">
            <summary>
            Restores the cryptographic operations state of a session from an array of bytes obtained with GetOperationState
            </summary>
            <param name="state">Array of bytes obtained with GetOperationState</param>
            <param name="encryptionKey">CK_INVALID_HANDLE or handle to the key which will be used for an ongoing encryption or decryption operation in the restored session</param>
            <param name="authenticationKey">CK_INVALID_HANDLE of handle to the key which will be used for an ongoing signature, MACing, or verification operation in the restored session</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Login(Net.Pkcs11Interop.Common.CKU,System.String)">
            <summary>
            Logs a user into a token
            </summary>
            <param name="userType">Type of user</param>
            <param name="pin">Pin of user</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Login(Net.Pkcs11Interop.Common.CKU,System.Byte[])">
            <summary>
            Logs a user into a token
            </summary>
            <param name="userType">Type of user</param>
            <param name="pin">Pin of user</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Logout">
            <summary>
            Logs a user out from a token
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.CreateObject(System.Collections.Generic.List{Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute})">
            <summary>
            Creates a new object
            </summary>
            <param name="attributes">Object attributes</param>
            <returns>Handle of created object</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.CopyObject(Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Collections.Generic.List{Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute})">
            <summary>
            Copies an object, creating a new object for the copy
            </summary>
            <param name="objectHandle">Handle of object to be copied</param>
            <param name="attributes">New values for any attributes of the object that can ordinarily be modified</param>
            <returns>Handle of copied object</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.DestroyObject(Net.Pkcs11Interop.HighLevelAPI.ObjectHandle)">
            <summary>
            Destroys an object
            </summary>
            <param name="objectHandle">Handle of object to be destroyed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.GetObjectSize(Net.Pkcs11Interop.HighLevelAPI.ObjectHandle)">
            <summary>
            Gets the size of an object in bytes.
            </summary>
            <param name="objectHandle">Handle of object</param>
            <returns>Size of an object in bytes</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.GetAttributeValue(Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Collections.Generic.List{Net.Pkcs11Interop.Common.CKA})">
            <summary>
            Obtains the value of one or more attributes of an object
            </summary>
            <param name="objectHandle">Handle of object whose attributes should be read</param>
            <param name="attributes">List of attributes that should be read</param>
            <returns>Object attributes</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.SetAttributeValue(Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Collections.Generic.List{Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute})">
            <summary>
            Modifies the value of one or more attributes of an object
            </summary>
            <param name="objectHandle">Handle of object whose attributes should be modified</param>
            <param name="attributes">List of attributes that should be modified</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.FindObjectsInit(System.Collections.Generic.List{Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute})">
            <summary>
            Initializes a search for token and session objects that match a attributes
            </summary>
            <param name="attributes">Attributes that should be matched</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.FindObjects(System.Int32)">
            <summary>
            Continues a search for token and session objects that match a template, obtaining additional object handles
            </summary>
            <param name="objectCount">Maximum number of object handles to be returned</param>
            <returns>Found object handles</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.FindObjectsFinal">
            <summary>
            Terminates a search for token and session objects
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.FindAllObjects(System.Collections.Generic.List{Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute})">
            <summary>
            Searches for all token and session objects that match provided attributes
            </summary>
            <param name="attributes">Attributes that should be matched</param>
            <returns>Handles of found objects</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Encrypt(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Byte[])">
            <summary>
            Encrypts single-part data
            </summary>
            <param name="mechanism">Encryption mechanism</param>
            <param name="keyHandle">Handle of the encryption key</param>
            <param name="data">Data to be encrypted</param>
            <returns>Encrypted data</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Encrypt(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.IO.Stream,System.IO.Stream)">
            <summary>
            Encrypts multi-part data
            </summary>
            <param name="mechanism">Encryption mechanism</param>
            <param name="keyHandle">Handle of the encryption key</param>
            <param name="inputStream">Input stream from which data to be encrypted should be read</param>
            <param name="outputStream">Output stream where encrypted data should be written</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Encrypt(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Encrypts multi-part data
            </summary>
            <param name="mechanism">Encryption mechanism</param>
            <param name="keyHandle">Handle of the encryption key</param>
            <param name="inputStream">Input stream from which data to be encrypted should be read</param>
            <param name="outputStream">Output stream where encrypted data should be written</param>
            <param name="bufferLength">Size of read buffer in bytes</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Decrypt(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Byte[])">
            <summary>
            Decrypts single-part data
            </summary>
            <param name="mechanism">Decryption mechanism</param>
            <param name="keyHandle">Handle of the decryption key</param>
            <param name="encryptedData">Data to be decrypted</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Decrypt(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.IO.Stream,System.IO.Stream)">
            <summary>
            Decrypts multi-part data
            </summary>
            <param name="mechanism">Decryption mechanism</param>
            <param name="keyHandle">Handle of the decryption key</param>
            <param name="inputStream">Input stream from which encrypted data should be read</param>
            <param name="outputStream">Output stream where decrypted data should be written</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Decrypt(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Decrypts multi-part data
            </summary>
            <param name="mechanism">Decryption mechanism</param>
            <param name="keyHandle">Handle of the decryption key</param>
            <param name="inputStream">Input stream from which encrypted data should be read</param>
            <param name="outputStream">Output stream where decrypted data should be written</param>
            <param name="bufferLength">Size of read buffer in bytes</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.DigestKey(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle)">
            <summary>
            Digests the value of a secret key
            </summary>
            <param name="mechanism">Digesting mechanism</param>
            <param name="keyHandle">Handle of the secret key to be digested</param>
            <returns>Digest</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Digest(Net.Pkcs11Interop.HighLevelAPI.Mechanism,System.Byte[])">
            <summary>
            Digests single-part data
            </summary>
            <param name="mechanism">Digesting mechanism</param>
            <param name="data">Data to be digested</param>
            <returns>Digest</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Digest(Net.Pkcs11Interop.HighLevelAPI.Mechanism,System.IO.Stream)">
            <summary>
            Digests multi-part data
            </summary>
            <param name="mechanism">Digesting mechanism</param>
            <param name="inputStream">Input stream from which data should be read</param>
            <returns>Digest</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Digest(Net.Pkcs11Interop.HighLevelAPI.Mechanism,System.IO.Stream,System.Int32)">
            <summary>
            Digests multi-part data
            </summary>
            <param name="mechanism">Digesting mechanism</param>
            <param name="inputStream">Input stream from which data should be read</param>
            <param name="bufferLength">Size of read buffer in bytes</param>
            <returns>Digest</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Sign(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Byte[])">
            <summary>
            Signs single-part data, where the signature is an appendix to the data
            </summary>
            <param name="mechanism">Signature mechanism</param>
            <param name="keyHandle">Signature key</param>
            <param name="data">Data to be signed</param>
            <returns>Signature</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Sign(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.IO.Stream)">
            <summary>
            Signs multi-part data, where the signature is an appendix to the data
            </summary>
            <param name="mechanism">Signature mechanism</param>
            <param name="keyHandle">Signature key</param>
            <param name="inputStream">Input stream from which data should be read</param>
            <returns>Signature</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Sign(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.IO.Stream,System.Int32)">
            <summary>
            Signs multi-part data, where the signature is an appendix to the data
            </summary>
            <param name="mechanism">Signature mechanism</param>
            <param name="keyHandle">Signature key</param>
            <param name="inputStream">Input stream from which data should be read</param>
            <param name="bufferLength">Size of read buffer in bytes</param>
            <returns>Signature</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.SignRecover(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Byte[])">
            <summary>
            Signs single-part data, where the data can be recovered from the signature
            </summary>
            <param name="mechanism">Signature mechanism</param>
            <param name="keyHandle">Signature key</param>
            <param name="data">Data to be signed</param>
            <returns>Signature</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Verify(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Byte[],System.Byte[],System.Boolean@)">
            <summary>
            Verifies a signature of data, where the signature is an appendix to the data
            </summary>
            <param name="mechanism">Verification mechanism;</param>
            <param name="keyHandle">Verification key</param>
            <param name="data">Data that was signed</param>
            <param name="signature">Signature</param>
            <param name="isValid">Flag indicating whether signature is valid</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Verify(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.IO.Stream,System.Byte[],System.Boolean@)">
            <summary>
            Verifies a signature of data, where the signature is an appendix to the data
            </summary>
            <param name="mechanism">Verification mechanism;</param>
            <param name="keyHandle">Verification key</param>
            <param name="inputStream">Input stream from which data that was signed should be read</param>
            <param name="signature">Signature</param>
            <param name="isValid">Flag indicating whether signature is valid</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Verify(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.IO.Stream,System.Byte[],System.Boolean@,System.Int32)">
            <summary>
            Verifies a signature of data, where the signature is an appendix to the data
            </summary>
            <param name="mechanism">Verification mechanism;</param>
            <param name="keyHandle">Verification key</param>
            <param name="inputStream">Input stream from which data that was signed should be read</param>
            <param name="signature">Signature</param>
            <param name="isValid">Flag indicating whether signature is valid</param>
            <param name="bufferLength">Size of read buffer in bytes</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.VerifyRecover(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Byte[],System.Boolean@)">
            <summary>
            Verifies signature of data, where the data can be recovered from the signature
            </summary>
            <param name="mechanism">Verification mechanism;</param>
            <param name="keyHandle">Verification key</param>
            <param name="signature">Signature</param>
            <param name="isValid">Flag indicating whether signature is valid</param>
            <returns>Data recovered from the signature</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.DigestEncrypt(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Byte[],System.Byte[]@,System.Byte[]@)">
            <summary>
            Digests and encrypts data
            </summary>
            <param name="digestingMechanism">Digesting mechanism</param>
            <param name="encryptionMechanism">Encryption mechanism</param>
            <param name="keyHandle">Handle of the encryption key</param>
            <param name="data">Data to be processed</param>
            <param name="encryptedData">Encrypted data</param>
            <param name="digest">Digest</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.DigestEncrypt(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.IO.Stream,System.IO.Stream)">
            <summary>
            Digests and encrypts data
            </summary>
            <param name="digestingMechanism">Digesting mechanism</param>
            <param name="encryptionMechanism">Encryption mechanism</param>
            <param name="keyHandle">Handle of the encryption key</param>
            <param name="inputStream">Input stream from which data to be processed should be read</param>
            <param name="outputStream">Output stream where encrypted data should be written</param>
            <returns>Digest</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.DigestEncrypt(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Digests and encrypts data
            </summary>
            <param name="digestingMechanism">Digesting mechanism</param>
            <param name="encryptionMechanism">Encryption mechanism</param>
            <param name="keyHandle">Handle of the encryption key</param>
            <param name="inputStream">Input stream from which data to be processed should be read</param>
            <param name="outputStream">Output stream where encrypted data should be written</param>
            <param name="bufferLength">Size of read buffer in bytes</param>
            <returns>Digest</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.DecryptDigest(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Byte[],System.Byte[]@,System.Byte[]@)">
            <summary>
            Digests and decrypts data
            </summary>
            <param name="digestingMechanism">Digesting mechanism</param>
            <param name="decryptionMechanism">Decryption mechanism</param>
            <param name="keyHandle">Handle of the decryption key</param>
            <param name="data">Data to be processed</param>
            <param name="digest">Digest</param>
            <param name="decryptedData">Decrypted data</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.DecryptDigest(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.IO.Stream,System.IO.Stream)">
            <summary>
            Digests and decrypts data
            </summary>
            <param name="digestingMechanism">Digesting mechanism</param>
            <param name="decryptionMechanism">Decryption mechanism</param>
            <param name="keyHandle">Handle of the decryption key</param>
            <param name="inputStream">Input stream from which data to be processed should be read</param>
            <param name="outputStream">Output stream where decrypted data should be written</param>
            <returns>Digest</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.DecryptDigest(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Digests and decrypts data
            </summary>
            <param name="digestingMechanism">Digesting mechanism</param>
            <param name="decryptionMechanism">Decryption mechanism</param>
            <param name="keyHandle">Handle of the decryption key</param>
            <param name="inputStream">Input stream from which data to be processed should be read</param>
            <param name="outputStream">Output stream where decrypted data should be written</param>
            <param name="bufferLength">Size of read buffer in bytes</param>
            <returns>Digest</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.SignEncrypt(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Byte[],System.Byte[]@,System.Byte[]@)">
            <summary>
            Signs and encrypts data
            </summary>
            <param name="signingMechanism">Signing mechanism</param>
            <param name="signingKeyHandle">Handle of the signing key</param>
            <param name="encryptionMechanism">Encryption mechanism</param>
            <param name="encryptionKeyHandle">Handle of the encryption key</param>
            <param name="data">Data to be processed</param>
            <param name="signature">Signature</param>
            <param name="encryptedData">Encrypted data</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.SignEncrypt(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.IO.Stream,System.IO.Stream)">
            <summary>
            Signs and encrypts data
            </summary>
            <param name="signingMechanism">Signing mechanism</param>
            <param name="signingKeyHandle">Handle of the signing key</param>
            <param name="encryptionMechanism">Encryption mechanism</param>
            <param name="encryptionKeyHandle">Handle of the encryption key</param>
            <param name="inputStream">Input stream from which data to be processed should be read</param>
            <param name="outputStream">Output stream where encrypted data should be written</param>
            <returns>Signature</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.SignEncrypt(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Signs and encrypts data
            </summary>
            <param name="signingMechanism">Signing mechanism</param>
            <param name="signingKeyHandle">Handle of the signing key</param>
            <param name="encryptionMechanism">Encryption mechanism</param>
            <param name="encryptionKeyHandle">Handle of the encryption key</param>
            <param name="inputStream">Input stream from which data to be processed should be read</param>
            <param name="outputStream">Output stream where encrypted data should be written</param>
            <param name="bufferLength">Size of read buffer in bytes</param>
            <returns>Signature</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.DecryptVerify(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Byte[],System.Byte[],System.Byte[]@,System.Boolean@)">
            <summary>
            Decrypts data and verifies a signature of data
            </summary>
            <param name="verificationMechanism">Verification mechanism</param>
            <param name="verificationKeyHandle">Handle of the verification key</param>
            <param name="decryptionMechanism">Decryption mechanism</param>
            <param name="decryptionKeyHandle">Handle of the decryption key</param>
            <param name="data">Data to be processed</param>
            <param name="signature">Signature</param>
            <param name="decryptedData">Decrypted data</param>
            <param name="isValid">Flag indicating whether signature is valid</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.DecryptVerify(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.IO.Stream,System.IO.Stream,System.Byte[],System.Boolean@)">
            <summary>
            Decrypts data and verifies a signature of data
            </summary>
            <param name="verificationMechanism">Verification mechanism</param>
            <param name="verificationKeyHandle">Handle of the verification key</param>
            <param name="decryptionMechanism">Decryption mechanism</param>
            <param name="decryptionKeyHandle">Handle of the decryption key</param>
            <param name="inputStream">Input stream from which data to be processed should be read</param>
            <param name="outputStream">Output stream where decrypted data should be written</param>
            <param name="signature">Signature</param>
            <param name="isValid">Flag indicating whether signature is valid</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.DecryptVerify(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.IO.Stream,System.IO.Stream,System.Byte[],System.Boolean@,System.Int32)">
            <summary>
            Decrypts data and verifies a signature of data
            </summary>
            <param name="verificationMechanism">Verification mechanism</param>
            <param name="verificationKeyHandle">Handle of the verification key</param>
            <param name="decryptionMechanism">Decryption mechanism</param>
            <param name="decryptionKeyHandle">Handle of the decryption key</param>
            <param name="inputStream">Input stream from which data to be processed should be read</param>
            <param name="outputStream">Output stream where decrypted data should be written</param>
            <param name="signature">Signature</param>
            <param name="isValid">Flag indicating whether signature is valid</param>
            <param name="bufferLength">Size of read buffer in bytes</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.GenerateKey(Net.Pkcs11Interop.HighLevelAPI.Mechanism,System.Collections.Generic.List{Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute})">
            <summary>
            Generates a secret key or set of domain parameters, creating a new object
            </summary>
            <param name="mechanism">Generation mechanism</param>
            <param name="attributes">Attributes of the new key or set of domain parameters</param>
            <returns>Handle of the new key or set of domain parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.GenerateKeyPair(Net.Pkcs11Interop.HighLevelAPI.Mechanism,System.Collections.Generic.List{Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute},System.Collections.Generic.List{Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute},Net.Pkcs11Interop.HighLevelAPI.ObjectHandle@,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle@)">
            <summary>
            Generates a public/private key pair, creating new key objects
            </summary>
            <param name="mechanism">Key generation mechanism</param>
            <param name="publicKeyAttributes">Attributes of the public key</param>
            <param name="privateKeyAttributes">Attributes of the private key</param>
            <param name="publicKeyHandle">Handle of the new public key</param>
            <param name="privateKeyHandle">Handle of the new private key</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.WrapKey(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle)">
            <summary>
            Wraps (i.e., encrypts) a private or secret key
            </summary>
            <param name="mechanism">Wrapping mechanism</param>
            <param name="wrappingKeyHandle">Handle of wrapping key</param>
            <param name="keyHandle">Handle of key to be wrapped</param>
            <returns>Wrapped key</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.UnwrapKey(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Byte[],System.Collections.Generic.List{Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute})">
            <summary>
            Unwraps (i.e. decrypts) a wrapped key, creating a new private key or secret key object
            </summary>
            <param name="mechanism">Unwrapping mechanism</param>
            <param name="unwrappingKeyHandle">Handle of unwrapping key</param>
            <param name="wrappedKey">Wrapped key</param>
            <param name="attributes">Attributes for unwrapped key</param>
            <returns>Handle of unwrapped key</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.DeriveKey(Net.Pkcs11Interop.HighLevelAPI.Mechanism,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Collections.Generic.List{Net.Pkcs11Interop.HighLevelAPI.ObjectAttribute})">
            <summary>
            Derives a key from a base key, creating a new key object
            </summary>
            <param name="mechanism">Derivation mechanism</param>
            <param name="baseKeyHandle">Handle of base key</param>
            <param name="attributes">Attributes for the new key</param>
            <returns>Handle of derived key</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.SeedRandom(System.Byte[])">
            <summary>
            Mixes additional seed material into the token's random number generator
            </summary>
            <param name="seed">Seed material</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.GenerateRandom(System.Int32)">
            <summary>
            Generates random or pseudo-random data
            </summary>
            <param name="length">Length in bytes of the random or pseudo-random data to be generated</param>
            <returns>Generated random or pseudo-random data</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.GetFunctionStatus">
            <summary>
            Legacy function which should throw CKR_FUNCTION_NOT_PARALLEL
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.CancelFunction">
            <summary>
            Legacy function which should throw CKR_FUNCTION_NOT_PARALLEL
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Session.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.SessionFlags">
            <summary>
            Flags that define the type of session
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.SessionFlags.#ctor(System.UInt32)">
            <summary>
            Initializes new instance of SessionFlags class
            </summary>
            <param name="flags">Bit flags that define the type of session</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.SessionFlags._flags">
            <summary>
            Bit flags that define the type of session
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SessionFlags.Flags">
            <summary>
            Bit flags that define the type of session
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SessionFlags.RwSession">
            <summary>
            True if the session is read/write; false if the session is read-only
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SessionFlags.SerialSession">
            <summary>
            This flag is provided for backward compatibility, and should always be set to true
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.SessionInfo">
            <summary>
            Information about a session
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.SessionInfo.#ctor(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_SESSION_INFO)">
            <summary>
            Converts low level CK_SESSION_INFO structure to high level SessionInfo class
            </summary>
            <param name="sessionId">PKCS#11 handle of session</param>
            <param name="ck_session_info">Low level CK_SESSION_INFO structure</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.SessionInfo._sessionId">
            <summary>
            PKCS#11 handle of session
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.SessionInfo._slotId">
            <summary>
            PKCS#11 handle of slot that interfaces with the token
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.SessionInfo._state">
            <summary>
            The state of the session
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.SessionInfo._sessionFlags">
            <summary>
            Flags that define the type of session
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.SessionInfo._deviceError">
            <summary>
            An error code defined by the cryptographic device used for errors not covered by Cryptoki
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SessionInfo.SessionId">
            <summary>
            PKCS#11 handle of session
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SessionInfo.SlotId">
            <summary>
            PKCS#11 handle of slot that interfaces with the token
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SessionInfo.State">
            <summary>
            The state of the session
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SessionInfo.SessionFlags">
            <summary>
            Flags that define the type of session
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SessionInfo.DeviceError">
            <summary>
            An error code defined by the cryptographic device used for errors not covered by Cryptoki
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.Slot">
            <summary>
            Logical reader that potentially contains a token
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Slot.#ctor(Net.Pkcs11Interop.LowLevelAPI.Pkcs11,System.UInt32)">
            <summary>
            Initializes new instance of Slot class
            </summary>
            <param name="pkcs11">Low level PKCS#11 wrapper</param>
            <param name="slotId">PKCS#11 handle of slot</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.Slot._p11">
            <summary>
            Low level PKCS#11 wrapper
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.Slot._slotId">
            <summary>
            PKCS#11 handle of slot
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.Slot.SlotId">
            <summary>
            PKCS#11 handle of slot
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Slot.GetSlotInfo">
            <summary>
            Obtains information about a particular slot in the system
            </summary>
            <returns>Slot information</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Slot.GetTokenInfo">
            <summary>
            Obtains information about a particular token in the system.
            </summary>
            <returns>Token information</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Slot.GetMechanismList">
            <summary>
            Obtains a list of mechanism types supported by a token
            </summary>
            <returns>List of mechanism types supported by a token</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Slot.GetMechanismInfo(Net.Pkcs11Interop.Common.CKM)">
            <summary>
            Obtains information about a particular mechanism possibly supported by a token
            </summary>
            <param name="mechanism">Mechanism</param>
            <returns>Information about mechanism</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Slot.InitToken(System.String,System.String)">
            <summary>
            Initializes a token
            </summary>
            <param name="soPin">SO's initial PIN</param>
            <param name="label">Label of the token</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Slot.InitToken(System.Byte[],System.Byte[])">
            <summary>
            Initializes a token
            </summary>
            <param name="soPin">SO's initial PIN</param>
            <param name="label">Label of the token</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Slot.OpenSession(System.Boolean)">
            <summary>
            Opens a session between an application and a token in a particular slot
            </summary>
            <param name="readOnly">Flag indicating whether session should be read only</param>
            <returns>Session</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Slot.CloseSession(Net.Pkcs11Interop.HighLevelAPI.Session)">
            <summary>
            Closes a session between an application and a token
            </summary>
            <param name="session">Session</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.Slot.CloseAllSessions">
            <summary>
            Closes all sessions an application has with a token
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.SlotFlags">
            <summary>
            Flags that provide capabilities of the slot
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.SlotFlags.#ctor(System.UInt32)">
            <summary>
            Initializes new instance of SlotFlags class
            </summary>
            <param name="flags">Bits flags that provide capabilities of the slot</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.SlotFlags._flags">
            <summary>
            Bits flags that provide capabilities of the slot
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SlotFlags.Flags">
            <summary>
            Bits flags that provide capabilities of the slot
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SlotFlags.TokenPresent">
            <summary>
            True if a token is present in the slot (e.g. a device is in the reader)
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SlotFlags.RemovableDevice">
            <summary>
            True if the reader supports removable devices
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SlotFlags.HardwareSlot">
            <summary>
            True if the slot is a hardware slot, as opposed to a software slot implementing a "soft token"
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.SlotInfo">
            <summary>
            Information about a slot
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.SlotInfo.#ctor(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_SLOT_INFO)">
            <summary>
            Converts low level CK_SLOT_INFO structure to high level SlotInfo class
            </summary>
            <param name="slotId">PKCS#11 handle of slot</param>
            <param name="ck_slot_info">Low level CK_SLOT_INFO structure</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.SlotInfo._slotId">
            <summary>
            PKCS#11 handle of slot
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.SlotInfo._slotDescription">
            <summary>
            Description of the slot
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.SlotInfo._manufacturerId">
            <summary>
            ID of the slot manufacturer
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.SlotInfo._slotFlags">
            <summary>
            Flags that provide capabilities of the slot
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.SlotInfo._hardwareVersion">
            <summary>
            Version number of the slot's hardware
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.SlotInfo._firmwareVersion">
            <summary>
            Version number of the slot's firmware
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SlotInfo.SlotId">
            <summary>
            PKCS#11 handle of slot
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SlotInfo.SlotDescription">
            <summary>
            Description of the slot
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SlotInfo.ManufacturerId">
            <summary>
            ID of the slot manufacturer
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SlotInfo.SlotFlags">
            <summary>
            Flags that provide capabilities of the slot
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SlotInfo.HardwareVersion">
            <summary>
            Version number of the slot's hardware
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.SlotInfo.FirmwareVersion">
            <summary>
            Version number of the slot's firmware
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.TokenFlags">
            <summary>
            Flags indicating capabilities and status of the device
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.#ctor(System.UInt32)">
            <summary>
            Initializes new instance of TokenFlags class
            </summary>
            <param name="flags">Bits flags indicating capabilities and status of the device</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenFlags._flags">
            <summary>
            Bits flags indicating capabilities and status of the device
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.Flags">
            <summary>
            Bits flags indicating capabilities and status of the device
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.Rng">
            <summary>
            True if the token has its own random number generator
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.WriteProtected">
            <summary>
            True if the token is write-protected
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.LoginRequired">
            <summary>
            True if there are some cryptographic functions that a user must be logged in to perform
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.UserPinInitialized">
            <summary>
            True if the normal user's PIN has been initialized
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.RestoreKeyNotNeeded">
            <summary>
            True if a successful save of a session's cryptographic operations state always contains all keys needed to restore the state of the session
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.ClockOnToken">
            <summary>
            True if token has its own hardware clock
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.ProtectedAuthenticationPath">
            <summary>
            True if token has a “protected authentication path”, whereby a user can log into the token without passing a PIN through the Cryptoki library
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.DualCryptoOperations">
            <summary>
            True if a single session with the token can perform dual cryptographic operations
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.TokenInitialized">
            <summary>
            True if the token has been initialized using C_InitializeToken or an equivalent mechanism
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.SecondaryAuthentication">
            <summary>
            True if the token supports secondary authentication for private key objects
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.UserPinCountLow">
            <summary>
            True if an incorrect user login PIN has been entered at least once since the last successful authentication
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.UserPinFinalTry">
            <summary>
            True if supplying an incorrect user PIN will make it to become locked
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.UserPinLocked">
            <summary>
            True if the user PIN has been locked. User login to the token is not possible.
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.UserPinToBeChanged">
            <summary>
            True if the user PIN value is the default value set by token initialization or manufacturing, or the PIN has been expired by the card
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.SoPinCountLow">
            <summary>
            True if an incorrect SO login PIN has been entered at least once since the last successful authentication
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.SoPinFinalTry">
            <summary>
            True if supplying an incorrect SO PIN will make it to become locked.
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.SoPinLocked">
            <summary>
            True if the SO PIN has been locked. User login to the token is not possible.
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenFlags.SoPinToBeChanged">
            <summary>
            True if the SO PIN value is the default value set by token initialization or manufacturing, or the PIN has been expired by the card.
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.TokenInfo">
            <summary>
            Information about a token
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.#ctor(System.UInt32,Net.Pkcs11Interop.LowLevelAPI.CK_TOKEN_INFO)">
            <summary>
            Converts low level CK_TOKEN_INFO structure to high level TokenInfo class
            </summary>
            <param name="slotId">PKCS#11 handle of slot</param>
            <param name="ck_token_info">Low level CK_TOKEN_INFO structure</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._slotId">
            <summary>
            PKCS#11 handle of slot
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._label">
            <summary>
            Application-defined label, assigned during token initialization
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._manufacturerId">
            <summary>
            ID of the device manufacturer
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._model">
            <summary>
            Model of the device
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._serialNumber">
            <summary>
            Serial number of the device
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._tokenFlags">
            <summary>
            Bit flags indicating capabilities and status of the device
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._maxSessionCount">
            <summary>
            Maximum number of sessions that can be opened with the token at one time by a single application
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._sessionCount">
            <summary>
            Number of sessions that this application currently has open with the token
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._maxRwSessionCount">
            <summary>
            Maximum number of read/write sessions that can be opened with the token at one time by a single application
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._rwSessionCount">
            <summary>
            Number of read/write sessions that this application currently has open with the token
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._maxPinLen">
            <summary>
            Maximum length in bytes of the PIN
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._minPinLen">
            <summary>
            Minimum length in bytes of the PIN
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._totalPublicMemory">
            <summary>
            The total amount of memory on the token in bytes in which public objects may be stored
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._freePublicMemory">
            <summary>
            The amount of free (unused) memory on the token in bytes for public objects
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._totalPrivateMemory">
            <summary>
            The total amount of memory on the token in bytes in which private objects may be stored
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._freePrivateMemory">
            <summary>
            The amount of free (unused) memory on the token in bytes for private objects
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._hardwareVersion">
            <summary>
            Version number of hardware
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._firmwareVersion">
            <summary>
            Version number of firmware
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._utcTimeString">
            <summary>
            Current time (the value of this field only makes sense for tokens equipped with a clock)
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.TokenInfo._utcTime">
            <summary>
            UtcTimeString converted to DateTime or null if conversion failed
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.SlotId">
            <summary>
            PKCS#11 handle of slot
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.Label">
            <summary>
            Application-defined label, assigned during token initialization
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.ManufacturerId">
            <summary>
            ID of the device manufacturer
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.Model">
            <summary>
            Model of the device
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.SerialNumber">
            <summary>
            Serial number of the device
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.TokenFlags">
            <summary>
            Bit flags indicating capabilities and status of the device
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.MaxSessionCount">
            <summary>
            Maximum number of sessions that can be opened with the token at one time by a single application
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.SessionCount">
            <summary>
            Number of sessions that this application currently has open with the token
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.MaxRwSessionCount">
            <summary>
            Maximum number of read/write sessions that can be opened with the token at one time by a single application
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.RwSessionCount">
            <summary>
            Number of read/write sessions that this application currently has open with the token
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.MaxPinLen">
            <summary>
            Maximum length in bytes of the PIN
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.MinPinLen">
            <summary>
            Minimum length in bytes of the PIN
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.TotalPublicMemory">
            <summary>
            The total amount of memory on the token in bytes in which public objects may be stored
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.FreePublicMemory">
            <summary>
            The amount of free (unused) memory on the token in bytes for public objects
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.TotalPrivateMemory">
            <summary>
            The total amount of memory on the token in bytes in which private objects may be stored
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.FreePrivateMemory">
            <summary>
            The amount of free (unused) memory on the token in bytes for private objects
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.HardwareVersion">
            <summary>
            Version number of hardware
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.FirmwareVersion">
            <summary>
            Version number of firmware
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.UtcTimeString">
            <summary>
            Current time (the value of this field only makes sense for tokens equipped with a clock)
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.TokenInfo.UtcTime">
            <summary>
            UtcTimeString converted to DateTime or null if conversion failed
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRsaPkcsOaepParams">
            <summary>
            Parameters for the CKM_RSA_PKCS_OAEP mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRsaPkcsOaepParams.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the CkRsaPkcsOaepParams class.
            </summary>
            <param name="hashAlg">Mechanism ID of the message digest algorithm used to calculate the digest of the encoding parameter (CKM)</param>
            <param name="mgf">Mask generation function to use on the encoded block (CKG)</param>
            <param name="source">Source of the encoding parameter (CKZ)</param>
            <param name="sourceData">Data used as the input for the encoding parameter source</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRsaPkcsOaepParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRsaPkcsOaepParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRsaPkcsOaepParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRsaPkcsOaepParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRsaPkcsOaepParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRsaPkcsOaepParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.IMechanismParams">
            <summary>
            Defines a method to convert high level mechanism parameters to low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.IMechanismParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeyDerivationStringData">
            <summary>
            Parameters for the CKM_CONCATENATE_BASE_AND_DATA, CKM_CONCATENATE_DATA_AND_BASE and CKM_XOR_BASE_AND_DATA mechanisms
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeyDerivationStringData.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the CkKeyDerivationStringData class.
            </summary>
            <param name="data">Byte string used as the input for derivation mechanism</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeyDerivationStringData._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeyDerivationStringData._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeyDerivationStringData.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeyDerivationStringData.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeyDerivationStringData.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeyDerivationStringData.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAesCbcEncryptDataParams">
            <summary>
            Parameters for the CKM_AES_CBC_ENCRYPT_DATA mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAesCbcEncryptDataParams.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the CkAesCbcEncryptDataParams class.
            </summary>
            <param name="iv">IV value (16 bytes)</param>
            <param name="data">Data value part that must be a multiple of 16 bytes long</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAesCbcEncryptDataParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAesCbcEncryptDataParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAesCbcEncryptDataParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAesCbcEncryptDataParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAesCbcEncryptDataParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAesCbcEncryptDataParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAesCtrParams">
            <summary>
            Parameters for the CKM_AES_CTR mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAesCtrParams.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the CkAesCtrParams class.
            </summary>
            <param name="counterBits">The number of bits in the counter block (cb) that shall be incremented</param>
            <param name="cb">Specifies the counter block (16 bytes)</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAesCtrParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAesCtrParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAriaCbcEncryptDataParams">
            <summary>
            Parameters for the CKM_ARIA_CBC_ENCRYPT_DATA mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAriaCbcEncryptDataParams.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the CkAriaCbcEncryptDataParams class.
            </summary>
            <param name="iv">IV value (16 bytes)</param>
            <param name="data">Data to encrypt</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAriaCbcEncryptDataParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAriaCbcEncryptDataParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAriaCbcEncryptDataParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAriaCbcEncryptDataParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAriaCbcEncryptDataParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkAriaCbcEncryptDataParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCamelliaCbcEncryptDataParams">
            <summary>
            Parameters for the CKM_CAMELLIA_CBC_ENCRYPT_DATA mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCamelliaCbcEncryptDataParams.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the CkCamelliaCbcEncryptDataParams class.
            </summary>
            <param name="iv">IV value (16 bytes)</param>
            <param name="data">Data to encrypt</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCamelliaCbcEncryptDataParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCamelliaCbcEncryptDataParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCamelliaCbcEncryptDataParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCamelliaCbcEncryptDataParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCamelliaCbcEncryptDataParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCamelliaCbcEncryptDataParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCamelliaCtrParams">
            <summary>
            Parameters for the CKM_CAMELLIA_CTR mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCamelliaCtrParams.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the CkCamelliaCtrParams class.
            </summary>
            <param name="counterBits">The number of bits in the counter block (cb) that shall be incremented</param>
            <param name="cb">Specifies the counter block (16 bytes)</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCamelliaCtrParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCamelliaCtrParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCmsSigParams">
            <summary>
            Parameters for the CKM_CMS_SIG mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCmsSigParams.#ctor(Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.String,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the CkCmsSigParams class.
            </summary>
            <param name="certificateHandle">Object handle for a certificate associated with the signing key</param>
            <param name="signingMechanism">Mechanism to use when signing a constructed CMS SignedAttributes value</param>
            <param name="digestMechanism">Mechanism to use when digesting the data</param>
            <param name="contentType">String indicating complete MIME Content-type of message to be signed or null if the message is a MIME object</param>
            <param name="requestedAttributes">DER-encoded list of CMS Attributes the caller requests to be included in the signed attributes</param>
            <param name="requiredAttributes">DER-encoded list of CMS Attributes (with accompanying values) required to be included in the resulting signed attributes</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCmsSigParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCmsSigParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCmsSigParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCmsSigParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCmsSigParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkCmsSigParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkDesCbcEncryptDataParams">
            <summary>
            Parameters for the CKM_DES_CBC_ENCRYPT_DATA and CKM_DES3_CBC_ENCRYPT_DATA mechanisms
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkDesCbcEncryptDataParams.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the CkDesCbcEncryptDataParams class.
            </summary>
            <param name="iv">IV value (8 bytes)</param>
            <param name="data">Data to encrypt</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkDesCbcEncryptDataParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkDesCbcEncryptDataParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkDesCbcEncryptDataParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkDesCbcEncryptDataParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkDesCbcEncryptDataParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkDesCbcEncryptDataParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcdh1DeriveParams">
            <summary>
            Parameters for the CKM_ECDH1_DERIVE and CKM_ECDH1_COFACTOR_DERIVE key derivation mechanisms
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcdh1DeriveParams.#ctor(System.UInt32,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the CkEcdh1DeriveParams class.
            </summary>
            <param name="kdf">Key derivation function used on the shared secret value (CKD)</param>
            <param name="sharedData">Some data shared between the two parties</param>
            <param name="publicData">Other party's EC public key value</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcdh1DeriveParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcdh1DeriveParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcdh1DeriveParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcdh1DeriveParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcdh1DeriveParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcdh1DeriveParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcdh2DeriveParams">
            <summary>
            Parameters for the CKM_ECMQV_DERIVE mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcdh2DeriveParams.#ctor(System.UInt32,System.Byte[],System.Byte[],System.UInt32,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Byte[])">
            <summary>
            Initializes a new instance of the CkEcdh2DeriveParams class.
            </summary>
            <param name="kdf">Key derivation function used on the shared secret value (CKD)</param>
            <param name="sharedData">Some data shared between the two parties</param>
            <param name="publicData">Other party's first EC public key value</param>
            <param name="privateDataLen">The length in bytes of the second EC private key</param>
            <param name="privateData">Key handle for second EC private key value</param>
            <param name="publicData2">Other party's second EC public key value</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcdh2DeriveParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcdh2DeriveParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcdh2DeriveParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcdh2DeriveParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcdh2DeriveParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcdh2DeriveParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcmqvDeriveParams">
            <summary>
            Parameters for the CKM_ECMQV_DERIVE mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcmqvDeriveParams.#ctor(System.UInt32,System.Byte[],System.Byte[],System.UInt32,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Byte[],Net.Pkcs11Interop.HighLevelAPI.ObjectHandle)">
            <summary>
            Initializes a new instance of the CkEcmqvDeriveParams class.
            </summary>&gt;
            <param name="kdf">Key derivation function used on the shared secret value (CKD)</param><param name="sharedData">Some data shared between the two parties</param><param name="publicData">Other party's first EC public key value</param><param name="privateDataLen">The length in bytes of the second EC private key</param><param name="privateData">Key handle for second EC private key value</param><param name="publicData2">Other party's second EC public key value</param><param name="publicKey">Handle to the first party's ephemeral public key</param></member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcmqvDeriveParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcmqvDeriveParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcmqvDeriveParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcmqvDeriveParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcmqvDeriveParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkEcmqvDeriveParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkExtractParams">
            <summary>
            Parameters for the CKM_EXTRACT_KEY_FROM_KEY mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkExtractParams.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the CkExtractParams class.
            </summary>
            <param name="bit">Specifies which bit of the base key should be used as the first bit of the derived key</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkExtractParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkExtractParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeaDeriveParams">
            <summary>
            Parameters for the CKM_KEA_DERIVE mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeaDeriveParams.#ctor(System.Boolean,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the CkKeaDeriveParams class.
            </summary>
            <param name="isSender">Option for generating the key (called a TEK). True if the sender (originator) generates the TEK, false if the recipient is regenerating the TEK.</param>
            <param name="randomA">Ra data</param>
            <param name="randomB">Rb data</param>
            <param name="publicData">Other party's KEA public key value</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeaDeriveParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeaDeriveParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeaDeriveParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeaDeriveParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeaDeriveParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeaDeriveParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeyWrapSetOaepParams">
            <summary>
            Parameters for the CKM_KEY_WRAP_SET_OAEP mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeyWrapSetOaepParams.#ctor(System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the CkKeyWrapSetOaepParams class.
            </summary>
            <param name="bc">Block contents byte</param>
            <param name="x">Concatenation of hash of plaintext data (if present) and extra data (if present)</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeyWrapSetOaepParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeyWrapSetOaepParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeyWrapSetOaepParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeyWrapSetOaepParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeyWrapSetOaepParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKeyWrapSetOaepParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKipParams">
            <summary>
            Parameters for the CKM_KIP_DERIVE, CKM_KIP_WRAP and CKM_KIP_MAC mechanisms
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKipParams.#ctor(System.Nullable{System.UInt32},Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Byte[])">
            <summary>
            Initializes a new instance of the CkKipParams class.
            </summary>
            <param name="mechanism">Underlying cryptographic mechanism (CKM)</param>
            <param name="key">Handle to a key that will contribute to the entropy of the derived key (CKM_KIP_DERIVE) or will be used in the MAC operation (CKM_KIP_MAC)</param>
            <param name="seed">Input seed</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKipParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKipParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKipParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKipParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKipParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkKipParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkMacGeneralParams">
            <summary>
            Parameters for the general-length MACing mechanisms (DES, DES3, CAST, CAST3, CAST128 (CAST5), IDEA, CDMF and AES), the general length HMACing mechanisms (MD2, MD5, SHA-1, SHA-256, SHA-384, SHA-512, RIPEMD-128 and RIPEMD-160) and the two SSL 3.0 MACing mechanisms (MD5 and SHA-1)
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkMacGeneralParams.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the CkMacGeneralParams class.
            </summary>
            <param name="macLength">Length of the MAC produced, in bytes</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkMacGeneralParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkMacGeneralParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParam">
            <summary>
            Type, value and length of an OTP parameter
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParam.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the CkOtpParam class.
            </summary>
            <param name="type">Parameter type</param>
            <param name="value">Value of the parameter</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParam._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParam._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParam.Type">
            <summary>
            Parameter type
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParam.Value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParam.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParam.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParam.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParam.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParams">
            <summary>
            Parameters for OTP mechanisms in a generic fashion
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParams.#ctor(System.Collections.Generic.List{Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParam})">
            <summary>
            Initializes a new instance of the CkOtpParams class.
            </summary>
            <param name="parameters">List of OTP parameters</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParams._parameters">
            <summary>
            List of OTP parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpSignatureInfo">
            <summary>
            Parameters returned by all OTP mechanisms in successful calls to Sign method
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpSignatureInfo.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the CkOtpSignatureInfo class.
            </summary>
            <param name="signature">Signature value returned by all OTP mechanisms in successful calls to Sign method</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpSignatureInfo._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpSignatureInfo._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpSignatureInfo._params">
            <summary>
            List of OTP parameters
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpSignatureInfo._signature">
            <summary>
            Unmanaged memory with CK_OTP_SIGNATURE_INFO structure
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpSignatureInfo.Params">
            <summary>
            List of OTP parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpSignatureInfo.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpSignatureInfo.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkOtpSignatureInfo.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkPbeParams">
            <summary>
            Parameters for the CKM_PBE mechanisms and the CKM_PBA_SHA1_WITH_SHA1_HMAC mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkPbeParams.#ctor(System.Byte[],System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the CkPbeParams class.
            </summary>
            <param name="initVector">8-byte initialization vector (IV), if an IV is required</param>
            <param name="password">Password to be used in the PBE key generation</param>
            <param name="salt">Salt to be used in the PBE key generation</param>
            <param name="iteration">Number of iterations required for the generation</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkPbeParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkPbeParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkPbeParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkPbeParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkPbeParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkPbeParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkPkcs5Pbkd2Params">
            <summary>
            Parameters for the CKM_PKCS5_PBKD2 mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkPkcs5Pbkd2Params.#ctor(System.UInt32,System.Byte[],System.UInt32,System.UInt32,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the CkPkcs5Pbkd2Params class.
            </summary>
            <param name="saltSource">Source of the salt value (CKZ)</param>
            <param name="saltSourceData">Data used as the input for the salt source</param>
            <param name="iterations">Number of iterations to perform when generating each block of random data</param>
            <param name="prf">Pseudo-random function to used to generate the key (CKP)</param>
            <param name="prfData">Data used as the input for PRF in addition to the salt value</param>
            <param name="password">Password to be used in the PBE key generation</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkPkcs5Pbkd2Params._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkPkcs5Pbkd2Params._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkPkcs5Pbkd2Params.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkPkcs5Pbkd2Params.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkPkcs5Pbkd2Params.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkPkcs5Pbkd2Params.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc2CbcParams">
            <summary>
            Parameters for the CKM_RC2_CBC and CKM_RC2_CBC_PAD mechanisms
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc2CbcParams.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the CkRc2CbcParams class.
            </summary>
            <param name="effectiveBits">The effective number of bits in the RC2 search space</param>
            <param name="iv">The initialization vector (IV) for cipher block chaining mode</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc2CbcParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc2CbcParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc2MacGeneralParams">
            <summary>
            Parameters for the CKM_RC2_MAC_GENERAL mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc2MacGeneralParams.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the CkRc2MacGeneralParams class.
            </summary>
            <param name="effectiveBits">The effective number of bits in the RC2 search space</param>
            <param name="macLength">Length of the MAC produced, in bytes</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc2MacGeneralParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc2MacGeneralParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc2Params">
            <summary>
            Parameters for the CKM_RC2_ECB and CKM_RC2_MAC mechanisms
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc2Params.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the CkRc2Params class.
            </summary>
            <param name="effectiveBits">Effective number of bits in the RC2 search space</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc2Params._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc2Params.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc5CbcParams">
            <summary>
            Parameters for the CKM_RC5_CBC and CKM_RC5_CBC_PAD mechanisms
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc5CbcParams.#ctor(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the CkRc5CbcParams class.
            </summary>
            <param name="wordsize">Wordsize of RC5 cipher in bytes</param>
            <param name="rounds">Number of rounds of RC5 encipherment</param>
            <param name="iv">Initialization vector (IV) for CBC encryption</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc5CbcParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc5CbcParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc5CbcParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc5CbcParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc5CbcParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc5CbcParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc5MacGeneralParams">
            <summary>
            Parameters for the CKM_RC5_MAC_GENERAL mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc5MacGeneralParams.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the CkRc5MacGeneralParams class.
            </summary>
            <param name="wordsize">Wordsize of RC5 cipher in bytes</param>
            <param name="rounds">Number of rounds of RC5 encipherment</param>
            <param name="macLength">Length of the MAC produced, in bytes</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc5MacGeneralParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc5MacGeneralParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc5Params">
            <summary>
            Parameters for the CKM_RC5_ECB and CKM_RC5_MAC mechanisms
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc5Params.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the CkRc5Params class.
            </summary>
            <param name="wordsize">Wordsize of RC5 cipher in bytes</param>
            <param name="rounds">Number of rounds of RC5 encipherment</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc5Params._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRc5Params.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRsaPkcsPssParams">
            <summary>
            Parameters for the CKM_RSA_PKCS_PSS mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRsaPkcsPssParams.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the CkRsaPkcsPssParams class.
            </summary>
            <param name="hashAlg">Hash algorithm used in the PSS encoding (CKM)</param>
            <param name="mgf">Mask generation function to use on the encoded block (CKG)</param>
            <param name="len">Length, in bytes, of the salt value used in the PSS encoding</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRsaPkcsPssParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkRsaPkcsPssParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSkipjackPrivateWrapParams">
            <summary>
            Parameters for the CKM_SKIPJACK_PRIVATE_WRAP mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSkipjackPrivateWrapParams.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the CkSkipjackPrivateWrapParams class.
            </summary>
            <param name="password">User-supplied password</param>
            <param name="publicData">Other party's key exchange public key value</param>
            <param name="randomA">Ra data</param>
            <param name="primeP">Prime, p, value</param>
            <param name="baseG">Base, g, value</param>
            <param name="subprimeQ">Subprime, q, value</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSkipjackPrivateWrapParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSkipjackPrivateWrapParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSkipjackPrivateWrapParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSkipjackPrivateWrapParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSkipjackPrivateWrapParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSkipjackPrivateWrapParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSkipjackRelayxParams">
            <summary>
            Parameters for the CKM_SKIPJACK_RELAYX mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSkipjackRelayxParams.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the CkSkipjackRelayxParams class.
            </summary>
            <param name="oldWrappedX">Old wrapper key</param>
            <param name="oldPassword">Old user-supplied password</param>
            <param name="oldPublicData">Old key exchange public key value</param>
            <param name="oldRandomA">Old Ra data</param>
            <param name="newPassword">New user-supplied password</param>
            <param name="newPublicData">New key exchange public key value</param>
            <param name="newRandomA">New Ra data</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSkipjackRelayxParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSkipjackRelayxParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSkipjackRelayxParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSkipjackRelayxParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSkipjackRelayxParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSkipjackRelayxParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatOut">
            <summary>
            Resulting key handles and initialization vectors after performing a DeriveKey method with the CKM_SSL3_KEY_AND_MAC_DERIVE mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatOut.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the CkSsl3KeyMatOut class.
            </summary>
            <param name="ivLength">Length of initialization vectors or 0 if IVs are not required</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatOut._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatOut._lowLevelStruct">
            <summary>
            Low level structure
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatOut._ivLength">
            <summary>
            The length of initialization vectors
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatOut.ClientMacSecret">
            <summary>
            Key handle for the resulting Client MAC Secret key
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatOut.ServerMacSecret">
            <summary>
            Key handle for the resulting Server MAC Secret key
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatOut.ClientKey">
            <summary>
            Key handle for the resulting Client Secret key
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatOut.ServerKey">
            <summary>
            Key handle for the resulting Server Secret key
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatOut.IVClient">
            <summary>
            Initialization vector (IV) created for the client
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatOut.IVServer">
            <summary>
            Initialization vector (IV) created for the server
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatOut.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatOut.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatOut.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatParams">
            <summary>
            Parameters for the CKM_SSL3_KEY_AND_MAC_DERIVE mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatParams.#ctor(System.UInt32,System.UInt32,System.UInt32,System.Boolean,Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3RandomData)">
            <summary>
            Initializes a new instance of the CkSsl3KeyMatParams class.
            </summary>
            <param name="macSizeInBits">The length (in bits) of the MACing keys agreed upon during the protocol handshake phase</param>
            <param name="keySizeInBits">The length (in bits) of the secret keys agreed upon during the protocol handshake phase</param>
            <param name="ivSizeInBits">The length (in bits) of the IV agreed upon during the protocol handshake phase or if no IV is required, the length should be set to 0</param>
            <param name="isExport">Flag indicating whether the keys have to be derived for an export version of the protocol</param>
            <param name="randomInfo">Client's and server's random data information</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatParams._randomInfo">
            <summary>
            Client's and server's random data information
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatParams._returnedKeyMaterial">
            <summary>
            Handles for the keys generated and the IVs
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatParams.ReturnedKeyMaterial">
            <summary>
            Resulting key handles and initialization vectors after performing a DeriveKey method
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3KeyMatParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3MasterKeyDeriveParams">
            <summary>
            Parameters for the CKM_SSL3_MASTER_KEY_DERIVE and CKM_SSL3_MASTER_KEY_DERIVE_DH mechanisms
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3MasterKeyDeriveParams.#ctor(Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3RandomData,System.Boolean)">
            <summary>
            Initializes a new instance of the CkSsl3MasterKeyDeriveParams class.
            </summary>
            <param name="randomInfo">Client's and server's random data information</param>
            <param name="dh">Set to false for CKM_SSL3_MASTER_KEY_DERIVE mechanism and to true for CKM_SSL3_MASTER_KEY_DERIVE_DH mechanism</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3MasterKeyDeriveParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3MasterKeyDeriveParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3MasterKeyDeriveParams._randomInfo">
            <summary>
            Client's and server's random data information
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3MasterKeyDeriveParams.Version">
            <summary>
            SSL protocol version information
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3MasterKeyDeriveParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3MasterKeyDeriveParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3MasterKeyDeriveParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3MasterKeyDeriveParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3RandomData">
            <summary>
            Information about the random data of a client and a server in an SSL context
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3RandomData.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the CkSsl3RandomData class.
            </summary>
            <param name="clientRandom">Client's random data</param>
            <param name="serverRandom">Server's random data</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3RandomData._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3RandomData._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3RandomData.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3RandomData.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3RandomData.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkSsl3RandomData.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkVersion">
            <summary>
            Parameters for the CKM_SSL3_PRE_MASTER_KEY_GEN mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkVersion.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the CkVersion class.
            </summary>
            <param name="major">Major version number (the integer portion of the version)</param>
            <param name="minor">Minor version number (the hundredths portion of the version)</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkVersion._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkVersion.Major">
            <summary>
            Major version number (the integer portion of the version)
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkVersion.Minor">
            <summary>
            Minor version number (the hundredths portion of the version)
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkVersion.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkVersion.ToString">
            <summary>
            Returns a string that represents the current CkVersion object.
            </summary>
            <returns>String that represents the current CkVersion object.</returns>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkTlsPrfParams">
            <summary>
            Parameters for the CKM_TLS_PRF mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkTlsPrfParams.#ctor(System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the CkTlsPrfParams class.
            </summary>
            <param name="seed">Input seed</param>
            <param name="label">Identifying label</param>
            <param name="outputLen">Length in bytes that the output to be created shall have</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkTlsPrfParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkTlsPrfParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkTlsPrfParams.Output">
            <summary>
            Output of the operation
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkTlsPrfParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkTlsPrfParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkTlsPrfParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkTlsPrfParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.Common.ConvertUtils">
            <summary>
            Utility class that helps with data type conversions.
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.ConvertUtils.UintToBytes(System.UInt32)">
            <summary>
            Converts uint to byte array
            </summary>
            <param name="value">Uint that should be converted</param>
            <returns>Byte array with uint value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.ConvertUtils.BytesToUint(System.Byte[])">
            <summary>
            Converts byte array to uint
            </summary>
            <param name="value">Byte array that should be converted</param>
            <returns>Uint with value from byte array</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.ConvertUtils.BoolToBytes(System.Boolean)">
            <summary>
            Converts bool to byte array
            </summary>
            <param name="value">Bool that should be converted</param>
            <returns>Byte array with bool value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.ConvertUtils.BytesToBool(System.Byte[])">
            <summary>
            Converts byte array to bool
            </summary>
            <param name="value">Byte array that should be converted</param>
            <returns>Bool with value from byte array</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.ConvertUtils.Utf8StringToBytes(System.String)">
            <summary>
            Converts UTF-8 string to byte array (not null terminated)
            </summary>
            <param name="value">String that should be converted</param>
            <returns>Byte array with string value</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.ConvertUtils.Utf8StringToBytes(System.String,System.Int32,System.Byte)">
            <summary>
            Converts UTF-8 string to byte array padded or trimmed to specified length
            </summary>
            <param name="value">String that should be converted</param>
            <param name="outputLength">Expected length of byte array</param>
            <param name="paddingByte">Padding byte that will be used for padding to expected length</param>
            <returns>Byte array with string value padded or trimmed to specified length</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.ConvertUtils.BytesToUtf8String(System.Byte[])">
            <summary>
            Converts byte array (not null terminated) to UTF-8 string
            </summary>
            <param name="value">Byte array that should be converted</param>
            <returns>String with value from byte array</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.ConvertUtils.BytesToUtf8String(System.Byte[],System.Boolean)">
            <summary>
            Converts byte array to UTF-8 string (not null terminated)
            </summary>
            <param name="value">Byte array that should be converted</param>
            <param name="trimEnd">Flag indicating whether white space characters should be removed from the end of resulting string</param>
            <returns>String with value from byte array</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.ConvertUtils.BytesToUtf8String(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts specified range of byte array to UTF-8 string (not null terminated)
            </summary>
            <param name="value">Byte array that should be processed</param>
            <param name="index">Starting index of bytes to decode</param>
            <param name="count">Number of bytes to decode</param>
            <returns>String with value from byte array</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.ConvertUtils.CkVersionToString(Net.Pkcs11Interop.LowLevelAPI.CK_VERSION)">
            <summary>
            Converts CK_VERSION to string
            </summary>
            <param name="ck_version">CK_VERSION structure that should be converted.</param>
            <returns>String with version information.</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.ConvertUtils.UtcTimeStringToDateTime(System.String)">
            <summary>
            Converts string with UTC time to DateTime
            </summary>
            <param name="utcTime">UTC time that should be converted (formatted as string of length 16 represented in the format YYYYMMDDhhmmssxx).</param>
            <returns>DateTime if successful, null otherwise.</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.ConvertUtils.BytesToHexString(System.Byte[])">
            <summary>
            Converts byte array to hex encoded string
            </summary>
            <param name="value">Byte array that should be converted</param>
            <returns>String with hex encoded value from byte array</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.ConvertUtils.HexStringToBytes(System.String)">
            <summary>
            Converts hex encoded string to byte array
            </summary>
            <param name="value">String that should be converted</param>
            <returns>Byte array decoded from string</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.ConvertUtils.BytesToBase64String(System.Byte[])">
            <summary>
            Converts byte array to Base64 encoded string
            </summary>
            <param name="value">Byte array that should be converted</param>
            <returns>String with Base64 encoded value from byte array</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.Common.ConvertUtils.Base64StringToBytes(System.String)">
            <summary>
            Converts Base64 encoded string to byte array
            </summary>
            <param name="value">String that should be converted</param>
            <returns>Byte array decoded from string</returns>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatOut">
            <summary>
            Resulting key handles and initialization vectors after performing a DeriveKey method with the CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE or with the CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatOut.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the CkWtlsKeyMatOut class.
            </summary>
            <param name="ivLength">Length of initialization vector or 0 if IV is not required</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatOut._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatOut._lowLevelStruct">
            <summary>
            Low level structure
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatOut._ivLength">
            <summary>
            The length of initialization vector
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatOut.MacSecret">
            <summary>
            Key handle for the resulting MAC secret key
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatOut.Key">
            <summary>
            Key handle for the resulting Secret key
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatOut.IV">
            <summary>
            Initialization vector (IV)
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatOut.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatOut.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatOut.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatParams">
            <summary>
            Parameters for the CKM_WTLS_SERVER_KEY_AND_MAC_DERIVE and the CKM_WTLS_CLIENT_KEY_AND_MAC_DERIVE mechanisms
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatParams.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Boolean,Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsRandomData)">
            <summary>
            Initializes a new instance of the CkWtlsKeyMatParams class.
            </summary>
            <param name="digestMechanism">The digest mechanism to be used (CKM)</param>
            <param name="macSizeInBits">The length (in bits) of the MACing key agreed upon during the protocol handshake phase</param>
            <param name="keySizeInBits">The length (in bits) of the secret key agreed upon during the handshake phase</param>
            <param name="ivSizeInBits">The length (in bits) of the IV agreed upon during the handshake phase or if no IV is required, the length should be set to 0</param>
            <param name="sequenceNumber">The current sequence number used for records sent by the client and server respectively</param>
            <param name="isExport">Flag indicating whether the keys have to be derived for an export version of the protocol</param>
            <param name="randomInfo">Client's and server's random data information</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatParams._randomInfo">
            <summary>
            Client's and server's random data information
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatParams._returnedKeyMaterial">
            <summary>
            Handles for the keys generated and the IV
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatParams.ReturnedKeyMaterial">
            <summary>
            Resulting key handles and initialization vector after performing a DeriveKey method
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsKeyMatParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsMasterKeyDeriveParams">
            <summary>
            Parameters for the CKM_WTLS_MASTER_KEY_DERIVE and CKM_WTLS_MASTER_KEY_DERIVE_DH_ECC mechanisms
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsMasterKeyDeriveParams.#ctor(System.UInt32,Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsRandomData,System.Boolean)">
            <summary>
            Initializes a new instance of the CkWtlsMasterKeyDeriveParams class.
            </summary>
            <param name="digestMechanism">Digest mechanism to be used (CKM)</param>
            <param name="randomInfo">Client's and server's random data information</param>
            <param name="dh">Set to false for CKM_WTLS_MASTER_KEY_DERIVE mechanism and to true for CKM_WTLS_MASTER_KEY_DERIVE_DH_ECC mechanism</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsMasterKeyDeriveParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsMasterKeyDeriveParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsMasterKeyDeriveParams._randomInfo">
            <summary>
            Client's and server's random data information
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsMasterKeyDeriveParams.Version">
            <summary>
            WTLS protocol version information
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsMasterKeyDeriveParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsMasterKeyDeriveParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsMasterKeyDeriveParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsMasterKeyDeriveParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsPrfParams">
            <summary>
            Parameters for the CKM_WTLS_PRF mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsPrfParams.#ctor(System.UInt32,System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Initializes a new instance of the CkWtlsPrfParams class.
            </summary>
            <param name="digestMechanism">Digest mechanism to be used (CKM)</param>
            <param name="seed">Input seed</param>
            <param name="label">Identifying label</param>
            <param name="outputLen">Length in bytes that the output to be created shall have</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsPrfParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsPrfParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="P:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsPrfParams.Output">
            <summary>
            Output of the operation
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsPrfParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsPrfParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsPrfParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsPrfParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsRandomData">
            <summary>
            Information about the random data of a client and a server in a WTLS context
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsRandomData.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the CkWtlsRandomData class.
            </summary>
            <param name="clientRandom">Client's random data</param>
            <param name="serverRandom">Server's random data</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsRandomData._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsRandomData._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsRandomData.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsRandomData.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsRandomData.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkWtlsRandomData.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942Dh1DeriveParams">
            <summary>
            Parameters for the CKM_X9_42_DH_DERIVE key derivation mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942Dh1DeriveParams.#ctor(System.UInt32,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the CkX942Dh1DeriveParams class.
            </summary>
            <param name="kdf">Key derivation function used on the shared secret value (CKD)</param>
            <param name="otherInfo">Some data shared between the two parties</param>
            <param name="publicData">Other party's X9.42 Diffie-Hellman public key value</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942Dh1DeriveParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942Dh1DeriveParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942Dh1DeriveParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942Dh1DeriveParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942Dh1DeriveParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942Dh1DeriveParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942Dh2DeriveParams">
            <summary>
            Parameters for the CKM_X9_42_DH_HYBRID_DERIVE and CKM_X9_42_MQV_DERIVE key derivation mechanisms
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942Dh2DeriveParams.#ctor(System.UInt32,System.Byte[],System.Byte[],System.UInt32,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Byte[])">
            <summary>
            Initializes a new instance of the CkX942Dh2DeriveParams class.
            </summary>
            <param name="kdf">Key derivation function used on the shared secret value (CKD)</param>
            <param name="otherInfo">Some data shared between the two parties</param>
            <param name="publicData">Other party's first X9.42 Diffie-Hellman public key value</param>
            <param name="privateDataLen">The length in bytes of the second X9.42 Diffie-Hellman private key</param>
            <param name="privateData">Key handle for second X9.42 Diffie-Hellman private key value</param>
            <param name="publicData2">Other party's second X9.42 Diffie-Hellman public key value</param>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942Dh2DeriveParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942Dh2DeriveParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942Dh2DeriveParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942Dh2DeriveParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942Dh2DeriveParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942Dh2DeriveParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942MqvDeriveParams">
            <summary>
            Parameters for the CKM_X9_42_MQV_DERIVE key derivation mechanism
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942MqvDeriveParams.#ctor(System.UInt32,System.Byte[],System.Byte[],System.UInt32,Net.Pkcs11Interop.HighLevelAPI.ObjectHandle,System.Byte[],Net.Pkcs11Interop.HighLevelAPI.ObjectHandle)">
            <summary>
            Initializes a new instance of the CkX942MqvDeriveParams class.
            </summary>&gt;
            <param name="kdf">Key derivation function used on the shared secret value (CKD)</param><param name="otherInfo">Some data shared between the two parties</param><param name="publicData">Other party's first X9.42 Diffie-Hellman public key value</param><param name="privateDataLen">The length in bytes of the second X9.42 Diffie-Hellman private key</param><param name="privateData">Key handle for second X9.42 Diffie-Hellman private key value</param><param name="publicData2">Other party's second X9.42 Diffie-Hellman public key value</param><param name="publicKey">Handle to the first party's ephemeral public key</param></member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942MqvDeriveParams._disposed">
            <summary>
            Flag indicating whether instance has been disposed
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942MqvDeriveParams._lowLevelStruct">
            <summary>
            Low level mechanism parameters
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942MqvDeriveParams.ToLowLevelParams">
            <summary>
            Converts object to low level mechanism parameters
            </summary>
            <returns>Low level mechanism parameters</returns>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942MqvDeriveParams.Dispose">
            <summary>
            Disposes object
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942MqvDeriveParams.Dispose(System.Boolean)">
            <summary>
            Disposes object
            </summary>
            <param name="disposing">Flag indicating whether managed resources should be disposed</param>
        </member>
        <member name="M:Net.Pkcs11Interop.HighLevelAPI.MechanismParams.CkX942MqvDeriveParams.Finalize">
            <summary>
            Class destructor that disposes object if caller forgot to do so
            </summary>
        </member>
        <member name="T:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX">
            <summary>
            Structure which contains a Cryptoki version and a function pointer to each function in the Cryptoki API. Please note that CK_FUNCTION_LIST_UNIX uses different marshaling than CK_FUNCTION_LIST.
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.version">
            <summary>
            Cryptoki version
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_Initialize">
            <summary>
            Pointer to C_Initialize
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_Finalize">
            <summary>
            Pointer to C_Finalize
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_GetInfo">
            <summary>
            Pointer to C_GetInfo
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_GetFunctionList">
            <summary>
            Pointer to C_GetFunctionList
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_GetSlotList">
            <summary>
            Pointer to C_GetSlotList
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_GetSlotInfo">
            <summary>
            Pointer to C_GetSlotInfo
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_GetTokenInfo">
            <summary>
            Pointer to C_GetTokenInfo
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_GetMechanismList">
            <summary>
            Pointer to C_GetMechanismList
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_GetMechanismInfo">
            <summary>
            Pointer to C_GetMechanismInfo
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_InitToken">
            <summary>
            Pointer to C_InitToken
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_InitPIN">
            <summary>
            Pointer to C_InitPIN
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_SetPIN">
            <summary>
            Pointer to C_SetPIN
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_OpenSession">
            <summary>
            Pointer to C_OpenSession
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_CloseSession">
            <summary>
            Pointer to C_CloseSession
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_CloseAllSessions">
            <summary>
            Pointer to C_CloseAllSessions
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_GetSessionInfo">
            <summary>
            Pointer to C_GetSessionInfo
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_GetOperationState">
            <summary>
            Pointer to C_GetOperationState
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_SetOperationState">
            <summary>
            Pointer to C_SetOperationState
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_Login">
            <summary>
            Pointer to C_Login
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_Logout">
            <summary>
            Pointer to C_Logout
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_CreateObject">
            <summary>
            Pointer to C_CreateObject
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_CopyObject">
            <summary>
            Pointer to C_CopyObject
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_DestroyObject">
            <summary>
            Pointer to C_DestroyObject
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_GetObjectSize">
            <summary>
            Pointer to C_GetObjectSize
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_GetAttributeValue">
            <summary>
            Pointer to C_GetAttributeValue
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_SetAttributeValue">
            <summary>
            Pointer to C_SetAttributeValue
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_FindObjectsInit">
            <summary>
            Pointer to C_FindObjectsInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_FindObjects">
            <summary>
            Pointer to C_FindObjects
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_FindObjectsFinal">
            <summary>
            Pointer to C_FindObjectsFinal
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_EncryptInit">
            <summary>
            Pointer to C_EncryptInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_Encrypt">
            <summary>
            Pointer to C_Encrypt
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_EncryptUpdate">
            <summary>
            Pointer to C_EncryptUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_EncryptFinal">
            <summary>
            Pointer to C_EncryptFinal
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_DecryptInit">
            <summary>
            Pointer to C_DecryptInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_Decrypt">
            <summary>
            Pointer to C_Decrypt
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_DecryptUpdate">
            <summary>
            Pointer to C_DecryptUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_DecryptFinal">
            <summary>
            Pointer to C_DecryptFinal
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_DigestInit">
            <summary>
            Pointer to C_DigestInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_Digest">
            <summary>
            Pointer to C_Digest
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_DigestUpdate">
            <summary>
            Pointer to C_DigestUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_DigestKey">
            <summary>
            Pointer to C_DigestKey
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_DigestFinal">
            <summary>
            Pointer to C_DigestFinal
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_SignInit">
            <summary>
            Pointer to C_SignInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_Sign">
            <summary>
            Pointer to C_Sign
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_SignUpdate">
            <summary>
            Pointer to C_SignUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_SignFinal">
            <summary>
            Pointer to C_SignFinal
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_SignRecoverInit">
            <summary>
            Pointer to C_SignRecoverInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_SignRecover">
            <summary>
            Pointer to C_SignRecover
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_VerifyInit">
            <summary>
            Pointer to C_VerifyInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_Verify">
            <summary>
            Pointer to C_Verify
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_VerifyUpdate">
            <summary>
            Pointer to C_VerifyUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_VerifyFinal">
            <summary>
            Pointer to C_VerifyFinal
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_VerifyRecoverInit">
            <summary>
            Pointer to C_VerifyRecoverInit
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_VerifyRecover">
            <summary>
            Pointer to C_VerifyRecover
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_DigestEncryptUpdate">
            <summary>
            Pointer to C_DigestEncryptUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_DecryptDigestUpdate">
            <summary>
            Pointer to C_DecryptDigestUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_SignEncryptUpdate">
            <summary>
            Pointer to C_SignEncryptUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_DecryptVerifyUpdate">
            <summary>
            Pointer to C_DecryptVerifyUpdate
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_GenerateKey">
            <summary>
            Pointer to C_GenerateKey
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_GenerateKeyPair">
            <summary>
            Pointer to C_GenerateKeyPair
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_WrapKey">
            <summary>
            Pointer to C_WrapKey
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_UnwrapKey">
            <summary>
            Pointer to C_UnwrapKey
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_DeriveKey">
            <summary>
            Pointer to C_DeriveKey
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_SeedRandom">
            <summary>
            Pointer to C_SeedRandom
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_GenerateRandom">
            <summary>
            Pointer to C_GenerateRandom
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_GetFunctionStatus">
            <summary>
            Pointer to C_GetFunctionStatus
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_CancelFunction">
            <summary>
            Pointer to C_CancelFunction
            </summary>
        </member>
        <member name="F:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.C_WaitForSlotEvent">
            <summary>
            Pointer to C_WaitForSlotEvent
            </summary>
        </member>
        <member name="M:Net.Pkcs11Interop.LowLevelAPI.CK_FUNCTION_LIST_UNIX.ConvertToCkFunctionList">
            <summary>
            Converts CK_FUNCTION_LIST_UNIX to CK_FUNCTION_LIST
            </summary>
            <returns>CK_FUNCTION_LIST converted from CK_FUNCTION_LIST_UNIX</returns>
        </member>
    </members>
</doc>
